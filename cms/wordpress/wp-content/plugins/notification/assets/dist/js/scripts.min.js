!function(t,e){"function"==typeof define&&define.amd?define("sifter",e):"object"==typeof exports?module.exports=e():t.Sifter=e()}(this,function(){var t=function(t,e){this.items=t,this.settings=e||{diacritics:!0}};t.prototype.tokenize=function(t){if(!(t=o(String(t||"").toLowerCase()))||!t.length)return[];var e,n,i,s,c=[],l=t.split(/ +/);for(e=0,n=l.length;e<n;e++){if(i=r(l[e]),this.settings.diacritics)for(s in a)a.hasOwnProperty(s)&&(i=i.replace(new RegExp(s,"g"),a[s]));c.push({string:l[e],regex:new RegExp(i,"i")})}return c},t.prototype.iterator=function(t,e){var n;n=s(t)?Array.prototype.forEach||function(t){for(var e=0,n=this.length;e<n;e++)t(this[e],e,this)}:function(t){for(var e in this)this.hasOwnProperty(e)&&t(this[e],e,this)},n.apply(t,[e])},t.prototype.getScoreFunction=function(t,e){var n,o,r,s,a;n=this,t=n.prepareSearch(t,e),r=t.tokens,o=t.options.fields,s=r.length,a=t.options.nesting;var c=function(t,e){var n,i;return t?(t=String(t||""),-1===(i=t.search(e.regex))?0:(n=e.string.length/t.length,0===i&&(n+=.5),n)):0},l=function(){var t=o.length;return t?1===t?function(t,e){return c(i(e,o[0],a),t)}:function(e,n){for(var r=0,s=0;r<t;r++)s+=c(i(n,o[r],a),e);return s/t}:function(){return 0}}();return s?1===s?function(t){return l(r[0],t)}:"and"===t.options.conjunction?function(t){for(var e,n=0,i=0;n<s;n++){if((e=l(r[n],t))<=0)return 0;i+=e}return i/s}:function(t){for(var e=0,n=0;e<s;e++)n+=l(r[e],t);return n/s}:function(){return 0}},t.prototype.getSortFunction=function(t,n){var o,r,s,a,c,l,u,d,p,f,h;if(s=this,t=s.prepareSearch(t,n),h=!t.query&&n.sort_empty||n.sort,p=function(t,e){return"$score"===t?e.score:i(s.items[e.id],t,n.nesting)},c=[],h)for(o=0,r=h.length;o<r;o++)(t.query||"$score"!==h[o].field)&&c.push(h[o]);if(t.query){for(f=!0,o=0,r=c.length;o<r;o++)if("$score"===c[o].field){f=!1;break}f&&c.unshift({field:"$score",direction:"desc"})}else for(o=0,r=c.length;o<r;o++)if("$score"===c[o].field){c.splice(o,1);break}for(d=[],o=0,r=c.length;o<r;o++)d.push("desc"===c[o].direction?-1:1);return l=c.length,l?1===l?(a=c[0].field,u=d[0],function(t,n){return u*e(p(a,t),p(a,n))}):function(t,n){var i,o,r;for(i=0;i<l;i++)if(r=c[i].field,o=d[i]*e(p(r,t),p(r,n)))return o;return 0}:null},t.prototype.prepareSearch=function(t,e){if("object"==typeof t)return t;e=n({},e);var i=e.fields,o=e.sort,r=e.sort_empty;return i&&!s(i)&&(e.fields=[i]),o&&!s(o)&&(e.sort=[o]),r&&!s(r)&&(e.sort_empty=[r]),{options:e,query:String(t||"").toLowerCase(),tokens:this.tokenize(t),total:0,items:[]}},t.prototype.search=function(t,e){var n,i,o,r,s=this;return i=this.prepareSearch(t,e),e=i.options,t=i.query,r=e.score||s.getScoreFunction(i),t.length?s.iterator(s.items,function(t,o){n=r(t),(!1===e.filter||n>0)&&i.items.push({score:n,id:o})}):s.iterator(s.items,function(t,e){i.items.push({score:1,id:e})}),o=s.getSortFunction(i,e),o&&i.items.sort(o),i.total=i.items.length,"number"==typeof e.limit&&(i.items=i.items.slice(0,e.limit)),i};var e=function(t,e){return"number"==typeof t&&"number"==typeof e?t>e?1:t<e?-1:0:(t=c(String(t||"")),e=c(String(e||"")),t>e?1:e>t?-1:0)},n=function(t,e){var n,i,o,r;for(n=1,i=arguments.length;n<i;n++)if(r=arguments[n])for(o in r)r.hasOwnProperty(o)&&(t[o]=r[o]);return t},i=function(t,e,n){if(t&&e){if(!n)return t[e];for(var i=e.split(".");i.length&&(t=t[i.shift()]););return t}},o=function(t){return(t+"").replace(/^\s+|\s+$|/g,"")},r=function(t){return(t+"").replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")},s=Array.isArray||"undefined"!=typeof $&&$.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},a={a:"[aḀḁĂăÂâǍǎȺⱥȦȧẠạÄäÀàÁáĀāÃãÅåąĄÃąĄ]",b:"[b␢βΒB฿𐌁ᛒ]",c:"[cĆćĈĉČčĊċC̄c̄ÇçḈḉȻȼƇƈɕᴄＣｃ]",d:"[dĎďḊḋḐḑḌḍḒḓḎḏĐđD̦d̦ƉɖƊɗƋƌᵭᶁᶑȡᴅＤｄð]",e:"[eÉéÈèÊêḘḙĚěĔĕẼẽḚḛẺẻĖėËëĒēȨȩĘęᶒɆɇȄȅẾếỀềỄễỂểḜḝḖḗḔḕȆȇẸẹỆệⱸᴇＥｅɘǝƏƐε]",f:"[fƑƒḞḟ]",g:"[gɢ₲ǤǥĜĝĞğĢģƓɠĠġ]",h:"[hĤĥĦħḨḩẖẖḤḥḢḣɦʰǶƕ]",i:"[iÍíÌìĬĭÎîǏǐÏïḮḯĨĩĮįĪīỈỉȈȉȊȋỊịḬḭƗɨɨ̆ᵻᶖİiIıɪＩｉ]",j:"[jȷĴĵɈɉʝɟʲ]",k:"[kƘƙꝀꝁḰḱǨǩḲḳḴḵκϰ₭]",l:"[lŁłĽľĻļĹĺḶḷḸḹḼḽḺḻĿŀȽƚⱠⱡⱢɫɬᶅɭȴʟＬｌ]",n:"[nŃńǸǹŇňÑñṄṅŅņṆṇṊṋṈṉN̈n̈ƝɲȠƞᵰᶇɳȵɴＮｎŊŋ]",o:"[oØøÖöÓóÒòÔôǑǒŐőŎŏȮȯỌọƟɵƠơỎỏŌōÕõǪǫȌȍՕօ]",p:"[pṔṕṖṗⱣᵽƤƥᵱ]",q:"[qꝖꝗʠɊɋꝘꝙq̃]",r:"[rŔŕɌɍŘřŖŗṘṙȐȑȒȓṚṛⱤɽ]",s:"[sŚśṠṡṢṣꞨꞩŜŝŠšŞşȘșS̈s̈]",t:"[tŤťṪṫŢţṬṭƮʈȚțṰṱṮṯƬƭ]",u:"[uŬŭɄʉỤụÜüÚúÙùÛûǓǔŰűŬŭƯưỦủŪūŨũŲųȔȕ∪]",v:"[vṼṽṾṿƲʋꝞꝟⱱʋ]",w:"[wẂẃẀẁŴŵẄẅẆẇẈẉ]",x:"[xẌẍẊẋχ]",y:"[yÝýỲỳŶŷŸÿỸỹẎẏỴỵɎɏƳƴ]",z:"[zŹźẐẑŽžŻżẒẓẔẕƵƶ]"},c=function(){var t,e,n,i,o="",r={};for(n in a)if(a.hasOwnProperty(n))for(i=a[n].substring(2,a[n].length-1),o+=i,t=0,e=i.length;t<e;t++)r[i.charAt(t)]=n;var s=new RegExp("["+o+"]","g");return function(t){return t.replace(s,function(t){return r[t]}).toLowerCase()}}();return t}),function(t,e){"function"==typeof define&&define.amd?define("microplugin",e):"object"==typeof exports?module.exports=e():t.MicroPlugin=e()}(this,function(){var t={};t.mixin=function(t){t.plugins={},t.prototype.initializePlugins=function(t){var n,i,o,r=this,s=[];if(r.plugins={names:[],settings:{},requested:{},loaded:{}},e.isArray(t))for(n=0,i=t.length;n<i;n++)"string"==typeof t[n]?s.push(t[n]):(r.plugins.settings[t[n].name]=t[n].options,s.push(t[n].name));else if(t)for(o in t)t.hasOwnProperty(o)&&(r.plugins.settings[o]=t[o],s.push(o));for(;s.length;)r.require(s.shift())},t.prototype.loadPlugin=function(e){var n=this,i=n.plugins,o=t.plugins[e];if(!t.plugins.hasOwnProperty(e))throw new Error('Unable to find "'+e+'" plugin');i.requested[e]=!0,i.loaded[e]=o.fn.apply(n,[n.plugins.settings[e]||{}]),i.names.push(e)},t.prototype.require=function(t){var e=this,n=e.plugins;if(!e.plugins.loaded.hasOwnProperty(t)){if(n.requested[t])throw new Error('Plugin has circular dependency ("'+t+'")');e.loadPlugin(t)}return n.loaded[t]},t.define=function(e,n){t.plugins[e]={name:e,fn:n}}};var e={isArray:Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}};return t}),function(t,e){"function"==typeof define&&define.amd?define("selectize",["jquery","sifter","microplugin"],e):"object"==typeof exports?module.exports=e(require("jquery"),require("sifter"),require("microplugin")):t.Selectize=e(t.jQuery,t.Sifter,t.MicroPlugin)}(this,function(t,e,n){"use strict";var i=function(t,e){if("string"!=typeof e||e.length){var n="string"==typeof e?new RegExp(e,"i"):e,i=function(t){var e=0;if(3===t.nodeType){var o=t.data.search(n);if(o>=0&&t.data.length>0){var r=t.data.match(n),s=document.createElement("span");s.className="highlight";var a=t.splitText(o),c=(a.splitText(r[0].length),a.cloneNode(!0));s.appendChild(c),a.parentNode.replaceChild(s,a),e=1}}else if(1===t.nodeType&&t.childNodes&&!/(script|style)/i.test(t.tagName))for(var l=0;l<t.childNodes.length;++l)l+=i(t.childNodes[l]);return e};return t.each(function(){i(this)})}};t.fn.removeHighlight=function(){return this.find("span.highlight").each(function(){this.parentNode.firstChild.nodeName;var t=this.parentNode;t.replaceChild(this.firstChild,this),t.normalize()}).end()};var o=function(){};o.prototype={on:function(t,e){this._events=this._events||{},this._events[t]=this._events[t]||[],this._events[t].push(e)},off:function(t,e){var n=arguments.length;return 0===n?delete this._events:1===n?delete this._events[t]:(this._events=this._events||{},void(t in this._events!=!1&&this._events[t].splice(this._events[t].indexOf(e),1)))},trigger:function(t){if(this._events=this._events||{},t in this._events!=!1)for(var e=0;e<this._events[t].length;e++)this._events[t][e].apply(this,Array.prototype.slice.call(arguments,1))}},o.mixin=function(t){for(var e=["on","off","trigger"],n=0;n<e.length;n++)t.prototype[e[n]]=o.prototype[e[n]]};var r=/Mac/.test(navigator.userAgent),s=r?91:17,a=r?18:17,c=!/android/i.test(window.navigator.userAgent)&&!!document.createElement("input").validity,l=function(t){return void 0!==t},u=function(t){return void 0===t||null===t?null:"boolean"==typeof t?t?"1":"0":t+""},d=function(t){return(t+"").replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")},p={};p.before=function(t,e,n){var i=t[e];t[e]=function(){return n.apply(t,arguments),i.apply(t,arguments)}},p.after=function(t,e,n){var i=t[e];t[e]=function(){var e=i.apply(t,arguments);return n.apply(t,arguments),e}};var f=function(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}},h=function(t,e){var n;return function(){var i=this,o=arguments;window.clearTimeout(n),n=window.setTimeout(function(){t.apply(i,o)},e)}},g=function(t,e,n){var i,o=t.trigger,r={};t.trigger=function(){var n=arguments[0];if(-1===e.indexOf(n))return o.apply(t,arguments);r[n]=arguments},n.apply(t,[]),t.trigger=o;for(i in r)r.hasOwnProperty(i)&&o.apply(t,r[i])},v=function(t,e,n,i){t.on(e,n,function(e){for(var n=e.target;n&&n.parentNode!==t[0];)n=n.parentNode;return e.currentTarget=n,i.apply(this,[e])})},m=function(t){var e={};if("selectionStart"in t)e.start=t.selectionStart,e.length=t.selectionEnd-e.start;else if(document.selection){t.focus();var n=document.selection.createRange(),i=document.selection.createRange().text.length;n.moveStart("character",-t.value.length),e.start=n.text.length-i,e.length=i}return e},y=function(t,e,n){var i,o,r={};if(n)for(i=0,o=n.length;i<o;i++)r[n[i]]=t.css(n[i]);else r=t.css();e.css(r)},w=function(e,n){if(!e)return 0;var i=t("<test>").css({position:"absolute",top:-99999,left:-99999,width:"auto",padding:0,whiteSpace:"pre"}).text(e).appendTo("body");y(n,i,["letterSpacing","fontSize","fontFamily","fontWeight","textTransform"]);var o=i.width();return i.remove(),o},b=function(t){var e=null,n=function(n,i){var o,r,s,a,c,l,u,d;n=n||window.event||{},i=i||{},n.metaKey||n.altKey||(i.force||!1!==t.data("grow"))&&(o=t.val(),n.type&&"keydown"===n.type.toLowerCase()&&(r=n.keyCode,s=r>=97&&r<=122||r>=65&&r<=90||r>=48&&r<=57||32===r,46===r||8===r?(d=m(t[0]),d.length?o=o.substring(0,d.start)+o.substring(d.start+d.length):8===r&&d.start?o=o.substring(0,d.start-1)+o.substring(d.start+1):46===r&&void 0!==d.start&&(o=o.substring(0,d.start)+o.substring(d.start+1))):s&&(l=n.shiftKey,u=String.fromCharCode(n.keyCode),u=l?u.toUpperCase():u.toLowerCase(),o+=u)),a=t.attr("placeholder"),!o&&a&&(o=a),(c=w(o,t)+4)!==e&&(e=c,t.width(c),t.triggerHandler("resize")))};t.on("keydown keyup update blur",n),n()},C=function(t){var e=document.createElement("div");return e.appendChild(t.cloneNode(!0)),e.innerHTML},x=function(n,i){var o,r,s,a,c=this;a=n[0],a.selectize=c;var l=window.getComputedStyle&&window.getComputedStyle(a,null);if(s=l?l.getPropertyValue("direction"):a.currentStyle&&a.currentStyle.direction,s=s||n.parents("[dir]:first").attr("dir")||"",t.extend(c,{order:0,settings:i,$input:n,tabIndex:n.attr("tabindex")||"",tagType:"select"===a.tagName.toLowerCase()?1:2,rtl:/rtl/i.test(s),eventNS:".selectize"+ ++x.count,highlightedValue:null,isOpen:!1,isDisabled:!1,isRequired:n.is("[required]"),isInvalid:!1,isLocked:!1,isFocused:!1,isInputHidden:!1,isSetup:!1,isShiftDown:!1,isCmdDown:!1,isCtrlDown:!1,ignoreFocus:!1,ignoreBlur:!1,ignoreHover:!1,hasOptions:!1,currentResults:null,lastValue:"",caretPos:0,loading:0,loadedSearches:{},$activeOption:null,$activeItems:[],optgroups:{},options:{},userOptions:{},items:[],renderCache:{},onSearchChange:null===i.loadThrottle?c.onSearchChange:h(c.onSearchChange,i.loadThrottle)}),c.sifter=new e(this.options,{diacritics:i.diacritics}),c.settings.options){for(o=0,r=c.settings.options.length;o<r;o++)c.registerOption(c.settings.options[o]);delete c.settings.options}if(c.settings.optgroups){for(o=0,r=c.settings.optgroups.length;o<r;o++)c.registerOptionGroup(c.settings.optgroups[o]);delete c.settings.optgroups}c.settings.mode=c.settings.mode||(1===c.settings.maxItems?"single":"multi"),"boolean"!=typeof c.settings.hideSelected&&(c.settings.hideSelected="multi"===c.settings.mode),c.initializePlugins(c.settings.plugins),c.setupCallbacks(),c.setupTemplates(),c.setup()};return o.mixin(x),void 0!==n?n.mixin(x):function(t,e){e||(e={});console.error("Selectize: "+t),e.explanation&&(console.group&&console.group(),console.error(e.explanation),console.group&&console.groupEnd())}("Dependency MicroPlugin is missing",{explanation:'Make sure you either: (1) are using the "standalone" version of Selectize, or (2) require MicroPlugin before you load Selectize.'}),t.extend(x.prototype,{setup:function(){var e,n,i,o,l,u,d,p,f,h,g=this,m=g.settings,y=g.eventNS,w=t(window),C=t(document),x=g.$input;if(d=g.settings.mode,p=x.attr("class")||"",e=t("<div>").addClass(m.wrapperClass).addClass(p).addClass(d),n=t("<div>").addClass(m.inputClass).addClass("items").appendTo(e),i=t('<input type="text" autocomplete="off" />').appendTo(n).attr("tabindex",x.is(":disabled")?"-1":g.tabIndex),u=t(m.dropdownParent||e),o=t("<div>").addClass(m.dropdownClass).addClass(d).hide().appendTo(u),l=t("<div>").addClass(m.dropdownContentClass).appendTo(o),(h=x.attr("id"))&&(i.attr("id",h+"-selectized"),t("label[for='"+h+"']").attr("for",h+"-selectized")),g.settings.copyClassesToDropdown&&o.addClass(p),e.css({width:x[0].style.width}),g.plugins.names.length&&(f="plugin-"+g.plugins.names.join(" plugin-"),e.addClass(f),o.addClass(f)),(null===m.maxItems||m.maxItems>1)&&1===g.tagType&&x.attr("multiple","multiple"),g.settings.placeholder&&i.attr("placeholder",m.placeholder),!g.settings.splitOn&&g.settings.delimiter){var O=g.settings.delimiter.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&");g.settings.splitOn=new RegExp("\\s*"+O+"+\\s*")}x.attr("autocorrect")&&i.attr("autocorrect",x.attr("autocorrect")),x.attr("autocapitalize")&&i.attr("autocapitalize",x.attr("autocapitalize")),g.$wrapper=e,g.$control=n,g.$control_input=i,g.$dropdown=o,g.$dropdown_content=l,o.on("mouseenter","[data-selectable]",function(){return g.onOptionHover.apply(g,arguments)}),o.on("mousedown click","[data-selectable]",function(){return g.onOptionSelect.apply(g,arguments)}),v(n,"mousedown","*:not(input)",function(){return g.onItemSelect.apply(g,arguments)}),b(i),n.on({mousedown:function(){return g.onMouseDown.apply(g,arguments)},click:function(){return g.onClick.apply(g,arguments)}}),i.on({mousedown:function(t){t.stopPropagation()},keydown:function(){return g.onKeyDown.apply(g,arguments)},keyup:function(){return g.onKeyUp.apply(g,arguments)},keypress:function(){return g.onKeyPress.apply(g,arguments)},resize:function(){g.positionDropdown.apply(g,[])},blur:function(){return g.onBlur.apply(g,arguments)},focus:function(){return g.ignoreBlur=!1,g.onFocus.apply(g,arguments)},paste:function(){return g.onPaste.apply(g,arguments)}}),C.on("keydown"+y,function(t){g.isCmdDown=t[r?"metaKey":"ctrlKey"],g.isCtrlDown=t[r?"altKey":"ctrlKey"],g.isShiftDown=t.shiftKey}),C.on("keyup"+y,function(t){t.keyCode===a&&(g.isCtrlDown=!1),16===t.keyCode&&(g.isShiftDown=!1),t.keyCode===s&&(g.isCmdDown=!1)}),C.on("mousedown"+y,function(t){if(g.isFocused){if(t.target===g.$dropdown[0]||t.target.parentNode===g.$dropdown[0])return!1;g.$control.has(t.target).length||t.target===g.$control[0]||g.blur(t.target)}}),w.on(["scroll"+y,"resize"+y].join(" "),function(){g.isOpen&&g.positionDropdown.apply(g,arguments)}),w.on("mousemove"+y,function(){g.ignoreHover=!1}),this.revertSettings={$children:x.children().detach(),tabindex:x.attr("tabindex")},x.attr("tabindex",-1).hide().after(g.$wrapper),t.isArray(m.items)&&(g.setValue(m.items),delete m.items),c&&x.on("invalid"+y,function(t){t.preventDefault(),g.isInvalid=!0,g.refreshState()}),g.updateOriginalInput(),g.refreshItems(),g.refreshState(),g.updatePlaceholder(),g.isSetup=!0,x.is(":disabled")&&g.disable(),g.on("change",this.onChange),x.data("selectize",g),x.addClass("selectized"),g.trigger("initialize"),!0===m.preload&&g.onSearchChange("")},setupTemplates:function(){var e=this,n=e.settings.labelField,i=e.settings.optgroupLabelField,o={optgroup:function(t){return'<div class="optgroup">'+t.html+"</div>"},optgroup_header:function(t,e){return'<div class="optgroup-header">'+e(t[i])+"</div>"},option:function(t,e){return'<div class="option">'+e(t[n])+"</div>"},item:function(t,e){return'<div class="item">'+e(t[n])+"</div>"},option_create:function(t,e){return'<div class="create">Add <strong>'+e(t.input)+"</strong>&hellip;</div>"}};e.settings.render=t.extend({},o,e.settings.render)},setupCallbacks:function(){var t,e,n={initialize:"onInitialize",change:"onChange",item_add:"onItemAdd",item_remove:"onItemRemove",clear:"onClear",option_add:"onOptionAdd",option_remove:"onOptionRemove",option_clear:"onOptionClear",optgroup_add:"onOptionGroupAdd",optgroup_remove:"onOptionGroupRemove",optgroup_clear:"onOptionGroupClear",dropdown_open:"onDropdownOpen",dropdown_close:"onDropdownClose",type:"onType",load:"onLoad",focus:"onFocus",blur:"onBlur"};for(t in n)n.hasOwnProperty(t)&&(e=this.settings[n[t]])&&this.on(t,e)},onClick:function(t){var e=this;e.isFocused||(e.focus(),t.preventDefault())},onMouseDown:function(e){var n=this,i=e.isDefaultPrevented();t(e.target);if(n.isFocused){if(e.target!==n.$control_input[0])return"single"===n.settings.mode?n.isOpen?n.close():n.open():i||n.setActiveItem(null),!1}else i||window.setTimeout(function(){n.focus()},0)},onChange:function(){this.$input.trigger("change")},onPaste:function(e){var n=this;if(n.isFull()||n.isInputHidden||n.isLocked)return void e.preventDefault();n.settings.splitOn&&setTimeout(function(){var e=n.$control_input.val();if(e.match(n.settings.splitOn))for(var i=t.trim(e).split(n.settings.splitOn),o=0,r=i.length;o<r;o++)n.createItem(i[o])},0)},onKeyPress:function(t){if(this.isLocked)return t&&t.preventDefault();var e=String.fromCharCode(t.keyCode||t.which);return this.settings.create&&"multi"===this.settings.mode&&e===this.settings.delimiter?(this.createItem(),t.preventDefault(),!1):void 0},onKeyDown:function(t){var e=(t.target,this.$control_input[0],this);if(e.isLocked)return void(9!==t.keyCode&&t.preventDefault());switch(t.keyCode){case 65:if(e.isCmdDown)return void e.selectAll();break;case 27:return void(e.isOpen&&(t.preventDefault(),t.stopPropagation(),e.close()));case 78:if(!t.ctrlKey||t.altKey)break;case 40:if(!e.isOpen&&e.hasOptions)e.open();else if(e.$activeOption){e.ignoreHover=!0;var n=e.getAdjacentOption(e.$activeOption,1);n.length&&e.setActiveOption(n,!0,!0)}return void t.preventDefault();case 80:if(!t.ctrlKey||t.altKey)break;case 38:if(e.$activeOption){e.ignoreHover=!0;var i=e.getAdjacentOption(e.$activeOption,-1);i.length&&e.setActiveOption(i,!0,!0)}return void t.preventDefault();case 13:return void(e.isOpen&&e.$activeOption&&(e.onOptionSelect({currentTarget:e.$activeOption}),t.preventDefault()));case 37:return void e.advanceSelection(-1,t);case 39:return void e.advanceSelection(1,t);case 9:return e.settings.selectOnTab&&e.isOpen&&e.$activeOption&&(e.onOptionSelect({currentTarget:e.$activeOption}),e.isFull()||t.preventDefault()),void(e.settings.create&&e.createItem()&&t.preventDefault());case 8:case 46:return void e.deleteSelection(t)}return!e.isFull()&&!e.isInputHidden||(r?t.metaKey:t.ctrlKey)?void 0:void t.preventDefault()},onKeyUp:function(t){var e=this;if(e.isLocked)return t&&t.preventDefault();var n=e.$control_input.val()||"";e.lastValue!==n&&(e.lastValue=n,e.onSearchChange(n),e.refreshOptions(),e.trigger("type",n))},onSearchChange:function(t){var e=this,n=e.settings.load;n&&(e.loadedSearches.hasOwnProperty(t)||(e.loadedSearches[t]=!0,e.load(function(i){n.apply(e,[t,i])})))},onFocus:function(t){var e=this,n=e.isFocused;if(e.isDisabled)return e.blur(),t&&t.preventDefault(),!1;e.ignoreFocus||(e.isFocused=!0,"focus"===e.settings.preload&&e.onSearchChange(""),n||e.trigger("focus"),e.$activeItems.length||(e.showInput(),e.setActiveItem(null),e.refreshOptions(!!e.settings.openOnFocus)),e.refreshState())},onBlur:function(t,e){var n=this;if(n.isFocused&&(n.isFocused=!1,!n.ignoreFocus)){if(!n.ignoreBlur&&document.activeElement===n.$dropdown_content[0])return n.ignoreBlur=!0,void n.onFocus(t);var i=function(){n.close(),n.setTextboxValue(""),n.setActiveItem(null),n.setActiveOption(null),n.setCaret(n.items.length),n.refreshState(),e&&e.focus&&e.focus(),n.ignoreFocus=!1,n.trigger("blur")};n.ignoreFocus=!0,n.settings.create&&n.settings.createOnBlur?n.createItem(null,!1,i):i()}},onOptionHover:function(t){this.ignoreHover||this.setActiveOption(t.currentTarget,!1)},onOptionSelect:function(e){var n,i,o=this;e.preventDefault&&(e.preventDefault(),e.stopPropagation()),i=t(e.currentTarget),i.hasClass("create")?o.createItem(null,function(){o.settings.closeAfterSelect&&o.close()}):void 0!==(n=i.attr("data-value"))&&(o.lastQuery=null,o.setTextboxValue(""),o.addItem(n),o.settings.closeAfterSelect?o.close():!o.settings.hideSelected&&e.type&&/mouse/.test(e.type)&&o.setActiveOption(o.getOption(n)))},onItemSelect:function(t){var e=this;e.isLocked||"multi"===e.settings.mode&&(t.preventDefault(),e.setActiveItem(t.currentTarget,t))},load:function(t){var e=this,n=e.$wrapper.addClass(e.settings.loadingClass);e.loading++,t.apply(e,[function(t){e.loading=Math.max(e.loading-1,0),t&&t.length&&(e.addOption(t),e.refreshOptions(e.isFocused&&!e.isInputHidden)),e.loading||n.removeClass(e.settings.loadingClass),e.trigger("load",t)}])},setTextboxValue:function(t){var e=this.$control_input;e.val()!==t&&(e.val(t).triggerHandler("update"),this.lastValue=t)},getValue:function(){return 1===this.tagType&&this.$input.attr("multiple")?this.items:this.items.join(this.settings.delimiter)},setValue:function(t,e){g(this,e?[]:["change"],function(){this.clear(e),this.addItems(t,e)})},setActiveItem:function(e,n){var i,o,r,s,a,c,l,u,d=this;if("single"!==d.settings.mode){if(e=t(e),!e.length)return t(d.$activeItems).removeClass("active"),d.$activeItems=[],void(d.isFocused&&d.showInput());if("mousedown"===(i=n&&n.type.toLowerCase())&&d.isShiftDown&&d.$activeItems.length){for(u=d.$control.children(".active:last"),s=Array.prototype.indexOf.apply(d.$control[0].childNodes,[u[0]]),a=Array.prototype.indexOf.apply(d.$control[0].childNodes,[e[0]]),s>a&&(l=s,s=a,a=l),o=s;o<=a;o++)c=d.$control[0].childNodes[o],-1===d.$activeItems.indexOf(c)&&(t(c).addClass("active"),d.$activeItems.push(c));n.preventDefault()}else"mousedown"===i&&d.isCtrlDown||"keydown"===i&&this.isShiftDown?e.hasClass("active")?(r=d.$activeItems.indexOf(e[0]),d.$activeItems.splice(r,1),e.removeClass("active")):d.$activeItems.push(e.addClass("active")[0]):(t(d.$activeItems).removeClass("active"),d.$activeItems=[e.addClass("active")[0]]);d.hideInput(),this.isFocused||d.focus()}},setActiveOption:function(e,n,i){var o,r,s,a,c,u=this;u.$activeOption&&u.$activeOption.removeClass("active"),u.$activeOption=null,e=t(e),e.length&&(u.$activeOption=e.addClass("active"),!n&&l(n)||(o=u.$dropdown_content.height(),r=u.$activeOption.outerHeight(!0),n=u.$dropdown_content.scrollTop()||0,s=u.$activeOption.offset().top-u.$dropdown_content.offset().top+n,a=s,c=s-o+r,s+r>o+n?u.$dropdown_content.stop().animate({scrollTop:c},i?u.settings.scrollDuration:0):s<n&&u.$dropdown_content.stop().animate({scrollTop:a},i?u.settings.scrollDuration:0)))},selectAll:function(){var t=this;"single"!==t.settings.mode&&(t.$activeItems=Array.prototype.slice.apply(t.$control.children(":not(input)").addClass("active")),t.$activeItems.length&&(t.hideInput(),t.close()),t.focus())},hideInput:function(){var t=this;t.setTextboxValue(""),t.$control_input.css({opacity:0,position:"absolute",left:t.rtl?1e4:-1e4}),t.isInputHidden=!0},showInput:function(){this.$control_input.css({opacity:1,position:"relative",left:0}),this.isInputHidden=!1},focus:function(){var t=this;t.isDisabled||(t.ignoreFocus=!0,t.$control_input[0].focus(),window.setTimeout(function(){t.ignoreFocus=!1,t.onFocus()},0))},blur:function(t){this.$control_input[0].blur(),this.onBlur(null,t)},getScoreFunction:function(t){return this.sifter.getScoreFunction(t,this.getSearchOptions())},getSearchOptions:function(){var t=this.settings,e=t.sortField;return"string"==typeof e&&(e=[{field:e}]),{fields:t.searchField,conjunction:t.searchConjunction,sort:e}},search:function(e){var n,i,o,r=this,s=r.settings,a=this.getSearchOptions();if(s.score&&"function"!=typeof(o=r.settings.score.apply(this,[e])))throw new Error('Selectize "score" setting must be a function that returns a function');if(e!==r.lastQuery?(r.lastQuery=e,i=r.sifter.search(e,t.extend(a,{score:o})),r.currentResults=i):i=t.extend(!0,{},r.currentResults),s.hideSelected)for(n=i.items.length-1;n>=0;n--)-1!==r.items.indexOf(u(i.items[n].id))&&i.items.splice(n,1);return i},refreshOptions:function(e){var n,o,r,s,a,c,l,d,p,f,h,g,v,m,y,w;void 0===e&&(e=!0);var b=this,x=t.trim(b.$control_input.val()),O=b.search(x),$=b.$dropdown_content,_=b.$activeOption&&u(b.$activeOption.attr("data-value"));for(s=O.items.length,"number"==typeof b.settings.maxOptions&&(s=Math.min(s,b.settings.maxOptions)),a={},c=[],n=0;n<s;n++)for(l=b.options[O.items[n].id],d=b.render("option",l),p=l[b.settings.optgroupField]||"",f=t.isArray(p)?p:[p],o=0,r=f&&f.length;o<r;o++)p=f[o],b.optgroups.hasOwnProperty(p)||(p=""),a.hasOwnProperty(p)||(a[p]=document.createDocumentFragment(),c.push(p)),a[p].appendChild(d);for(this.settings.lockOptgroupOrder&&c.sort(function(t,e){return(b.optgroups[t].$order||0)-(b.optgroups[e].$order||0)}),h=document.createDocumentFragment(),n=0,s=c.length;n<s;n++)p=c[n],b.optgroups.hasOwnProperty(p)&&a[p].childNodes.length?(g=document.createDocumentFragment(),g.appendChild(b.render("optgroup_header",b.optgroups[p])),g.appendChild(a[p]),h.appendChild(b.render("optgroup",t.extend({},b.optgroups[p],{html:C(g),dom:g})))):h.appendChild(a[p]);if($.html(h),b.settings.highlight&&O.query.length&&O.tokens.length)for($.removeHighlight(),n=0,s=O.tokens.length;n<s;n++)i($,O.tokens[n].regex);if(!b.settings.hideSelected)for(n=0,s=b.items.length;n<s;n++)b.getOption(b.items[n]).addClass("selected");v=b.canCreate(x),v&&($.prepend(b.render("option_create",{input:x})),w=t($[0].childNodes[0])),b.hasOptions=O.items.length>0||v,b.hasOptions?(O.items.length>0?(y=_&&b.getOption(_),y&&y.length?m=y:"single"===b.settings.mode&&b.items.length&&(m=b.getOption(b.items[0])),m&&m.length||(m=w&&!b.settings.addPrecedence?b.getAdjacentOption(w,1):$.find("[data-selectable]:first"))):m=w,b.setActiveOption(m),e&&!b.isOpen&&b.open()):(b.setActiveOption(null),e&&b.isOpen&&b.close())},addOption:function(e){var n,i,o,r=this;if(t.isArray(e))for(n=0,i=e.length;n<i;n++)r.addOption(e[n]);else(o=r.registerOption(e))&&(r.userOptions[o]=!0,r.lastQuery=null,r.trigger("option_add",o,e))},registerOption:function(t){var e=u(t[this.settings.valueField]);return void 0!==e&&null!==e&&!this.options.hasOwnProperty(e)&&(t.$order=t.$order||++this.order,this.options[e]=t,e)},registerOptionGroup:function(t){var e=u(t[this.settings.optgroupValueField]);return!!e&&(t.$order=t.$order||++this.order,this.optgroups[e]=t,e)},addOptionGroup:function(t,e){e[this.settings.optgroupValueField]=t,(t=this.registerOptionGroup(e))&&this.trigger("optgroup_add",t,e)},removeOptionGroup:function(t){this.optgroups.hasOwnProperty(t)&&(delete this.optgroups[t],this.renderCache={},this.trigger("optgroup_remove",t))},clearOptionGroups:function(){this.optgroups={},this.renderCache={},this.trigger("optgroup_clear")},updateOption:function(e,n){var i,o,r,s,a,c,l,d=this;if(e=u(e),r=u(n[d.settings.valueField]),null!==e&&d.options.hasOwnProperty(e)){if("string"!=typeof r)throw new Error("Value must be set in option data");l=d.options[e].$order,r!==e&&(delete d.options[e],-1!==(s=d.items.indexOf(e))&&d.items.splice(s,1,r)),n.$order=n.$order||l,d.options[r]=n,a=d.renderCache.item,c=d.renderCache.option,a&&(delete a[e],delete a[r]),c&&(delete c[e],delete c[r]),-1!==d.items.indexOf(r)&&(i=d.getItem(e),o=t(d.render("item",n)),i.hasClass("active")&&o.addClass("active"),i.replaceWith(o)),d.lastQuery=null,d.isOpen&&d.refreshOptions(!1)}},removeOption:function(t,e){var n=this;t=u(t);var i=n.renderCache.item,o=n.renderCache.option;i&&delete i[t],o&&delete o[t],delete n.userOptions[t],delete n.options[t],n.lastQuery=null,n.trigger("option_remove",t),n.removeItem(t,e)},clearOptions:function(){var t=this;t.loadedSearches={},t.userOptions={},t.renderCache={},t.options=t.sifter.items={},t.lastQuery=null,t.trigger("option_clear"),t.clear()},getOption:function(t){return this.getElementWithValue(t,this.$dropdown_content.find("[data-selectable]"))},getAdjacentOption:function(e,n){var i=this.$dropdown.find("[data-selectable]"),o=i.index(e)+n;return o>=0&&o<i.length?i.eq(o):t()},getElementWithValue:function(e,n){if(void 0!==(e=u(e))&&null!==e)for(var i=0,o=n.length;i<o;i++)if(n[i].getAttribute("data-value")===e)return t(n[i]);return t()},getItem:function(t){return this.getElementWithValue(t,this.$control.children())},addItems:function(e,n){for(var i=t.isArray(e)?e:[e],o=0,r=i.length;o<r;o++)this.isPending=o<r-1,this.addItem(i[o],n)},addItem:function(e,n){g(this,n?[]:["change"],function(){var i,o,r,s,a,c=this,l=c.settings.mode;if(e=u(e),-1!==c.items.indexOf(e))return void("single"===l&&c.close());c.options.hasOwnProperty(e)&&("single"===l&&c.clear(n),"multi"===l&&c.isFull()||(i=t(c.render("item",c.options[e])),a=c.isFull(),c.items.splice(c.caretPos,0,e),c.insertAtCaret(i),(!c.isPending||!a&&c.isFull())&&c.refreshState(),c.isSetup&&(r=c.$dropdown_content.find("[data-selectable]"),c.isPending||(o=c.getOption(e),s=c.getAdjacentOption(o,1).attr("data-value"),c.refreshOptions(c.isFocused&&"single"!==l),s&&c.setActiveOption(c.getOption(s))),!r.length||c.isFull()?c.close():c.positionDropdown(),c.updatePlaceholder(),c.trigger("item_add",e,i),c.updateOriginalInput({silent:n}))))})},removeItem:function(e,n){var i,o,r,s=this;i=e instanceof t?e:s.getItem(e),e=u(i.attr("data-value")),-1!==(o=s.items.indexOf(e))&&(i.remove(),i.hasClass("active")&&(r=s.$activeItems.indexOf(i[0]),s.$activeItems.splice(r,1)),s.items.splice(o,1),s.lastQuery=null,!s.settings.persist&&s.userOptions.hasOwnProperty(e)&&s.removeOption(e,n),o<s.caretPos&&s.setCaret(s.caretPos-1),s.refreshState(),s.updatePlaceholder(),s.updateOriginalInput({silent:n}),s.positionDropdown(),s.trigger("item_remove",e,i))},createItem:function(e,n){var i=this,o=i.caretPos;e=e||t.trim(i.$control_input.val()||"");var r=arguments[arguments.length-1];if("function"!=typeof r&&(r=function(){}),"boolean"!=typeof n&&(n=!0),!i.canCreate(e))return r(),!1;i.lock();var s="function"==typeof i.settings.create?this.settings.create:function(t){var e={};return e[i.settings.labelField]=t,e[i.settings.valueField]=t,e},a=f(function(t){if(i.unlock(),!t||"object"!=typeof t)return r();var e=u(t[i.settings.valueField]);if("string"!=typeof e)return r();i.setTextboxValue(""),i.addOption(t),i.setCaret(o),i.addItem(e),i.refreshOptions(n&&"single"!==i.settings.mode),r(t)}),c=s.apply(this,[e,a]);return void 0!==c&&a(c),!0},refreshItems:function(){this.lastQuery=null,this.isSetup&&this.addItem(this.items),this.refreshState(),this.updateOriginalInput()},refreshState:function(){this.refreshValidityState(),this.refreshClasses()},refreshValidityState:function(){if(!this.isRequired)return!1;var t=!this.items.length;this.isInvalid=t,this.$control_input.prop("required",t),this.$input.prop("required",!t)},refreshClasses:function(){var e=this,n=e.isFull(),i=e.isLocked;e.$wrapper.toggleClass("rtl",e.rtl),e.$control.toggleClass("focus",e.isFocused).toggleClass("disabled",e.isDisabled).toggleClass("required",e.isRequired).toggleClass("invalid",e.isInvalid).toggleClass("locked",i).toggleClass("full",n).toggleClass("not-full",!n).toggleClass("input-active",e.isFocused&&!e.isInputHidden).toggleClass("dropdown-active",e.isOpen).toggleClass("has-options",!t.isEmptyObject(e.options)).toggleClass("has-items",e.items.length>0),e.$control_input.data("grow",!n&&!i)},isFull:function(){return null!==this.settings.maxItems&&this.items.length>=this.settings.maxItems},updateOriginalInput:function(t){var e,n,i,o,r=this;if(t=t||{},1===r.tagType){for(i=[],e=0,n=r.items.length;e<n;e++)o=r.options[r.items[e]][r.settings.labelField]||"",i.push('<option value="'+d(r.items[e])+'" selected="selected">'+d(o)+"</option>");i.length||this.$input.attr("multiple")||i.push('<option value="" selected="selected"></option>'),r.$input.html(i.join(""))}else r.$input.val(r.getValue()),r.$input.attr("value",r.$input.val());r.isSetup&&(t.silent||r.trigger("change",r.$input.val()))},updatePlaceholder:function(){if(this.settings.placeholder){
var t=this.$control_input;this.items.length?t.removeAttr("placeholder"):t.attr("placeholder",this.settings.placeholder),t.triggerHandler("update",{force:!0})}},open:function(){var t=this;t.isLocked||t.isOpen||"multi"===t.settings.mode&&t.isFull()||(t.focus(),t.isOpen=!0,t.refreshState(),t.$dropdown.css({visibility:"hidden",display:"block"}),t.positionDropdown(),t.$dropdown.css({visibility:"visible"}),t.trigger("dropdown_open",t.$dropdown))},close:function(){var t=this,e=t.isOpen;"single"===t.settings.mode&&t.items.length&&(t.hideInput(),t.$control_input.blur()),t.isOpen=!1,t.$dropdown.hide(),t.setActiveOption(null),t.refreshState(),e&&t.trigger("dropdown_close",t.$dropdown)},positionDropdown:function(){var t=this.$control,e="body"===this.settings.dropdownParent?t.offset():t.position();e.top+=t.outerHeight(!0),this.$dropdown.css({width:t.outerWidth(),top:e.top,left:e.left})},clear:function(t){var e=this;e.items.length&&(e.$control.children(":not(input)").remove(),e.items=[],e.lastQuery=null,e.setCaret(0),e.setActiveItem(null),e.updatePlaceholder(),e.updateOriginalInput({silent:t}),e.refreshState(),e.showInput(),e.trigger("clear"))},insertAtCaret:function(e){var n=Math.min(this.caretPos,this.items.length);0===n?this.$control.prepend(e):t(this.$control[0].childNodes[n]).before(e),this.setCaret(n+1)},deleteSelection:function(e){var n,i,o,r,s,a,c,l,u,d=this;if(o=e&&8===e.keyCode?-1:1,r=m(d.$control_input[0]),d.$activeOption&&!d.settings.hideSelected&&(c=d.getAdjacentOption(d.$activeOption,-1).attr("data-value")),s=[],d.$activeItems.length){for(u=d.$control.children(".active:"+(o>0?"last":"first")),a=d.$control.children(":not(input)").index(u),o>0&&a++,n=0,i=d.$activeItems.length;n<i;n++)s.push(t(d.$activeItems[n]).attr("data-value"));e&&(e.preventDefault(),e.stopPropagation())}else(d.isFocused||"single"===d.settings.mode)&&d.items.length&&(o<0&&0===r.start&&0===r.length?s.push(d.items[d.caretPos-1]):o>0&&r.start===d.$control_input.val().length&&s.push(d.items[d.caretPos]));if(!s.length||"function"==typeof d.settings.onDelete&&!1===d.settings.onDelete.apply(d,[s]))return!1;for(void 0!==a&&d.setCaret(a);s.length;)d.removeItem(s.pop());return d.showInput(),d.positionDropdown(),d.refreshOptions(!0),c&&(l=d.getOption(c),l.length&&d.setActiveOption(l)),!0},advanceSelection:function(t,e){var n,i,o,r,s,a=this;0!==t&&(a.rtl&&(t*=-1),n=t>0?"last":"first",i=m(a.$control_input[0]),a.isFocused&&!a.isInputHidden?(r=a.$control_input.val().length,(t<0?0===i.start&&0===i.length:i.start===r)&&!r&&a.advanceCaret(t,e)):(s=a.$control.children(".active:"+n),s.length&&(o=a.$control.children(":not(input)").index(s),a.setActiveItem(null),a.setCaret(t>0?o+1:o))))},advanceCaret:function(t,e){var n,i,o=this;0!==t&&(n=t>0?"next":"prev",o.isShiftDown?(i=o.$control_input[n](),i.length&&(o.hideInput(),o.setActiveItem(i),e&&e.preventDefault())):o.setCaret(o.caretPos+t))},setCaret:function(e){var n=this;if(e="single"===n.settings.mode?n.items.length:Math.max(0,Math.min(n.items.length,e)),!n.isPending){var i,o,r,s;for(r=n.$control.children(":not(input)"),i=0,o=r.length;i<o;i++)s=t(r[i]).detach(),i<e?n.$control_input.before(s):n.$control.append(s)}n.caretPos=e},lock:function(){this.close(),this.isLocked=!0,this.refreshState()},unlock:function(){this.isLocked=!1,this.refreshState()},disable:function(){var t=this;t.$input.prop("disabled",!0),t.$control_input.prop("disabled",!0).prop("tabindex",-1),t.isDisabled=!0,t.lock()},enable:function(){var t=this;t.$input.prop("disabled",!1),t.$control_input.prop("disabled",!1).prop("tabindex",t.tabIndex),t.isDisabled=!1,t.unlock()},destroy:function(){var e=this,n=e.eventNS,i=e.revertSettings;e.trigger("destroy"),e.off(),e.$wrapper.remove(),e.$dropdown.remove(),e.$input.html("").append(i.$children).removeAttr("tabindex").removeClass("selectized").attr({tabindex:i.tabindex}).show(),e.$control_input.removeData("grow"),e.$input.removeData("selectize"),t(window).off(n),t(document).off(n),t(document.body).off(n),delete e.$input[0].selectize},render:function(e,n){var i,o,r="",s=!1,a=this;return"option"!==e&&"item"!==e||(i=u(n[a.settings.valueField]),s=!!i),s&&(l(a.renderCache[e])||(a.renderCache[e]={}),a.renderCache[e].hasOwnProperty(i))?a.renderCache[e][i]:(r=t(a.settings.render[e].apply(this,[n,d])),"option"===e||"option_create"===e?r.attr("data-selectable",""):"optgroup"===e&&(o=n[a.settings.optgroupValueField]||"",r.attr("data-group",o)),"option"!==e&&"item"!==e||r.attr("data-value",i||""),s&&(a.renderCache[e][i]=r[0]),r[0])},clearCache:function(t){var e=this;void 0===t?e.renderCache={}:delete e.renderCache[t]},canCreate:function(t){var e=this;if(!e.settings.create)return!1;var n=e.settings.createFilter;return t.length&&("function"!=typeof n||n.apply(e,[t]))&&("string"!=typeof n||new RegExp(n).test(t))&&(!(n instanceof RegExp)||n.test(t))}}),x.count=0,x.defaults={options:[],optgroups:[],plugins:[],delimiter:",",splitOn:null,persist:!0,diacritics:!0,create:!1,createOnBlur:!1,createFilter:null,highlight:!0,openOnFocus:!0,maxOptions:1e3,maxItems:null,hideSelected:null,addPrecedence:!1,selectOnTab:!1,preload:!1,allowEmptyOption:!1,closeAfterSelect:!1,scrollDuration:60,loadThrottle:300,loadingClass:"loading",dataAttr:"data-data",optgroupField:"optgroup",valueField:"value",labelField:"text",optgroupLabelField:"label",optgroupValueField:"value",lockOptgroupOrder:!1,sortField:"$order",searchField:["text"],searchConjunction:"and",mode:null,wrapperClass:"selectize-control",inputClass:"selectize-input",dropdownClass:"selectize-dropdown",dropdownContentClass:"selectize-dropdown-content",dropdownParent:null,copyClassesToDropdown:!0,render:{}},t.fn.selectize=function(e){var n=t.fn.selectize.defaults,i=t.extend({},n,e),o=i.dataAttr,r=i.labelField,s=i.valueField,a=i.optgroupField,c=i.optgroupLabelField,l=i.optgroupValueField,d=function(e,n){var a,c,l,u,d=e.attr(o);if(d)for(n.options=JSON.parse(d),a=0,c=n.options.length;a<c;a++)n.items.push(n.options[a][s]);else{var p=t.trim(e.val()||"");if(!i.allowEmptyOption&&!p.length)return;for(l=p.split(i.delimiter),a=0,c=l.length;a<c;a++)u={},u[r]=l[a],u[s]=l[a],n.options.push(u);n.items=l}},p=function(e,n){var d,p,f,h,g=n.options,v={},m=function(t){var e=o&&t.attr(o);return"string"==typeof e&&e.length?JSON.parse(e):null},y=function(e,o){e=t(e);var c=u(e.val());if(c||i.allowEmptyOption)if(v.hasOwnProperty(c)){if(o){var l=v[c][a];l?t.isArray(l)?l.push(o):v[c][a]=[l,o]:v[c][a]=o}}else{var d=m(e)||{};d[r]=d[r]||e.text(),d[s]=d[s]||c,d[a]=d[a]||o,v[c]=d,g.push(d),e.is(":selected")&&n.items.push(c)}};for(n.maxItems=e.attr("multiple")?null:1,h=e.children(),d=0,p=h.length;d<p;d++)f=h[d].tagName.toLowerCase(),"optgroup"===f?function(e){var i,o,r,s,a;for(e=t(e),r=e.attr("label"),r&&(s=m(e)||{},s[c]=r,s[l]=r,n.optgroups.push(s)),a=t("option",e),i=0,o=a.length;i<o;i++)y(a[i],r)}(h[d]):"option"===f&&y(h[d])};return this.each(function(){if(!this.selectize){var o=t(this),r=this.tagName.toLowerCase(),s=o.attr("placeholder")||o.attr("data-placeholder");s||i.allowEmptyOption||(s=o.children('option[value=""]').text());var a={placeholder:s,options:[],optgroups:[],items:[]};"select"===r?p(o,a):d(o,a),new x(o,t.extend(!0,{},n,a,e))}})},t.fn.selectize.defaults=x.defaults,t.fn.selectize.support={validity:c},x.define("drag_drop",function(e){if(!t.fn.sortable)throw new Error('The "drag_drop" plugin requires jQuery UI "sortable".');if("multi"===this.settings.mode){var n=this;n.lock=function(){var t=n.lock;return function(){var e=n.$control.data("sortable");return e&&e.disable(),t.apply(n,arguments)}}(),n.unlock=function(){var t=n.unlock;return function(){var e=n.$control.data("sortable");return e&&e.enable(),t.apply(n,arguments)}}(),n.setup=function(){var e=n.setup;return function(){e.apply(this,arguments);var i=n.$control.sortable({items:"[data-value]",forcePlaceholderSize:!0,disabled:n.isLocked,start:function(t,e){e.placeholder.css("width",e.helper.css("width")),i.css({overflow:"visible"})},stop:function(){i.css({overflow:"hidden"});var e=n.$activeItems?n.$activeItems.slice():null,o=[];i.children("[data-value]").each(function(){o.push(t(this).attr("data-value"))}),n.setValue(o),n.setActiveItem(e)}})}}()}}),x.define("dropdown_header",function(e){var n=this;e=t.extend({title:"Untitled",headerClass:"selectize-dropdown-header",titleRowClass:"selectize-dropdown-header-title",labelClass:"selectize-dropdown-header-label",closeClass:"selectize-dropdown-header-close",html:function(t){return'<div class="'+t.headerClass+'"><div class="'+t.titleRowClass+'"><span class="'+t.labelClass+'">'+t.title+'</span><a href="javascript:void(0)" class="'+t.closeClass+'">&times;</a></div></div>'}},e),n.setup=function(){var i=n.setup;return function(){i.apply(n,arguments),n.$dropdown_header=t(e.html(e)),n.$dropdown.prepend(n.$dropdown_header)}}()}),x.define("optgroup_columns",function(e){var n=this;e=t.extend({equalizeWidth:!0,equalizeHeight:!0},e),this.getAdjacentOption=function(e,n){var i=e.closest("[data-group]").find("[data-selectable]"),o=i.index(e)+n;return o>=0&&o<i.length?i.eq(o):t()},this.onKeyDown=function(){var t=n.onKeyDown;return function(e){var i,o,r,s;return!this.isOpen||37!==e.keyCode&&39!==e.keyCode?t.apply(this,arguments):(n.ignoreHover=!0,s=this.$activeOption.closest("[data-group]"),i=s.find("[data-selectable]").index(this.$activeOption),s=37===e.keyCode?s.prev("[data-group]"):s.next("[data-group]"),r=s.find("[data-selectable]"),o=r.eq(Math.min(r.length-1,i)),void(o.length&&this.setActiveOption(o)))}}();var i=function(){var t,e=i.width,n=document;return void 0===e&&(t=n.createElement("div"),t.innerHTML='<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>',t=t.firstChild,n.body.appendChild(t),e=i.width=t.offsetWidth-t.clientWidth,n.body.removeChild(t)),e},o=function(){var o,r,s,a,c,l,u;if(u=t("[data-group]",n.$dropdown_content),(r=u.length)&&n.$dropdown_content.width()){if(e.equalizeHeight){for(s=0,o=0;o<r;o++)s=Math.max(s,u.eq(o).height());u.css({height:s})}e.equalizeWidth&&(l=n.$dropdown_content.innerWidth()-i(),a=Math.round(l/r),u.css({width:a}),r>1&&(c=l-a*(r-1),u.eq(r-1).css({width:c})))}};(e.equalizeHeight||e.equalizeWidth)&&(p.after(this,"positionDropdown",o),p.after(this,"refreshOptions",o))}),x.define("remove_button",function(e){e=t.extend({label:"&times;",title:"Remove",className:"remove",append:!0},e);if("single"===this.settings.mode)return void function(e,n){n.className="remove-single";var i=e,o='<a href="javascript:void(0)" class="'+n.className+'" tabindex="-1" title="'+d(n.title)+'">'+n.label+"</a>",r=function(t,e){return t+e};e.setup=function(){var s=i.setup;return function(){if(n.append){var a=t(i.$input.context).attr("id"),c=(t("#"+a),i.settings.render.item);i.settings.render.item=function(t){return r(c.apply(e,arguments),o)}}s.apply(e,arguments),e.$control.on("click","."+n.className,function(t){t.preventDefault(),i.isLocked||i.clear()})}}()}(this,e);!function(e,n){var i=e,o='<a href="javascript:void(0)" class="'+n.className+'" tabindex="-1" title="'+d(n.title)+'">'+n.label+"</a>",r=function(t,e){var n=t.search(/(<\/[^>]+>\s*)$/);return t.substring(0,n)+e+t.substring(n)};e.setup=function(){var s=i.setup;return function(){if(n.append){var a=i.settings.render.item;i.settings.render.item=function(t){return r(a.apply(e,arguments),o)}}s.apply(e,arguments),e.$control.on("click","."+n.className,function(e){if(e.preventDefault(),!i.isLocked){var n=t(e.currentTarget).parent();i.setActiveItem(n),i.deleteSelection()&&i.setCaret(i.items.length)}})}}()}(this,e)}),x.define("restore_on_backspace",function(t){var e=this;t.text=t.text||function(t){return t[this.settings.labelField]},this.onKeyDown=function(){var n=e.onKeyDown;return function(e){var i,o;return 8===e.keyCode&&""===this.$control_input.val()&&!this.$activeItems.length&&(i=this.caretPos-1)>=0&&i<this.items.length?(o=this.options[this.items[i]],this.deleteSelection(e)&&(this.setTextboxValue(t.text.apply(this,[o])),this.refreshOptions(!0)),void e.preventDefault()):n.apply(this,arguments)}}()}),x}),function(t,e){function n(e,n){n=n||{};var i=this,o=n.query||"> :even";t.extend(i,{$el:e,options:n,sections:[],isAccordion:n.accordion||!1,db:!!n.persist&&jQueryCollapseStorage(e.get(0).id)}),i.states=i.db?i.db.read():[],i.$el.find(o).each(function(){new jQueryCollapseSection(t(this),i)}),function(e){i.$el.on("click","[data-collapse-summary] "+(e.options.clickQuery||""),t.proxy(i.handleClick,e)),i.$el.bind("toggle close open",t.proxy(i.handleEvent,e))}(i)}function i(e,n){n.options.clickQuery||e.wrapInner('<a href="#"/>'),t.extend(this,{isOpen:!1,$summary:e.attr("data-collapse-summary",""),$details:e.next(),options:n.options,parent:n}),n.sections.push(this);var i=n.states[this._index()];0===i?this.close(!0):this.$summary.is(".open")||1===i?this.open(!0):this.close(!0)}n.prototype={handleClick:function(e,n){e.preventDefault(),n=n||"toggle";for(var i=this.sections,o=i.length;o--;)if(t.contains(i[o].$summary[0],e.target)){i[o][n]();break}},handleEvent:function(t){if(t.target==this.$el.get(0))return this[t.type]();this.handleClick(t,t.type)},open:function(t){this._change("open",t)},close:function(t){this._change("close",t)},toggle:function(t){this._change("toggle",t)},_change:function(e,n){if(isFinite(n))return this.sections[n][e]();t.each(this.sections,function(t,n){n[e]()})}},i.prototype={toggle:function(){this.isOpen?this.close():this.open()},close:function(t){this._changeState("close",t)},open:function(e){var n=this;n.options.accordion&&!e&&t.each(n.parent.sections,function(t,e){e.close()}),n._changeState("open",e)},_index:function(){return t.inArray(this,this.parent.sections)},_changeState:function(e,n){var i=this;i.isOpen="open"==e,t.isFunction(i.options[e])&&!n?i.options[e].apply(i.$details):i.$details[i.isOpen?"show":"hide"](),i.$summary.toggleClass("open","close"!==e),i.$details.attr("aria-hidden","close"===e),i.$summary.attr("aria-expanded","open"===e),i.$summary.trigger("open"===e?"opened":"closed",i),i.parent.db&&i.parent.db.write(i._index(),i.isOpen)}},t.fn.extend({collapse:function(e,i){return(i?t("body").find("[data-collapse]"):t(this)).each(function(){var o=i?{}:e,r=t(this).attr("data-collapse")||"";t.each(r.split(" "),function(t,e){e&&(o[e]=!0)}),new n(t(this),o)})}}),e.jQueryCollapse=n,e.jQueryCollapseSection=i,t(function(){t.fn.collapse(!1,!0)})}(window.jQuery,window),function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.Clipboard=t()}}(function(){var t;return function t(e,n,i){function o(s,a){if(!n[s]){if(!e[s]){var c="function"==typeof require&&require;if(!a&&c)return c(s,!0);if(r)return r(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var u=n[s]={exports:{}};e[s][0].call(u.exports,function(t){var n=e[s][1][t];return o(n||t)},u,u.exports,t,e,n,i)}return n[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)o(i[s]);return o}({1:[function(t,e,n){var i=t("matches-selector");e.exports=function(t,e,n){for(var o=n?t:t.parentNode;o&&o!==document;){if(i(o,e))return o;o=o.parentNode}}},{"matches-selector":5}],2:[function(t,e,n){function i(t,e,n,i,r){var s=o.apply(this,arguments);return t.addEventListener(n,s,r),{destroy:function(){t.removeEventListener(n,s,r)}}}function o(t,e,n,i){return function(n){n.delegateTarget=r(n.target,e,!0),n.delegateTarget&&i.call(t,n)}}var r=t("closest");e.exports=i},{closest:1}],3:[function(t,e,n){n.node=function(t){return void 0!==t&&t instanceof HTMLElement&&1===t.nodeType},n.nodeList=function(t){var e=Object.prototype.toString.call(t);return void 0!==t&&("[object NodeList]"===e||"[object HTMLCollection]"===e)&&"length"in t&&(0===t.length||n.node(t[0]))},n.string=function(t){return"string"==typeof t||t instanceof String},n.fn=function(t){return"[object Function]"===Object.prototype.toString.call(t)}},{}],4:[function(t,e,n){function i(t,e,n){if(!t&&!e&&!n)throw new Error("Missing required arguments");if(!a.string(e))throw new TypeError("Second argument must be a String");if(!a.fn(n))throw new TypeError("Third argument must be a Function");if(a.node(t))return o(t,e,n);if(a.nodeList(t))return r(t,e,n);if(a.string(t))return s(t,e,n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function o(t,e,n){return t.addEventListener(e,n),{destroy:function(){t.removeEventListener(e,n)}}}function r(t,e,n){return Array.prototype.forEach.call(t,function(t){t.addEventListener(e,n)}),{destroy:function(){Array.prototype.forEach.call(t,function(t){t.removeEventListener(e,n)})}}}function s(t,e,n){return c(document.body,t,e,n)}var a=t("./is"),c=t("delegate");e.exports=i},{"./is":3,delegate:2}],5:[function(t,e,n){function i(t,e){if(r)return r.call(t,e);for(var n=t.parentNode.querySelectorAll(e),i=0;i<n.length;++i)if(n[i]==t)return!0;return!1}var o=Element.prototype,r=o.matchesSelector||o.webkitMatchesSelector||o.mozMatchesSelector||o.msMatchesSelector||o.oMatchesSelector;e.exports=i},{}],6:[function(t,e,n){function i(t){var e;if("INPUT"===t.nodeName||"TEXTAREA"===t.nodeName)t.focus(),t.setSelectionRange(0,t.value.length),e=t.value;else{t.hasAttribute("contenteditable")&&t.focus();var n=window.getSelection(),i=document.createRange();i.selectNodeContents(t),n.removeAllRanges(),n.addRange(i),e=n.toString()}return e}e.exports=i},{}],7:[function(t,e,n){function i(){}i.prototype={on:function(t,e,n){var i=this.e||(this.e={});return(i[t]||(i[t]=[])).push({fn:e,ctx:n}),this},once:function(t,e,n){function i(){o.off(t,i),e.apply(n,arguments)}var o=this;return i._=e,this.on(t,i,n)},emit:function(t){var e=[].slice.call(arguments,1),n=((this.e||(this.e={}))[t]||[]).slice(),i=0,o=n.length;for(i;i<o;i++)n[i].fn.apply(n[i].ctx,e);return this},off:function(t,e){var n=this.e||(this.e={}),i=n[t],o=[];if(i&&e)for(var r=0,s=i.length;r<s;r++)i[r].fn!==e&&i[r].fn._!==e&&o.push(i[r]);return o.length?n[t]=o:delete n[t],this}},e.exports=i},{}],8:[function(e,n,i){!function(o,r){if("function"==typeof t&&t.amd)t(["module","select"],r);else if(void 0!==i)r(n,e("select"));else{var s={exports:{}};r(s,o.select),o.clipboardAction=s.exports}}(this,function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var i=function(t){return t&&t.__esModule?t:{default:t}}(e),o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t},r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),s=function(){function t(e){n(this,t),this.resolveOptions(e),this.initSelection()}return t.prototype.resolveOptions=function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.action=t.action,this.emitter=t.emitter,this.target=t.target,this.text=t.text,this.trigger=t.trigger,this.selectedText=""},t.prototype.initSelection=function(){this.text?this.selectFake():this.target&&this.selectTarget()},t.prototype.selectFake=function(){var t=this,e="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return t.removeFake()},this.fakeHandler=document.body.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[e?"right":"left"]="-9999px",this.fakeElem.style.top=(window.pageYOffset||document.documentElement.scrollTop)+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,document.body.appendChild(this.fakeElem),this.selectedText=(0,i.default)(this.fakeElem),this.copyText()},t.prototype.removeFake=function(){this.fakeHandler&&(document.body.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(document.body.removeChild(this.fakeElem),this.fakeElem=null)},t.prototype.selectTarget=function(){this.selectedText=(0,i.default)(this.target),this.copyText()},t.prototype.copyText=function(){var t=void 0;try{t=document.execCommand(this.action)}catch(e){t=!1}this.handleResult(t)},t.prototype.handleResult=function(t){t?this.emitter.emit("success",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)}):this.emitter.emit("error",{action:this.action,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})},t.prototype.clearSelection=function(){this.target&&this.target.blur(),window.getSelection().removeAllRanges()},t.prototype.destroy=function(){this.removeFake()},r(t,[{key:"action",set:function(){var t=arguments.length<=0||void 0===arguments[0]?"copy":arguments[0];if(this._action=t,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(t){if(void 0!==t){if(!t||"object"!==(void 0===t?"undefined":o(t))||1!==t.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&t.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(t.hasAttribute("readonly")||t.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=t}},get:function(){return this._target}}]),t}();t.exports=s})},{select:6}],9:[function(e,n,i){!function(o,r){if("function"==typeof t&&t.amd)t(["module","./clipboard-action","tiny-emitter","good-listener"],r);else if(void 0!==i)r(n,e("./clipboard-action"),e("tiny-emitter"),e("good-listener"));else{var s={exports:{}};r(s,o.clipboardAction,o.tinyEmitter,o.goodListener),o.clipboard=s.exports}}(this,function(t,e,n,i){"use strict";function o(t){return t&&t.__esModule?t:{default:t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function c(t,e){var n="data-clipboard-"+t;if(e.hasAttribute(n))return e.getAttribute(n)}var l=o(e),u=o(n),d=o(i),p=function(t){function e(n,i){r(this,e);var o=s(this,t.call(this));return o.resolveOptions(i),o.listenClick(n),o}return a(e,t),e.prototype.resolveOptions=function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.action="function"==typeof t.action?t.action:this.defaultAction,this.target="function"==typeof t.target?t.target:this.defaultTarget,this.text="function"==typeof t.text?t.text:this.defaultText},e.prototype.listenClick=function(t){var e=this;this.listener=(0,d.default)(t,"click",function(t){return e.onClick(t)})},e.prototype.onClick=function(t){var e=t.delegateTarget||t.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new l.default({action:this.action(e),target:this.target(e),text:this.text(e),trigger:e,emitter:this})},e.prototype.defaultAction=function(t){return c("action",t)},e.prototype.defaultTarget=function(t){var e=c("target",t);if(e)return document.querySelector(e)},e.prototype.defaultText=function(t){return c("text",t)},e.prototype.destroy=function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)},e}(u.default);t.exports=p})},{"./clipboard-action":8,"good-listener":4,"tiny-emitter":7}]},{},[9])(9)}),function(t,e){"use strict";var n=function(){function t(t,e,n,i){return"string"==typeof t&&"function"==typeof e&&(n=parseInt(n||10,10),a("actions",t,e,n,i)),d}function e(){var t=u.call(arguments),e=t.shift();return"string"==typeof e&&l("actions",e,t),d}function n(t,e){return"string"==typeof t&&s("actions",t,e),d}function i(t,e,n,i){return"string"==typeof t&&"function"==typeof e&&(n=parseInt(n||10,10),a("filters",t,e,n,i)),d}function o(){var t=u.call(arguments),e=t.shift();return"string"==typeof e?l("filters",e,t):d}function r(t,e){return"string"==typeof t&&s("filters",t,e),d}function s(t,e,n,i){var o,r,s;if(p[t][e])if(n)if(o=p[t][e],i)for(s=o.length;s--;)r=o[s],r.callback===n&&r.context===i&&o.splice(s,1);else for(s=o.length;s--;)o[s].callback===n&&o.splice(s,1);else p[t][e]=[]}function a(t,e,n,i,o){var r={callback:n,priority:i,context:o},s=p[t][e];s?(s.push(r),s=c(s)):s=[r],p[t][e]=s}function c(t){for(var e,n,i,o=1,r=t.length;o<r;o++){for(e=t[o],n=o;(i=t[n-1])&&i.priority>e.priority;)t[n]=t[n-1],--n;t[n]=e}return t}function l(t,e,n){var i,o,r=p[t][e];if(!r)return"filters"===t&&n[0];if(o=r.length,"filters"===t)for(i=0;i<o;i++)n[0]=r[i].callback.apply(r[i].context,n);else for(i=0;i<o;i++)r[i].callback.apply(r[i].context,n);return"filters"!==t||n[0]}var u=Array.prototype.slice,d={removeFilter:r,applyFilters:o,addFilter:i,removeAction:n,doAction:e,addAction:t},p={actions:{},filters:{}};return d};t.notification=t.notification||{},t.notification.hooks=new n}(window),function(t){t(document).ready(function(){t("#carrier-boxes .postbox .switch-container input").change(function(e){t(this).parents(".switch").first().toggleClass("active"),notification.hooks.doAction("notification.carrier.toggled",t(this))})})}(jQuery),function(t){t(document).ready(function(){t(".notification-color-picker:visible").wpColorPicker()}),notification.hooks.addAction("notification.carrier.repeater.row.added",function(t,e){t.find(".notification-color-picker").wpColorPicker()})}(jQuery),function(t){var e=wp.i18n.__;t(document).ready(function(){var n=t(".notification-image-field");t("body").on("click",".notification-image-field .image .preview, .notification-image-field .select-image",function(n){if(n.preventDefault(),$clicked_image_field=t(this).parents(".notification-image-field"),wp.media.frames.frame)return void wp.media.frames.frame.open();wp.media.frames.frame=wp.media({title:e("Select image","notification"),multiple:!1,library:{type:"image"},button:{text:e("Use selected image","notification")}});var i=function(){var t=wp.media.frames.frame.state().get("selection");t&&t.each(function(t){$clicked_image_field.addClass("selected"),$clicked_image_field.find(".image-input").val(t.id),$clicked_image_field.find(".image .preview").attr("src",t.attributes.sizes.thumbnail.url)})};wp.media.frames.frame.on("select",i),wp.media.frames.frame.open()}),n.find(".image .clear").on("click",function(e){e.preventDefault(),t(this).parents(".notification-image-field").removeClass("selected"),t(this).parents(".notification-image-field").find(".image-input").val(""),t(this).parents(".notification-image-field").find(".image .preview").attr("src","")})})}(jQuery),function(t){t(document).ready(function(){t("body").on("change",".recipients-repeater select.recipient-type",function(){var e=t(this),n=e.parent().parent().next().find(".recipient-value").first(),i=e.val(),o=e.parents(".recipients-repeater").first();notification.hooks.doAction("notification.carrier.recipients.type.changed",i,e,n,o)}),notification.hooks.addAction("notification.carrier.recipients.type.changed",function(e,n,i,o){data={action:"get_recipient_input",type:e,carrier:o.data("carrier"),input_name:i.attr("name")},i.attr("disabled",!0),t.post(notification.ajaxurl,data,function(e){if(1==e.success){var n=t(e.data),o=i.parent();o.html(""),o.append(n),notification.hooks.doAction("notification.carrier.recipients.recipient.replaced",n)}})})})}(jQuery),function(t){var e=wp.i18n.__;t(document).ready(function(){function n(e){var n=e.parents(".fields-repeater").first();e.parents(".row").first().animate({opacity:0},400,"linear",function(){t(this).remove(),i(n),notification.hooks.doAction("notification.repeater.row.removed",n)})}var i=function(e){var n=0;e.find(".row:not(.header):not(.model)").each(function(){t(this).find(".notification-field:not(.selectize-control):not(.selectize-dropdown)").each(function(){var e=t(this),i=e.attr("name");e.attr("name",i.replace(/(.*)\[([0-9]+)\]/,"$1["+n+"]"))}),n++})};t(".fields-repeater .model .subfield").each(function(){t(this).find("input, textarea, select").attr("disabled",!0)}),t(".fields-repeater").on("click",".row:not(.header):not(.model) .trash",function(){var i=t(this);t(window).width()>768?n(i):window.confirm(e("Do you really want to delete this?","notification"))&&n(i)}),t(".add-new-repeater-field").on("click",function(e){e.preventDefault();var n=t(this).prev(".fields-repeater"),o=n.find(".row.model"),r=o.clone().removeClass("model");r.find("input, textarea, select").attr("disabled",!1),r.appendTo(n),i(n),notification.hooks.doAction("notification.repeater.row.added",r,n)}),t(".fields-repeater-sortable > tbody").sortable({handle:".handle",axis:"y",start:function(t,e){e.placeholder.height(e.helper[0].scrollHeight)}})})}(jQuery),function(t){var e=wp.i18n.__;t(document).ready(function(){function e(){var e=[];return t.each(i,function(n,i){$item=t(i),$item.is(":checked")&&e.push($item.val())}),e.join()}var n=t("#export-notifications .button"),i=t('#export-notifications ul li input[type="checkbox"]:not(.select-all)'),o=n.prop("href");t('#export-notifications input[type="checkbox"]').change(function(){t(this).hasClass("select-all")&&(t(this).is(":checked")?i.prop("checked",!0):i.prop("checked",!1)),n.prop("href",o+e())})}),t(document).ready(function(){function n(){a.removeClass("success").removeClass("error").text("")}function i(t,e){n(),a.addClass(t).text(e)}var o=t("#import-notifications .button"),r=t('#import-notifications input[type="file"]'),s=[],a=t("#import-notifications .message");r.on("change",function(o){s=o.target.files,t.each(s,function(t,o){"application/json"!==o.type?(i("error",e("Please upload only valid JSON files","notification")),r.val("")):n()})}),o.on("click",function(n){if("true"===o.data("processing"))return!1;n.preventDefault();var a=new FormData;t.each(s,function(t,e){a.append(t,e)}),a.append("action","notification_import_json"),a.append("type","notifications"),a.append("nonce",o.data("nonce")),i("neutral",e("Importing data...","notification")),o.data("processing","true"),t.ajax({url:notification.ajaxurl,type:"POST",data:a,cache:!1,dataType:"json",processData:!1,contentType:!1,success:function(t){t.success?(i("success",t.data),r.val("")):i("error",t.data),o.data("processing","false")},error:function(t,e,n){i("error",n)}})})})}(jQuery),function(t){t(document).ready(function(){t(".log-container .log-item .log-handle").on("click",function(e){e.preventDefault(),t(this).parent().toggleClass("expanded"),t(this).find(".indicator").toggleClass("dashicons-arrow-down dashicons-arrow-up")})})}(jQuery),function(t){var e=wp.i18n.__;t(document).ready(function(){new Clipboard("code.notification-merge-tag").on("success",function(n){var i=t(n.trigger),o=i.text();notification.hooks.doAction("notification.merge_tag.copied",o,i),i.text(e("Copied","notification")),setTimeout(function(){i.text(o)},800)});var n=t(".notification_merge_tags_accordion").collapse();notification.hooks.addAction("notification.trigger.changed",function(e){var i=e.val();data={action:"get_merge_tags_for_trigger",trigger_slug:i},t.post(ajaxurl,data,function(e){0==e.success?alert(e.data):(t("#notification_merge_tags .inside").html(e.data),
n=t(".notification_merge_tags_accordion").collapse())})}),t("body").on("keyup","#notification-search-merge-tags",function(){var e=t(this).val().toLowerCase();t(this).val().length>0?(n.trigger("open"),t(".notification_merge_tags_accordion h2, .notification_merge_tags_accordion .tags-group").hide(),t(".inside li").each(function(){if(t(this).hide(),-1!==t(this).find(".intro code").text().toLowerCase().indexOf(e)){t(this).show();var n=t(this).parents("ul").data("group");t("[data-group="+n+"]").show()}})):(t(".notification_merge_tags_accordion h2, .inside li").show(),n.trigger("close"))})})}(jQuery),function(t){t(document).ready(function(){t(".notification-pretty-select:visible").selectize(),notification.hooks.addAction("notification.carrier.recipients.recipient.replaced",function(t){t.hasClass("notification-pretty-select")&&t.selectize()}),notification.hooks.addAction("notification.repeater.row.added",function(e,n){e.find("select.notification-pretty-select").each(function(){t(this).selectize()})})})}(jQuery),function(t){var e=wp.i18n.__;t(document).ready(function(){t(".notification-delete-post").click(function(t){confirm(e("Are you sure you want to permanently delete this notification?","notification"))||t.preventDefault()})})}(jQuery),function(t){t(document).ready(function(){t(".underdev-settings .pretty-select").selectize(),new jQueryCollapse(t(".underdev-settings .setting-group"),{open:function(){this.slideDown(100)},close:function(){this.slideUp(100)}}),t(".setting-group-header").click(function(){t(this).parents(".setting-group").find(".form-table").trigger("toggle")})})}(jQuery),function(t){var e=wp.i18n.__;t(document).ready(function(){new Clipboard("#notification-story code").on("success",function(n){var i=t(n.trigger),o=i.find("span").text();i.find("span").text(e("Copied","notification")),setTimeout(function(){i.find("span").text(o)},800)})})}(jQuery),function(t){t(document).ready(function(){t(".column-switch .onoffswitch").on("click",function(e){var n=t(this),i=n.data("postid");e.preventDefault(),notification.hooks.doAction("notification.status.changed",n,i)}),notification.hooks.addAction("notification.status.changed",function(e,n){var i=!e.find("input").attr("checked");e.addClass("loading"),data={action:"change_notification_status",post_id:n,status:i,nonce:e.data("nonce")},t.post(notification.ajaxurl,data,function(t){1==t.success?(e.removeClass("loading"),e.find("input").attr("checked",i)):alert(t.data)})})})}(jQuery),function(t){var e=wp.i18n.__;t(document).ready(function(){t(".group-sync .field-actions .notification-sync-all").on("click",function(e){e.preventDefault();var n=t(this);if(n.attr("disabled"))return!1;n.attr("disabled",!0),t(".group-sync .field-notifications tr").each(function(e,i){var o=t(i).find(".button.notification-sync");o.data("sync-type")===n.data("type")&&notification.hooks.doAction("notification.sync.init",o)})}),t(".group-sync .field-notifications td > .button.notification-sync").on("click",function(e){e.preventDefault(),notification.hooks.doAction("notification.sync.init",t(this))}),notification.hooks.addAction("notification.sync.init",function(n){if(n.attr("disabled"))return!1;var i=n.data("sync-type"),o=n.data("sync-hash"),r=n.data("nonce");n.text();n.attr("disabled",!0),n.text(e("Synchronizing...","notification")),data={action:"notification_sync",hash:o,type:i,nonce:r},t.post(notification.ajaxurl,data,function(o){if(1==o.success){var r=n.parent().parent();if("wordpress"===i){var s=r.find("td.title"),a=t("<a>",{text:s.text(),href:o.data});s.html(a)}r.find("td.status").text(e("Synchronized","notification")),n.remove()}else alert(o.data);n.attr("disabled",!1)})})})}(jQuery),function(t){t(document).ready(function(){t("#notification_trigger_select").selectize({render:{item:function(t,e){return"<div>"+t.text.replace(/\[\[(.*)\]\]/g,"")+"</div>"},option:function(t,e){return"<div>"+t.text.replace(/(.*)\[\[(.*)\]\]/g,'<span class="label">$1</span><span class="caption">$2</span>')+"</div>"}}}),t("#notification_trigger_select").selectize().change(function(){notification.hooks.doAction("notification.trigger.changed",t(this))})})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlbmRvci9zZWxlY3RpemUuanMiLCJ2ZW5kb3IvY29sbGFwc2UuanMiLCJ2ZW5kb3IvY2xpcGJvYXJkLmpzIiwidmVuZG9yL2V2ZW50LW1hbmFnZXIuanMiLCJjYXJyaWVyLmpzIiwiZmllbGRzL2NvbG9yLXBpY2tlci5qcyIsImZpZWxkcy9pbWFnZS5qcyIsImZpZWxkcy9yZWNpcGllbnRzLmpzIiwiZmllbGRzL3JlcGVhdGVyLmpzIiwiaW1wb3J0LWV4cG9ydC5qcyIsImxvZ3MuanMiLCJtZXJnZXRhZy5qcyIsInByZXR0eS1zZWxlY3QuanMiLCJyZW1vdmUtY29uZmlybWF0aW9uLmpzIiwic2V0dGluZ3MuanMiLCJzaGFyZS1zdG9yeS5qcyIsInN3aXRjaC5qcyIsInN5bmMuanMiLCJ0cmlnZ2VyLmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZGVmaW5lIiwiYW1kIiwiZXhwb3J0cyIsIm1vZHVsZSIsIlNpZnRlciIsInRoaXMiLCJpdGVtcyIsInNldHRpbmdzIiwiZGlhY3JpdGljcyIsInByb3RvdHlwZSIsInRva2VuaXplIiwicXVlcnkiLCJ0cmltIiwiU3RyaW5nIiwidG9Mb3dlckNhc2UiLCJsZW5ndGgiLCJpIiwibiIsInJlZ2V4IiwibGV0dGVyIiwidG9rZW5zIiwid29yZHMiLCJzcGxpdCIsImVzY2FwZV9yZWdleCIsIkRJQUNSSVRJQ1MiLCJoYXNPd25Qcm9wZXJ0eSIsInJlcGxhY2UiLCJSZWdFeHAiLCJwdXNoIiwic3RyaW5nIiwiaXRlcmF0b3IiLCJvYmplY3QiLCJjYWxsYmFjayIsImlzX2FycmF5IiwiQXJyYXkiLCJmb3JFYWNoIiwia2V5IiwiYXBwbHkiLCJnZXRTY29yZUZ1bmN0aW9uIiwic2VhcmNoIiwib3B0aW9ucyIsInNlbGYiLCJmaWVsZHMiLCJ0b2tlbl9jb3VudCIsIm5lc3RpbmciLCJwcmVwYXJlU2VhcmNoIiwic2NvcmVWYWx1ZSIsInZhbHVlIiwidG9rZW4iLCJzY29yZSIsInBvcyIsInNjb3JlT2JqZWN0IiwiZmllbGRfY291bnQiLCJkYXRhIiwiZ2V0YXR0ciIsInN1bSIsImNvbmp1bmN0aW9uIiwiZ2V0U29ydEZ1bmN0aW9uIiwiZmllbGQiLCJmaWVsZHNfY291bnQiLCJtdWx0aXBsaWVyIiwibXVsdGlwbGllcnMiLCJnZXRfZmllbGQiLCJpbXBsaWNpdF9zY29yZSIsInNvcnQiLCJzb3J0X2VtcHR5IiwibmFtZSIsInJlc3VsdCIsImlkIiwidW5zaGlmdCIsImRpcmVjdGlvbiIsInNwbGljZSIsImEiLCJiIiwiY21wIiwiZXh0ZW5kIiwib3B0aW9uX2ZpZWxkcyIsIm9wdGlvbl9zb3J0Iiwib3B0aW9uX3NvcnRfZW1wdHkiLCJ0b3RhbCIsImZuX3NvcnQiLCJmbl9zY29yZSIsIml0ZW0iLCJmaWx0ZXIiLCJsaW1pdCIsInNsaWNlIiwiYXNjaWlmb2xkIiwiayIsImFyZ3VtZW50cyIsIm9iaiIsIm5hbWVzIiwic2hpZnQiLCJzdHIiLCJpc0FycmF5IiwiJCIsIk9iamVjdCIsInRvU3RyaW5nIiwiY2FsbCIsImMiLCJkIiwiZSIsImYiLCJnIiwiaCIsImoiLCJsIiwibyIsInAiLCJxIiwiciIsInMiLCJ0IiwidSIsInYiLCJ3IiwieCIsInkiLCJ6IiwiY2h1bmsiLCJmb3JlaWdubGV0dGVycyIsImxvb2t1cCIsInN1YnN0cmluZyIsImNoYXJBdCIsInJlZ2V4cCIsImZvcmVpZ25sZXR0ZXIiLCJNaWNyb1BsdWdpbiIsIm1peGluIiwiSW50ZXJmYWNlIiwicGx1Z2lucyIsImluaXRpYWxpemVQbHVnaW5zIiwicXVldWUiLCJyZXF1ZXN0ZWQiLCJsb2FkZWQiLCJ1dGlscyIsInJlcXVpcmUiLCJsb2FkUGx1Z2luIiwicGx1Z2luIiwiRXJyb3IiLCJmbiIsInZBcmciLCJTZWxlY3RpemUiLCJqUXVlcnkiLCJoaWdobGlnaHQiLCIkZWxlbWVudCIsInBhdHRlcm4iLCJub2RlIiwic2tpcCIsIm5vZGVUeXBlIiwibWF0Y2giLCJzcGFubm9kZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsIm1pZGRsZWJpdCIsInNwbGl0VGV4dCIsIm1pZGRsZWNsb25lIiwiY2xvbmVOb2RlIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVwbGFjZUNoaWxkIiwiY2hpbGROb2RlcyIsInRlc3QiLCJ0YWdOYW1lIiwiZWFjaCIsInJlbW92ZUhpZ2hsaWdodCIsImZpbmQiLCJmaXJzdENoaWxkIiwibm9kZU5hbWUiLCJwYXJlbnQiLCJub3JtYWxpemUiLCJlbmQiLCJNaWNyb0V2ZW50Iiwib24iLCJldmVudCIsImZjdCIsIl9ldmVudHMiLCJvZmYiLCJpbmRleE9mIiwidHJpZ2dlciIsImRlc3RPYmplY3QiLCJwcm9wcyIsIklTX01BQyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIktFWV9DTUQiLCJLRVlfQ1RSTCIsIlNVUFBPUlRTX1ZBTElESVRZX0FQSSIsIndpbmRvdyIsInZhbGlkaXR5IiwiaXNzZXQiLCJoYXNoX2tleSIsImVzY2FwZV9odG1sIiwiaG9vayIsImJlZm9yZSIsIm1ldGhvZCIsIm9yaWdpbmFsIiwiYWZ0ZXIiLCJvbmNlIiwiY2FsbGVkIiwiZGVib3VuY2UiLCJkZWxheSIsInRpbWVvdXQiLCJhcmdzIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImRlYm91bmNlX2V2ZW50cyIsInR5cGVzIiwidHlwZSIsImV2ZW50X2FyZ3MiLCJ3YXRjaENoaWxkRXZlbnQiLCIkcGFyZW50Iiwic2VsZWN0b3IiLCJjaGlsZCIsInRhcmdldCIsImN1cnJlbnRUYXJnZXQiLCJnZXRTZWxlY3Rpb24iLCJpbnB1dCIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJzZWxlY3Rpb24iLCJmb2N1cyIsInNlbCIsImNyZWF0ZVJhbmdlIiwic2VsTGVuIiwidGV4dCIsIm1vdmVTdGFydCIsInRyYW5zZmVyU3R5bGVzIiwiJGZyb20iLCIkdG8iLCJwcm9wZXJ0aWVzIiwic3R5bGVzIiwiY3NzIiwibWVhc3VyZVN0cmluZyIsIiR0ZXN0IiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0Iiwid2lkdGgiLCJwYWRkaW5nIiwid2hpdGVTcGFjZSIsImFwcGVuZFRvIiwicmVtb3ZlIiwiYXV0b0dyb3ciLCIkaW5wdXQiLCJjdXJyZW50V2lkdGgiLCJ1cGRhdGUiLCJrZXlDb2RlIiwicHJpbnRhYmxlIiwicGxhY2Vob2xkZXIiLCJjaGFyYWN0ZXIiLCJtZXRhS2V5IiwiYWx0S2V5IiwiZm9yY2UiLCJ2YWwiLCJzaGlmdEtleSIsImZyb21DaGFyQ29kZSIsInRvVXBwZXJDYXNlIiwiYXR0ciIsInRyaWdnZXJIYW5kbGVyIiwiZG9tVG9TdHJpbmciLCJ0bXAiLCJpbm5lckhUTUwiLCJkaXIiLCJzZWxlY3RpemUiLCJjb21wdXRlZFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJjdXJyZW50U3R5bGUiLCJwYXJlbnRzIiwib3JkZXIiLCJ0YWJJbmRleCIsInRhZ1R5cGUiLCJydGwiLCJldmVudE5TIiwiY291bnQiLCJoaWdobGlnaHRlZFZhbHVlIiwiaXNPcGVuIiwiaXNEaXNhYmxlZCIsImlzUmVxdWlyZWQiLCJpcyIsImlzSW52YWxpZCIsImlzTG9ja2VkIiwiaXNGb2N1c2VkIiwiaXNJbnB1dEhpZGRlbiIsImlzU2V0dXAiLCJpc1NoaWZ0RG93biIsImlzQ21kRG93biIsImlzQ3RybERvd24iLCJpZ25vcmVGb2N1cyIsImlnbm9yZUJsdXIiLCJpZ25vcmVIb3ZlciIsImhhc09wdGlvbnMiLCJjdXJyZW50UmVzdWx0cyIsImxhc3RWYWx1ZSIsImNhcmV0UG9zIiwibG9hZGluZyIsImxvYWRlZFNlYXJjaGVzIiwiJGFjdGl2ZU9wdGlvbiIsIiRhY3RpdmVJdGVtcyIsIm9wdGdyb3VwcyIsInVzZXJPcHRpb25zIiwicmVuZGVyQ2FjaGUiLCJvblNlYXJjaENoYW5nZSIsImxvYWRUaHJvdHRsZSIsInNpZnRlciIsInJlZ2lzdGVyT3B0aW9uIiwicmVnaXN0ZXJPcHRpb25Hcm91cCIsIm1vZGUiLCJtYXhJdGVtcyIsImhpZGVTZWxlY3RlZCIsInNldHVwQ2FsbGJhY2tzIiwic2V0dXBUZW1wbGF0ZXMiLCJzZXR1cCIsIm1lc3NhZ2UiLCJjb25zb2xlIiwiZXJyb3IiLCJjb21wb25lbnQiLCJleHBsYW5hdGlvbiIsImdyb3VwIiwiZ3JvdXBFbmQiLCIkd3JhcHBlciIsIiRjb250cm9sIiwiJGNvbnRyb2xfaW5wdXQiLCIkZHJvcGRvd24iLCIkZHJvcGRvd25fY29udGVudCIsIiRkcm9wZG93bl9wYXJlbnQiLCJpbnB1dE1vZGUiLCJjbGFzc2VzIiwiY2xhc3Nlc19wbHVnaW5zIiwiaW5wdXRJZCIsIiR3aW5kb3ciLCIkZG9jdW1lbnQiLCJhZGRDbGFzcyIsIndyYXBwZXJDbGFzcyIsImlucHV0Q2xhc3MiLCJkcm9wZG93blBhcmVudCIsImRyb3Bkb3duQ2xhc3MiLCJoaWRlIiwiZHJvcGRvd25Db250ZW50Q2xhc3MiLCJjb3B5Q2xhc3Nlc1RvRHJvcGRvd24iLCJzdHlsZSIsImpvaW4iLCJzcGxpdE9uIiwiZGVsaW1pdGVyIiwiZGVsaW1pdGVyRXNjYXBlZCIsIm9uT3B0aW9uSG92ZXIiLCJvbk9wdGlvblNlbGVjdCIsIm9uSXRlbVNlbGVjdCIsIm1vdXNlZG93biIsIm9uTW91c2VEb3duIiwiY2xpY2siLCJvbkNsaWNrIiwic3RvcFByb3BhZ2F0aW9uIiwia2V5ZG93biIsIm9uS2V5RG93biIsImtleXVwIiwib25LZXlVcCIsImtleXByZXNzIiwib25LZXlQcmVzcyIsInJlc2l6ZSIsInBvc2l0aW9uRHJvcGRvd24iLCJibHVyIiwib25CbHVyIiwib25Gb2N1cyIsInBhc3RlIiwib25QYXN0ZSIsImhhcyIsInJldmVydFNldHRpbmdzIiwiJGNoaWxkcmVuIiwiY2hpbGRyZW4iLCJkZXRhY2giLCJ0YWJpbmRleCIsInNldFZhbHVlIiwicHJldmVudERlZmF1bHQiLCJyZWZyZXNoU3RhdGUiLCJ1cGRhdGVPcmlnaW5hbElucHV0IiwicmVmcmVzaEl0ZW1zIiwidXBkYXRlUGxhY2Vob2xkZXIiLCJkaXNhYmxlIiwib25DaGFuZ2UiLCJwcmVsb2FkIiwiZmllbGRfbGFiZWwiLCJsYWJlbEZpZWxkIiwiZmllbGRfb3B0Z3JvdXAiLCJvcHRncm91cExhYmVsRmllbGQiLCJ0ZW1wbGF0ZXMiLCJvcHRncm91cCIsImh0bWwiLCJvcHRncm91cF9oZWFkZXIiLCJlc2NhcGUiLCJvcHRpb24iLCJvcHRpb25fY3JlYXRlIiwicmVuZGVyIiwiY2FsbGJhY2tzIiwiaW5pdGlhbGl6ZSIsImNoYW5nZSIsIml0ZW1fYWRkIiwiaXRlbV9yZW1vdmUiLCJjbGVhciIsIm9wdGlvbl9hZGQiLCJvcHRpb25fcmVtb3ZlIiwib3B0aW9uX2NsZWFyIiwib3B0Z3JvdXBfYWRkIiwib3B0Z3JvdXBfcmVtb3ZlIiwib3B0Z3JvdXBfY2xlYXIiLCJkcm9wZG93bl9vcGVuIiwiZHJvcGRvd25fY2xvc2UiLCJsb2FkIiwiZGVmYXVsdFByZXZlbnRlZCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImNsb3NlIiwib3BlbiIsInNldEFjdGl2ZUl0ZW0iLCJpc0Z1bGwiLCJwYXN0ZWRUZXh0Iiwic3BsaXRJbnB1dCIsImNyZWF0ZUl0ZW0iLCJ3aGljaCIsImNyZWF0ZSIsInNlbGVjdEFsbCIsImN0cmxLZXkiLCIkbmV4dCIsImdldEFkamFjZW50T3B0aW9uIiwic2V0QWN0aXZlT3B0aW9uIiwiJHByZXYiLCJhZHZhbmNlU2VsZWN0aW9uIiwic2VsZWN0T25UYWIiLCJkZWxldGVTZWxlY3Rpb24iLCJyZWZyZXNoT3B0aW9ucyIsIndhc0ZvY3VzZWQiLCJzaG93SW5wdXQiLCJvcGVuT25Gb2N1cyIsImRlc3QiLCJhY3RpdmVFbGVtZW50IiwiZGVhY3RpdmF0ZSIsInNldFRleHRib3hWYWx1ZSIsInNldENhcmV0IiwiY3JlYXRlT25CbHVyIiwiJHRhcmdldCIsImhhc0NsYXNzIiwiY2xvc2VBZnRlclNlbGVjdCIsImxhc3RRdWVyeSIsImFkZEl0ZW0iLCJnZXRPcHRpb24iLCJsb2FkaW5nQ2xhc3MiLCJyZXN1bHRzIiwiTWF0aCIsIm1heCIsImFkZE9wdGlvbiIsInJlbW92ZUNsYXNzIiwiZ2V0VmFsdWUiLCJzaWxlbnQiLCJhZGRJdGVtcyIsIiRpdGVtIiwiZXZlbnROYW1lIiwiaWR4IiwiYmVnaW4iLCJzd2FwIiwiJGxhc3QiLCJoaWRlSW5wdXQiLCIkb3B0aW9uIiwic2Nyb2xsIiwiYW5pbWF0ZSIsImhlaWdodF9tZW51IiwiaGVpZ2h0X2l0ZW0iLCJzY3JvbGxfdG9wIiwic2Nyb2xsX2JvdHRvbSIsImhlaWdodCIsIm91dGVySGVpZ2h0Iiwic2Nyb2xsVG9wIiwib2Zmc2V0Iiwic3RvcCIsInNjcm9sbER1cmF0aW9uIiwib3BhY2l0eSIsImdldFNlYXJjaE9wdGlvbnMiLCJzb3J0RmllbGQiLCJzZWFyY2hGaWVsZCIsInNlYXJjaENvbmp1bmN0aW9uIiwiY2FsY3VsYXRlU2NvcmUiLCJ0cmlnZ2VyRHJvcGRvd24iLCJncm91cHMiLCJncm91cHNfb3JkZXIiLCJvcHRpb25faHRtbCIsImh0bWxfY2hpbGRyZW4iLCJoYXNfY3JlYXRlX29wdGlvbiIsIiRhY3RpdmUiLCIkYWN0aXZlX2JlZm9yZSIsIiRjcmVhdGUiLCJhY3RpdmVfYmVmb3JlIiwibWF4T3B0aW9ucyIsIm1pbiIsIm9wdGdyb3VwRmllbGQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwibG9ja09wdGdyb3VwT3JkZXIiLCIkb3JkZXIiLCJkb20iLCJjYW5DcmVhdGUiLCJwcmVwZW5kIiwiYWRkUHJlY2VkZW5jZSIsInZhbHVlRmllbGQiLCJvcHRncm91cFZhbHVlRmllbGQiLCJhZGRPcHRpb25Hcm91cCIsInJlbW92ZU9wdGlvbkdyb3VwIiwiY2xlYXJPcHRpb25Hcm91cHMiLCJ1cGRhdGVPcHRpb24iLCIkaXRlbV9uZXciLCJ2YWx1ZV9uZXciLCJpbmRleF9pdGVtIiwiY2FjaGVfaXRlbXMiLCJjYWNoZV9vcHRpb25zIiwib3JkZXJfb2xkIiwiZ2V0SXRlbSIsInJlcGxhY2VXaXRoIiwicmVtb3ZlT3B0aW9uIiwicmVtb3ZlSXRlbSIsImNsZWFyT3B0aW9ucyIsImdldEVsZW1lbnRXaXRoVmFsdWUiLCIkb3B0aW9ucyIsImluZGV4IiwiZXEiLCIkZWxzIiwiZ2V0QXR0cmlidXRlIiwidmFsdWVzIiwiaXNQZW5kaW5nIiwidmFsdWVfbmV4dCIsIndhc0Z1bGwiLCJpbnNlcnRBdENhcmV0IiwicGVyc2lzdCIsImNhcmV0IiwibG9jayIsInVubG9jayIsIm91dHB1dCIsInJlZnJlc2hWYWxpZGl0eVN0YXRlIiwicmVmcmVzaENsYXNzZXMiLCJpbnZhbGlkIiwicHJvcCIsInRvZ2dsZUNsYXNzIiwiaXNFbXB0eU9iamVjdCIsIm9wdHMiLCJsYWJlbCIsInJlbW92ZUF0dHIiLCJ2aXNpYmlsaXR5IiwiZGlzcGxheSIsIm91dGVyV2lkdGgiLCIkZWwiLCJvcHRpb25fc2VsZWN0IiwiJG9wdGlvbl9zZWxlY3QiLCIkdGFpbCIsIm9uRGVsZXRlIiwicG9wIiwidGFpbCIsInZhbHVlTGVuZ3RoIiwiYWR2YW5jZUNhcmV0IiwiJGFkaiIsIiRjaGlsZCIsImFwcGVuZCIsImVuYWJsZSIsImRlc3Ryb3kiLCJzaG93IiwicmVtb3ZlRGF0YSIsImJvZHkiLCJ0ZW1wbGF0ZU5hbWUiLCJjYWNoZSIsImNsZWFyQ2FjaGUiLCJjcmVhdGVGaWx0ZXIiLCJkZWZhdWx0cyIsImFsbG93RW1wdHlPcHRpb24iLCJkYXRhQXR0ciIsInNldHRpbmdzX3VzZXIiLCJhdHRyX2RhdGEiLCJmaWVsZF92YWx1ZSIsImZpZWxkX29wdGdyb3VwX2xhYmVsIiwiZmllbGRfb3B0Z3JvdXBfdmFsdWUiLCJpbml0X3RleHRib3giLCJzZXR0aW5nc19lbGVtZW50IiwiZGF0YV9yYXciLCJKU09OIiwicGFyc2UiLCJpbml0X3NlbGVjdCIsIm9wdGlvbnNNYXAiLCJyZWFkRGF0YSIsImFyciIsIiRvcHRncm91cCIsInRhZ19uYW1lIiwic3VwcG9ydCIsInNvcnRhYmxlIiwiZm9yY2VQbGFjZWhvbGRlclNpemUiLCJkaXNhYmxlZCIsInVpIiwiaGVscGVyIiwib3ZlcmZsb3ciLCJhY3RpdmUiLCJ0aXRsZSIsImhlYWRlckNsYXNzIiwidGl0bGVSb3dDbGFzcyIsImxhYmVsQ2xhc3MiLCJjbG9zZUNsYXNzIiwiJGRyb3Bkb3duX2hlYWRlciIsImVxdWFsaXplV2lkdGgiLCJlcXVhbGl6ZUhlaWdodCIsImNsb3Nlc3QiLCJwcmV2IiwibmV4dCIsImdldFNjcm9sbGJhcldpZHRoIiwiZGl2IiwiZG9jIiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsInJlbW92ZUNoaWxkIiwiZXF1YWxpemVTaXplcyIsImhlaWdodF9tYXgiLCJ3aWR0aF9sYXN0Iiwid2lkdGhfcGFyZW50IiwiJG9wdGdyb3VwcyIsImlubmVyV2lkdGgiLCJyb3VuZCIsInRoaXNSZWYiLCJodG1sX2NvbnRhaW5lciIsImh0bWxfZWxlbWVudCIsImNvbnRleHQiLCJyZW5kZXJfaXRlbSIsIkNvbGxhcHNlIiwiZWwiLCJfdGhpcyIsInNlY3Rpb25zIiwiaXNBY2NvcmRpb24iLCJhY2NvcmRpb24iLCJkYiIsImpRdWVyeUNvbGxhcHNlU3RvcmFnZSIsImdldCIsInN0YXRlcyIsInJlYWQiLCJqUXVlcnlDb2xsYXBzZVNlY3Rpb24iLCJzY29wZSIsImNsaWNrUXVlcnkiLCJwcm94eSIsImhhbmRsZUNsaWNrIiwiYmluZCIsImhhbmRsZUV2ZW50IiwiU2VjdGlvbiIsIndyYXBJbm5lciIsIiRzdW1tYXJ5IiwiJGRldGFpbHMiLCJzdGF0ZSIsIl9pbmRleCIsImNvbnRhaW5zIiwiX2NoYW5nZSIsInRvZ2dsZSIsImFjdGlvbiIsImlzRmluaXRlIiwic2VjdGlvbiIsImJ5cGFzcyIsIl9jaGFuZ2VTdGF0ZSIsImluQXJyYXkiLCJpc0Z1bmN0aW9uIiwid3JpdGUiLCJjb2xsYXBzZSIsInNjYW4iLCJqUXVlcnlDb2xsYXBzZSIsImdsb2JhbCIsIkNsaXBib2FyZCIsImNvZGUiLCIxIiwibWF0Y2hlcyIsImVsZW1lbnQiLCJjaGVja1lvU2VsZiIsIm1hdGNoZXMtc2VsZWN0b3IiLCIyIiwiZGVsZWdhdGUiLCJ1c2VDYXB0dXJlIiwibGlzdGVuZXJGbiIsImxpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZWxlZ2F0ZVRhcmdldCIsIjMiLCJ1bmRlZmluZWQiLCJIVE1MRWxlbWVudCIsIm5vZGVMaXN0IiwiNCIsImxpc3RlbiIsIlR5cGVFcnJvciIsImxpc3Rlbk5vZGUiLCJsaXN0ZW5Ob2RlTGlzdCIsImxpc3RlblNlbGVjdG9yIiwiLi9pcyIsIjUiLCJ2ZW5kb3IiLCJub2RlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwcm90byIsIkVsZW1lbnQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCI2Iiwic2VsZWN0Iiwic2VsZWN0ZWRUZXh0Iiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJoYXNBdHRyaWJ1dGUiLCJyYW5nZSIsInNlbGVjdE5vZGVDb250ZW50cyIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiNyIsIkUiLCJjdHgiLCJfIiwiZW1pdCIsImV2dEFyciIsImxlbiIsImV2dHMiLCJsaXZlRXZlbnRzIiwiOCIsIm1vZCIsImNsaXBib2FyZEFjdGlvbiIsIl9zZWxlY3QiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX3NlbGVjdDIiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl90eXBlb2YiLCJTeW1ib2wiLCJjb25zdHJ1Y3RvciIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJDbGlwYm9hcmRBY3Rpb24iLCJyZXNvbHZlT3B0aW9ucyIsImluaXRTZWxlY3Rpb24iLCJlbWl0dGVyIiwic2VsZWN0RmFrZSIsInNlbGVjdFRhcmdldCIsImlzUlRMIiwiZG9jdW1lbnRFbGVtZW50IiwicmVtb3ZlRmFrZSIsImZha2VIYW5kbGVyQ2FsbGJhY2siLCJmYWtlSGFuZGxlciIsImZha2VFbGVtIiwiZm9udFNpemUiLCJib3JkZXIiLCJtYXJnaW4iLCJwYWdlWU9mZnNldCIsInNldEF0dHJpYnV0ZSIsImNvcHlUZXh0Iiwic3VjY2VlZGVkIiwiZXhlY0NvbW1hbmQiLCJlcnIiLCJoYW5kbGVSZXN1bHQiLCJjbGVhclNlbGVjdGlvbiIsInNldCIsIl9hY3Rpb24iLCJfdGFyZ2V0IiwiOSIsInRpbnlFbWl0dGVyIiwiZ29vZExpc3RlbmVyIiwiY2xpcGJvYXJkIiwiX2NsaXBib2FyZEFjdGlvbiIsIl90aW55RW1pdHRlciIsIl9nb29kTGlzdGVuZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiZ2V0QXR0cmlidXRlVmFsdWUiLCJzdWZmaXgiLCJhdHRyaWJ1dGUiLCJfY2xpcGJvYXJkQWN0aW9uMiIsIl90aW55RW1pdHRlcjIiLCJfZ29vZExpc3RlbmVyMiIsIl9FbWl0dGVyIiwibGlzdGVuQ2xpY2siLCJkZWZhdWx0QWN0aW9uIiwiZGVmYXVsdFRhcmdldCIsImRlZmF1bHRUZXh0IiwiX3RoaXMyIiwicXVlcnlTZWxlY3RvciIsIi4vY2xpcGJvYXJkLWFjdGlvbiIsImdvb2QtbGlzdGVuZXIiLCJ0aW55LWVtaXR0ZXIiLCJFdmVudE1hbmFnZXIiLCJhZGRBY3Rpb24iLCJwcmlvcml0eSIsInBhcnNlSW50IiwiX2FkZEhvb2siLCJNZXRob2RzQXZhaWxhYmxlIiwiZG9BY3Rpb24iLCJfcnVuSG9vayIsInJlbW92ZUFjdGlvbiIsIl9yZW1vdmVIb29rIiwiYWRkRmlsdGVyIiwiYXBwbHlGaWx0ZXJzIiwicmVtb3ZlRmlsdGVyIiwiaGFuZGxlcnMiLCJoYW5kbGVyIiwiU1RPUkFHRSIsImhvb2tPYmplY3QiLCJob29rcyIsIl9ob29rSW5zZXJ0U29ydCIsInRtcEhvb2siLCJwcmV2SG9vayIsImFjdGlvbnMiLCJmaWx0ZXJzIiwibm90aWZpY2F0aW9uIiwicmVhZHkiLCJmaXJzdCIsIndwQ29sb3JQaWNrZXIiLCIkY2xvbmVkIiwiJHJlcGVhdGVyIiwiX18iLCJ3cCIsImkxOG4iLCIkaW1hZ2VfZmllbGQiLCIkY2xpY2tlZF9pbWFnZV9maWVsZCIsIm1lZGlhIiwiZnJhbWVzIiwiZnJhbWUiLCJtdWx0aXBsZSIsImxpYnJhcnkiLCJidXR0b24iLCJtZWRpYV9zZXRfaW1hZ2UiLCJhdHRhY2htZW50IiwiYXR0cmlidXRlcyIsInNpemVzIiwidGh1bWJuYWlsIiwidXJsIiwiJHNlbGVjdCIsIiRyZWNpcGllbnQiLCIkdGFibGUiLCJjYXJyaWVyIiwiaW5wdXRfbmFtZSIsInBvc3QiLCJhamF4dXJsIiwicmVzcG9uc2UiLCJzdWNjZXNzIiwiJHJlcGxhY2VtZW50IiwiJHJlY2lwaWVudF9jb250YWluZXIiLCJyZW1vdmVfcm93IiwiJHJlbW92ZV9idXR0b24iLCJyZWNhbGN1bGF0ZV9yb3dzIiwicGFydF9uYW1lIiwiY29uZmlybSIsIiRtb2RlbCIsImNsb25lIiwiaGFuZGxlIiwiYXhpcyIsInNjcm9sbEhlaWdodCIsImdldF9zZWxlY3RlZF9pdGVtcyIsIiRpdGVtcyIsIiRidXR0b24iLCJsaW5rIiwiY2xlYXJfbWVzc2FnZSIsIiRtZXNzYWdlIiwiYWRkX21lc3NhZ2UiLCIkZmlsZSIsImZpbGVzIiwiRm9ybURhdGEiLCJhamF4IiwiZGF0YVR5cGUiLCJwcm9jZXNzRGF0YSIsImNvbnRlbnRUeXBlIiwianFYSFIiLCJ0ZXh0X3N0YXR1cyIsImVycm9yX3Rocm93biIsIiRjb2RlIiwidGFnIiwiJHRyaWdnZXIiLCJ0cmlnZ2VyX3NsdWciLCJhbGVydCIsInBhcmVudENsYXNzIiwiJHJvdyIsInNsaWRlRG93biIsInNsaWRlVXAiLCJjb3B5X3RleHQiLCIkc3dpdGNoIiwicG9zdF9pZCIsInN0YXR1cyIsIm5vbmNlIiwiJG1hc3Rlcl9idXR0b24iLCJudW0iLCJub3RpZmljYXRpb25fcm93Iiwic3luY190eXBlIiwiaGFzaCIsIiRub3RpZmljYXRpb25fcm93IiwiJHRpdGxlX3RkIiwiJGxpbmsiLCJocmVmIl0sIm1hcHBpbmdzIjoiQ0FnQkEsU0FBQUEsRUFBQUMsR0FDQSxrQkFBQUMsU0FBQUEsT0FBQUMsSUFDQUQsT0FBQSxTQUFBRCxHQUNBLGdCQUFBRyxTQUNBQyxPQUFBRCxRQUFBSCxJQUVBRCxFQUFBTSxPQUFBTCxLQUVBTSxLQUFBLFdBV0EsR0FBQUQsR0FBQSxTQUFBRSxFQUFBQyxHQUNBRixLQUFBQyxNQUFBQSxFQUNBRCxLQUFBRSxTQUFBQSxJQUFBQyxZQUFBLEdBVUFKLEdBQUFLLFVBQUFDLFNBQUEsU0FBQUMsR0FFQSxLQURBQSxFQUFBQyxFQUFBQyxPQUFBRixHQUFBLElBQUFHLGtCQUNBSCxFQUFBSSxPQUFBLFFBRUEsSUFBQUMsR0FBQUMsRUFBQUMsRUFBQUMsRUFDQUMsS0FDQUMsRUFBQVYsRUFBQVcsTUFBQSxLQUVBLEtBQUFOLEVBQUEsRUFBQUMsRUFBQUksRUFBQU4sT0FBQUMsRUFBQUMsRUFBQUQsSUFBQSxDQUVBLEdBREFFLEVBQUFLLEVBQUFGLEVBQUFMLElBQ0FYLEtBQUFFLFNBQUFDLFdBQ0EsSUFBQVcsSUFBQUssR0FDQUEsRUFBQUMsZUFBQU4sS0FDQUQsRUFBQUEsRUFBQVEsUUFBQSxHQUFBQyxRQUFBUixFQUFBLEtBQUFLLEVBQUFMLElBSUFDLEdBQUFRLE1BQ0FDLE9BQUFSLEVBQUFMLEdBQ0FFLE1BQUEsR0FBQVMsUUFBQVQsRUFBQSxPQUlBLE1BQUFFLElBY0FoQixFQUFBSyxVQUFBcUIsU0FBQSxTQUFBQyxFQUFBQyxHQUNBLEdBQUFGLEVBRUFBLEdBREFHLEVBQUFGLEdBQ0FHLE1BQUF6QixVQUFBMEIsU0FBQSxTQUFBSCxHQUNBLElBQUEsR0FBQWhCLEdBQUEsRUFBQUMsRUFBQVosS0FBQVUsT0FBQUMsRUFBQUMsRUFBQUQsSUFDQWdCLEVBQUEzQixLQUFBVyxHQUFBQSxFQUFBWCxPQUlB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S0FBQXZNLFFBQUEsb0JBQUEsZ0VBQ0EsYUFLQW9FLEVBQUEsZ0NBQUEwSyxZQUFBb0ksT0FBQSxXQUNBc2EsYUFBQU4sTUFBQVgsU0FBQSwrQkFBQW5zQixFQUFBekYsWUFLQXdJIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBzaWZ0ZXIuanNcbiAqIENvcHlyaWdodCAoYykgMjAxMyBCcmlhbiBSZWF2aXMgJiBjb250cmlidXRvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xuICogZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GXG4gKiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQGF1dGhvciBCcmlhbiBSZWF2aXMgPGJyaWFuQHRoaXJkcm91dGUuY29tPlxuICovXG5cbihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoJ3NpZnRlcicsIGZhY3RvcnkpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9IGVsc2Uge1xuXHRcdHJvb3QuU2lmdGVyID0gZmFjdG9yeSgpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uKCkge1xuXG5cdC8qKlxuXHQgKiBUZXh0dWFsbHkgc2VhcmNoZXMgYXJyYXlzIGFuZCBoYXNoZXMgb2Ygb2JqZWN0c1xuXHQgKiBieSBwcm9wZXJ0eSAob3IgbXVsdGlwbGUgcHJvcGVydGllcykuIERlc2lnbmVkXG5cdCAqIHNwZWNpZmljYWxseSBmb3IgYXV0b2NvbXBsZXRlLlxuXHQgKlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQHBhcmFtIHthcnJheXxvYmplY3R9IGl0ZW1zXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBpdGVtc1xuXHQgKi9cblx0dmFyIFNpZnRlciA9IGZ1bmN0aW9uKGl0ZW1zLCBzZXR0aW5ncykge1xuXHRcdHRoaXMuaXRlbXMgPSBpdGVtcztcblx0XHR0aGlzLnNldHRpbmdzID0gc2V0dGluZ3MgfHwge2RpYWNyaXRpY3M6IHRydWV9O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTcGxpdHMgYSBzZWFyY2ggc3RyaW5nIGludG8gYW4gYXJyYXkgb2YgaW5kaXZpZHVhbFxuXHQgKiByZWdleHBzIHRvIGJlIHVzZWQgdG8gbWF0Y2ggcmVzdWx0cy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5XG5cdCAqIEByZXR1cm5zIHthcnJheX1cblx0ICovXG5cdFNpZnRlci5wcm90b3R5cGUudG9rZW5pemUgPSBmdW5jdGlvbihxdWVyeSkge1xuXHRcdHF1ZXJ5ID0gdHJpbShTdHJpbmcocXVlcnkgfHwgJycpLnRvTG93ZXJDYXNlKCkpO1xuXHRcdGlmICghcXVlcnkgfHwgIXF1ZXJ5Lmxlbmd0aCkgcmV0dXJuIFtdO1xuXG5cdFx0dmFyIGksIG4sIHJlZ2V4LCBsZXR0ZXI7XG5cdFx0dmFyIHRva2VucyA9IFtdO1xuXHRcdHZhciB3b3JkcyA9IHF1ZXJ5LnNwbGl0KC8gKy8pO1xuXG5cdFx0Zm9yIChpID0gMCwgbiA9IHdvcmRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0cmVnZXggPSBlc2NhcGVfcmVnZXgod29yZHNbaV0pO1xuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuZGlhY3JpdGljcykge1xuXHRcdFx0XHRmb3IgKGxldHRlciBpbiBESUFDUklUSUNTKSB7XG5cdFx0XHRcdFx0aWYgKERJQUNSSVRJQ1MuaGFzT3duUHJvcGVydHkobGV0dGVyKSkge1xuXHRcdFx0XHRcdFx0cmVnZXggPSByZWdleC5yZXBsYWNlKG5ldyBSZWdFeHAobGV0dGVyLCAnZycpLCBESUFDUklUSUNTW2xldHRlcl0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRzdHJpbmcgOiB3b3Jkc1tpXSxcblx0XHRcdFx0cmVnZXggIDogbmV3IFJlZ0V4cChyZWdleCwgJ2knKVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRva2Vucztcblx0fTtcblxuXHQvKipcblx0ICogSXRlcmF0ZXMgb3ZlciBhcnJheXMgYW5kIGhhc2hlcy5cblx0ICpcblx0ICogYGBgXG5cdCAqIHRoaXMuaXRlcmF0b3IodGhpcy5pdGVtcywgZnVuY3Rpb24oaXRlbSwgaWQpIHtcblx0ICogICAgLy8gaW52b2tlZCBmb3IgZWFjaCBpdGVtXG5cdCAqIH0pO1xuXHQgKiBgYGBcblx0ICpcblx0ICogQHBhcmFtIHthcnJheXxvYmplY3R9IG9iamVjdFxuXHQgKi9cblx0U2lmdGVyLnByb3RvdHlwZS5pdGVyYXRvciA9IGZ1bmN0aW9uKG9iamVjdCwgY2FsbGJhY2spIHtcblx0XHR2YXIgaXRlcmF0b3I7XG5cdFx0aWYgKGlzX2FycmF5KG9iamVjdCkpIHtcblx0XHRcdGl0ZXJhdG9yID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2ggfHwgZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIG4gPSB0aGlzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHRcdGNhbGxiYWNrKHRoaXNbaV0sIGksIHRoaXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpdGVyYXRvciA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiB0aGlzKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sodGhpc1trZXldLCBrZXksIHRoaXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRpdGVyYXRvci5hcHBseShvYmplY3QsIFtjYWxsYmFja10pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gYmUgdXNlZCB0byBzY29yZSBpbmRpdmlkdWFsIHJlc3VsdHMuXG5cdCAqXG5cdCAqIEdvb2QgbWF0Y2hlcyB3aWxsIGhhdmUgYSBoaWdoZXIgc2NvcmUgdGhhbiBwb29yIG1hdGNoZXMuXG5cdCAqIElmIGFuIGl0ZW0gaXMgbm90IGEgbWF0Y2gsIDAgd2lsbCBiZSByZXR1cm5lZCBieSB0aGUgZnVuY3Rpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fHN0cmluZ30gc2VhcmNoXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIChvcHRpb25hbClcblx0ICogQHJldHVybnMge2Z1bmN0aW9ufVxuXHQgKi9cblx0U2lmdGVyLnByb3RvdHlwZS5nZXRTY29yZUZ1bmN0aW9uID0gZnVuY3Rpb24oc2VhcmNoLCBvcHRpb25zKSB7XG5cdFx0dmFyIHNlbGYsIGZpZWxkcywgdG9rZW5zLCB0b2tlbl9jb3VudCwgbmVzdGluZztcblxuXHRcdHNlbGYgICAgICAgID0gdGhpcztcblx0XHRzZWFyY2ggICAgICA9IHNlbGYucHJlcGFyZVNlYXJjaChzZWFyY2gsIG9wdGlvbnMpO1xuXHRcdHRva2VucyAgICAgID0gc2VhcmNoLnRva2Vucztcblx0XHRmaWVsZHMgICAgICA9IHNlYXJjaC5vcHRpb25zLmZpZWxkcztcblx0XHR0b2tlbl9jb3VudCA9IHRva2Vucy5sZW5ndGg7XG5cdFx0bmVzdGluZyAgICAgPSBzZWFyY2gub3B0aW9ucy5uZXN0aW5nO1xuXG5cdFx0LyoqXG5cdFx0ICogQ2FsY3VsYXRlcyBob3cgY2xvc2Ugb2YgYSBtYXRjaCB0aGVcblx0XHQgKiBnaXZlbiB2YWx1ZSBpcyBhZ2FpbnN0IGEgc2VhcmNoIHRva2VuLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHttaXhlZH0gdmFsdWVcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gdG9rZW5cblx0XHQgKiBAcmV0dXJuIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dmFyIHNjb3JlVmFsdWUgPSBmdW5jdGlvbih2YWx1ZSwgdG9rZW4pIHtcblx0XHRcdHZhciBzY29yZSwgcG9zO1xuXG5cdFx0XHRpZiAoIXZhbHVlKSByZXR1cm4gMDtcblx0XHRcdHZhbHVlID0gU3RyaW5nKHZhbHVlIHx8ICcnKTtcblx0XHRcdHBvcyA9IHZhbHVlLnNlYXJjaCh0b2tlbi5yZWdleCk7XG5cdFx0XHRpZiAocG9zID09PSAtMSkgcmV0dXJuIDA7XG5cdFx0XHRzY29yZSA9IHRva2VuLnN0cmluZy5sZW5ndGggLyB2YWx1ZS5sZW5ndGg7XG5cdFx0XHRpZiAocG9zID09PSAwKSBzY29yZSArPSAwLjU7XG5cdFx0XHRyZXR1cm4gc2NvcmU7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIENhbGN1bGF0ZXMgdGhlIHNjb3JlIG9mIGFuIG9iamVjdFxuXHRcdCAqIGFnYWluc3QgdGhlIHNlYXJjaCBxdWVyeS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSB0b2tlblxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXG5cdFx0ICogQHJldHVybiB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHZhciBzY29yZU9iamVjdCA9IChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBmaWVsZF9jb3VudCA9IGZpZWxkcy5sZW5ndGg7XG5cdFx0XHRpZiAoIWZpZWxkX2NvdW50KSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cdFx0XHR9XG5cdFx0XHRpZiAoZmllbGRfY291bnQgPT09IDEpIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKHRva2VuLCBkYXRhKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHNjb3JlVmFsdWUoZ2V0YXR0cihkYXRhLCBmaWVsZHNbMF0sIG5lc3RpbmcpLCB0b2tlbik7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24odG9rZW4sIGRhdGEpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIHN1bSA9IDA7IGkgPCBmaWVsZF9jb3VudDsgaSsrKSB7XG5cdFx0XHRcdFx0c3VtICs9IHNjb3JlVmFsdWUoZ2V0YXR0cihkYXRhLCBmaWVsZHNbaV0sIG5lc3RpbmcpLCB0b2tlbik7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHN1bSAvIGZpZWxkX2NvdW50O1xuXHRcdFx0fTtcblx0XHR9KSgpO1xuXG5cdFx0aWYgKCF0b2tlbl9jb3VudCkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblx0XHR9XG5cdFx0aWYgKHRva2VuX2NvdW50ID09PSAxKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0XHRyZXR1cm4gc2NvcmVPYmplY3QodG9rZW5zWzBdLCBkYXRhKTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0aWYgKHNlYXJjaC5vcHRpb25zLmNvbmp1bmN0aW9uID09PSAnYW5kJykge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdFx0dmFyIHNjb3JlO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgc3VtID0gMDsgaSA8IHRva2VuX2NvdW50OyBpKyspIHtcblx0XHRcdFx0XHRzY29yZSA9IHNjb3JlT2JqZWN0KHRva2Vuc1tpXSwgZGF0YSk7XG5cdFx0XHRcdFx0aWYgKHNjb3JlIDw9IDApIHJldHVybiAwO1xuXHRcdFx0XHRcdHN1bSArPSBzY29yZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc3VtIC8gdG9rZW5fY291bnQ7XG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgc3VtID0gMDsgaSA8IHRva2VuX2NvdW50OyBpKyspIHtcblx0XHRcdFx0XHRzdW0gKz0gc2NvcmVPYmplY3QodG9rZW5zW2ldLCBkYXRhKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc3VtIC8gdG9rZW5fY291bnQ7XG5cdFx0XHR9O1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gY29tcGFyZSB0d29cblx0ICogcmVzdWx0cywgZm9yIHNvcnRpbmcgcHVycG9zZXMuIElmIG5vIHNvcnRpbmcgc2hvdWxkXG5cdCAqIGJlIHBlcmZvcm1lZCwgYG51bGxgIHdpbGwgYmUgcmV0dXJuZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gc2VhcmNoXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG5cdCAqIEByZXR1cm4gZnVuY3Rpb24oYSxiKVxuXHQgKi9cblx0U2lmdGVyLnByb3RvdHlwZS5nZXRTb3J0RnVuY3Rpb24gPSBmdW5jdGlvbihzZWFyY2gsIG9wdGlvbnMpIHtcblx0XHR2YXIgaSwgbiwgc2VsZiwgZmllbGQsIGZpZWxkcywgZmllbGRzX2NvdW50LCBtdWx0aXBsaWVyLCBtdWx0aXBsaWVycywgZ2V0X2ZpZWxkLCBpbXBsaWNpdF9zY29yZSwgc29ydDtcblxuXHRcdHNlbGYgICA9IHRoaXM7XG5cdFx0c2VhcmNoID0gc2VsZi5wcmVwYXJlU2VhcmNoKHNlYXJjaCwgb3B0aW9ucyk7XG5cdFx0c29ydCAgID0gKCFzZWFyY2gucXVlcnkgJiYgb3B0aW9ucy5zb3J0X2VtcHR5KSB8fCBvcHRpb25zLnNvcnQ7XG5cblx0XHQvKipcblx0XHQgKiBGZXRjaGVzIHRoZSBzcGVjaWZpZWQgc29ydCBmaWVsZCB2YWx1ZVxuXHRcdCAqIGZyb20gYSBzZWFyY2ggcmVzdWx0IGl0ZW0uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gIHtzdHJpbmd9IG5hbWVcblx0XHQgKiBAcGFyYW0gIHtvYmplY3R9IHJlc3VsdFxuXHRcdCAqIEByZXR1cm4ge21peGVkfVxuXHRcdCAqL1xuXHRcdGdldF9maWVsZCA9IGZ1bmN0aW9uKG5hbWUsIHJlc3VsdCkge1xuXHRcdFx0aWYgKG5hbWUgPT09ICckc2NvcmUnKSByZXR1cm4gcmVzdWx0LnNjb3JlO1xuXHRcdFx0cmV0dXJuIGdldGF0dHIoc2VsZi5pdGVtc1tyZXN1bHQuaWRdLCBuYW1lLCBvcHRpb25zLm5lc3RpbmcpO1xuXHRcdH07XG5cblx0XHQvLyBwYXJzZSBvcHRpb25zXG5cdFx0ZmllbGRzID0gW107XG5cdFx0aWYgKHNvcnQpIHtcblx0XHRcdGZvciAoaSA9IDAsIG4gPSBzb3J0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHRpZiAoc2VhcmNoLnF1ZXJ5IHx8IHNvcnRbaV0uZmllbGQgIT09ICckc2NvcmUnKSB7XG5cdFx0XHRcdFx0ZmllbGRzLnB1c2goc29ydFtpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyB0aGUgXCIkc2NvcmVcIiBmaWVsZCBpcyBpbXBsaWVkIHRvIGJlIHRoZSBwcmltYXJ5XG5cdFx0Ly8gc29ydCBmaWVsZCwgdW5sZXNzIGl0J3MgbWFudWFsbHkgc3BlY2lmaWVkXG5cdFx0aWYgKHNlYXJjaC5xdWVyeSkge1xuXHRcdFx0aW1wbGljaXRfc2NvcmUgPSB0cnVlO1xuXHRcdFx0Zm9yIChpID0gMCwgbiA9IGZpZWxkcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0aWYgKGZpZWxkc1tpXS5maWVsZCA9PT0gJyRzY29yZScpIHtcblx0XHRcdFx0XHRpbXBsaWNpdF9zY29yZSA9IGZhbHNlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoaW1wbGljaXRfc2NvcmUpIHtcblx0XHRcdFx0ZmllbGRzLnVuc2hpZnQoe2ZpZWxkOiAnJHNjb3JlJywgZGlyZWN0aW9uOiAnZGVzYyd9KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yIChpID0gMCwgbiA9IGZpZWxkcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0aWYgKGZpZWxkc1tpXS5maWVsZCA9PT0gJyRzY29yZScpIHtcblx0XHRcdFx0XHRmaWVsZHMuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bXVsdGlwbGllcnMgPSBbXTtcblx0XHRmb3IgKGkgPSAwLCBuID0gZmllbGRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0bXVsdGlwbGllcnMucHVzaChmaWVsZHNbaV0uZGlyZWN0aW9uID09PSAnZGVzYycgPyAtMSA6IDEpO1xuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGZ1bmN0aW9uXG5cdFx0ZmllbGRzX2NvdW50ID0gZmllbGRzLmxlbmd0aDtcblx0XHRpZiAoIWZpZWxkc19jb3VudCkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSBlbHNlIGlmIChmaWVsZHNfY291bnQgPT09IDEpIHtcblx0XHRcdGZpZWxkID0gZmllbGRzWzBdLmZpZWxkO1xuXHRcdFx0bXVsdGlwbGllciA9IG11bHRpcGxpZXJzWzBdO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdFx0cmV0dXJuIG11bHRpcGxpZXIgKiBjbXAoXG5cdFx0XHRcdFx0Z2V0X2ZpZWxkKGZpZWxkLCBhKSxcblx0XHRcdFx0XHRnZXRfZmllbGQoZmllbGQsIGIpXG5cdFx0XHRcdCk7XG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0XHR2YXIgaSwgcmVzdWx0LCBhX3ZhbHVlLCBiX3ZhbHVlLCBmaWVsZDtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGZpZWxkc19jb3VudDsgaSsrKSB7XG5cdFx0XHRcdFx0ZmllbGQgPSBmaWVsZHNbaV0uZmllbGQ7XG5cdFx0XHRcdFx0cmVzdWx0ID0gbXVsdGlwbGllcnNbaV0gKiBjbXAoXG5cdFx0XHRcdFx0XHRnZXRfZmllbGQoZmllbGQsIGEpLFxuXHRcdFx0XHRcdFx0Z2V0X2ZpZWxkKGZpZWxkLCBiKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0aWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdH07XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBQYXJzZXMgYSBzZWFyY2ggcXVlcnkgYW5kIHJldHVybnMgYW4gb2JqZWN0XG5cdCAqIHdpdGggdG9rZW5zIGFuZCBmaWVsZHMgcmVhZHkgdG8gYmUgcG9wdWxhdGVkXG5cdCAqIHdpdGggcmVzdWx0cy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5XG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9XG5cdCAqL1xuXHRTaWZ0ZXIucHJvdG90eXBlLnByZXBhcmVTZWFyY2ggPSBmdW5jdGlvbihxdWVyeSwgb3B0aW9ucykge1xuXHRcdGlmICh0eXBlb2YgcXVlcnkgPT09ICdvYmplY3QnKSByZXR1cm4gcXVlcnk7XG5cblx0XHRvcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcblxuXHRcdHZhciBvcHRpb25fZmllbGRzICAgICA9IG9wdGlvbnMuZmllbGRzO1xuXHRcdHZhciBvcHRpb25fc29ydCAgICAgICA9IG9wdGlvbnMuc29ydDtcblx0XHR2YXIgb3B0aW9uX3NvcnRfZW1wdHkgPSBvcHRpb25zLnNvcnRfZW1wdHk7XG5cblx0XHRpZiAob3B0aW9uX2ZpZWxkcyAmJiAhaXNfYXJyYXkob3B0aW9uX2ZpZWxkcykpIG9wdGlvbnMuZmllbGRzID0gW29wdGlvbl9maWVsZHNdO1xuXHRcdGlmIChvcHRpb25fc29ydCAmJiAhaXNfYXJyYXkob3B0aW9uX3NvcnQpKSBvcHRpb25zLnNvcnQgPSBbb3B0aW9uX3NvcnRdO1xuXHRcdGlmIChvcHRpb25fc29ydF9lbXB0eSAmJiAhaXNfYXJyYXkob3B0aW9uX3NvcnRfZW1wdHkpKSBvcHRpb25zLnNvcnRfZW1wdHkgPSBbb3B0aW9uX3NvcnRfZW1wdHldO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdG9wdGlvbnMgOiBvcHRpb25zLFxuXHRcdFx0cXVlcnkgICA6IFN0cmluZyhxdWVyeSB8fCAnJykudG9Mb3dlckNhc2UoKSxcblx0XHRcdHRva2VucyAgOiB0aGlzLnRva2VuaXplKHF1ZXJ5KSxcblx0XHRcdHRvdGFsICAgOiAwLFxuXHRcdFx0aXRlbXMgICA6IFtdXG5cdFx0fTtcblx0fTtcblxuXHQvKipcblx0ICogU2VhcmNoZXMgdGhyb3VnaCBhbGwgaXRlbXMgYW5kIHJldHVybnMgYSBzb3J0ZWQgYXJyYXkgb2YgbWF0Y2hlcy5cblx0ICpcblx0ICogVGhlIGBvcHRpb25zYCBwYXJhbWV0ZXIgY2FuIGNvbnRhaW46XG5cdCAqXG5cdCAqICAgLSBmaWVsZHMge3N0cmluZ3xhcnJheX1cblx0ICogICAtIHNvcnQge2FycmF5fVxuXHQgKiAgIC0gc2NvcmUge2Z1bmN0aW9ufVxuXHQgKiAgIC0gZmlsdGVyIHtib29sfVxuXHQgKiAgIC0gbGltaXQge2ludGVnZXJ9XG5cdCAqXG5cdCAqIFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmc6XG5cdCAqXG5cdCAqICAgLSBvcHRpb25zIHtvYmplY3R9XG5cdCAqICAgLSBxdWVyeSB7c3RyaW5nfVxuXHQgKiAgIC0gdG9rZW5zIHthcnJheX1cblx0ICogICAtIHRvdGFsIHtpbnR9XG5cdCAqICAgLSBpdGVtcyB7YXJyYXl9XG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeVxuXHQgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuXHQgKiBAcmV0dXJucyB7b2JqZWN0fVxuXHQgKi9cblx0U2lmdGVyLnByb3RvdHlwZS5zZWFyY2ggPSBmdW5jdGlvbihxdWVyeSwgb3B0aW9ucykge1xuXHRcdHZhciBzZWxmID0gdGhpcywgdmFsdWUsIHNjb3JlLCBzZWFyY2gsIGNhbGN1bGF0ZVNjb3JlO1xuXHRcdHZhciBmbl9zb3J0O1xuXHRcdHZhciBmbl9zY29yZTtcblxuXHRcdHNlYXJjaCAgPSB0aGlzLnByZXBhcmVTZWFyY2gocXVlcnksIG9wdGlvbnMpO1xuXHRcdG9wdGlvbnMgPSBzZWFyY2gub3B0aW9ucztcblx0XHRxdWVyeSAgID0gc2VhcmNoLnF1ZXJ5O1xuXG5cdFx0Ly8gZ2VuZXJhdGUgcmVzdWx0IHNjb3JpbmcgZnVuY3Rpb25cblx0XHRmbl9zY29yZSA9IG9wdGlvbnMuc2NvcmUgfHwgc2VsZi5nZXRTY29yZUZ1bmN0aW9uKHNlYXJjaCk7XG5cblx0XHQvLyBwZXJmb3JtIHNlYXJjaCBhbmQgc29ydFxuXHRcdGlmIChxdWVyeS5sZW5ndGgpIHtcblx0XHRcdHNlbGYuaXRlcmF0b3Ioc2VsZi5pdGVtcywgZnVuY3Rpb24oaXRlbSwgaWQpIHtcblx0XHRcdFx0c2NvcmUgPSBmbl9zY29yZShpdGVtKTtcblx0XHRcdFx0aWYgKG9wdGlvbnMuZmlsdGVyID09PSBmYWxzZSB8fCBzY29yZSA+IDApIHtcblx0XHRcdFx0XHRzZWFyY2guaXRlbXMucHVzaCh7J3Njb3JlJzogc2NvcmUsICdpZCc6IGlkfSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzZWxmLml0ZXJhdG9yKHNlbGYuaXRlbXMsIGZ1bmN0aW9uKGl0ZW0sIGlkKSB7XG5cdFx0XHRcdHNlYXJjaC5pdGVtcy5wdXNoKHsnc2NvcmUnOiAxLCAnaWQnOiBpZH0pO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Zm5fc29ydCA9IHNlbGYuZ2V0U29ydEZ1bmN0aW9uKHNlYXJjaCwgb3B0aW9ucyk7XG5cdFx0aWYgKGZuX3NvcnQpIHNlYXJjaC5pdGVtcy5zb3J0KGZuX3NvcnQpO1xuXG5cdFx0Ly8gYXBwbHkgbGltaXRzXG5cdFx0c2VhcmNoLnRvdGFsID0gc2VhcmNoLml0ZW1zLmxlbmd0aDtcblx0XHRpZiAodHlwZW9mIG9wdGlvbnMubGltaXQgPT09ICdudW1iZXInKSB7XG5cdFx0XHRzZWFyY2guaXRlbXMgPSBzZWFyY2guaXRlbXMuc2xpY2UoMCwgb3B0aW9ucy5saW1pdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNlYXJjaDtcblx0fTtcblxuXHQvLyB1dGlsaXRpZXNcblx0Ly8gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLVxuXG5cdHZhciBjbXAgPSBmdW5jdGlvbihhLCBiKSB7XG5cdFx0aWYgKHR5cGVvZiBhID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgYiA9PT0gJ251bWJlcicpIHtcblx0XHRcdHJldHVybiBhID4gYiA/IDEgOiAoYSA8IGIgPyAtMSA6IDApO1xuXHRcdH1cblx0XHRhID0gYXNjaWlmb2xkKFN0cmluZyhhIHx8ICcnKSk7XG5cdFx0YiA9IGFzY2lpZm9sZChTdHJpbmcoYiB8fCAnJykpO1xuXHRcdGlmIChhID4gYikgcmV0dXJuIDE7XG5cdFx0aWYgKGIgPiBhKSByZXR1cm4gLTE7XG5cdFx0cmV0dXJuIDA7XG5cdH07XG5cblx0dmFyIGV4dGVuZCA9IGZ1bmN0aW9uKGEsIGIpIHtcblx0XHR2YXIgaSwgbiwgaywgb2JqZWN0O1xuXHRcdGZvciAoaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRvYmplY3QgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIW9iamVjdCkgY29udGludWU7XG5cdFx0XHRmb3IgKGsgaW4gb2JqZWN0KSB7XG5cdFx0XHRcdGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoaykpIHtcblx0XHRcdFx0XHRhW2tdID0gb2JqZWN0W2tdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBhO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBBIHByb3BlcnR5IGdldHRlciByZXNvbHZpbmcgZG90LW5vdGF0aW9uXG5cdCAqIEBwYXJhbSAge09iamVjdH0gIG9iaiAgICAgVGhlIHJvb3Qgb2JqZWN0IHRvIGZldGNoIHByb3BlcnR5IG9uXG5cdCAqIEBwYXJhbSAge1N0cmluZ30gIG5hbWUgICAgVGhlIG9wdGlvbmFsbHkgZG90dGVkIHByb3BlcnR5IG5hbWUgdG8gZmV0Y2hcblx0ICogQHBhcmFtICB7Qm9vbGVhbn0gbmVzdGluZyBIYW5kbGUgbmVzdGluZyBvciBub3Rcblx0ICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICBUaGUgcmVzb2x2ZWQgcHJvcGVydHkgdmFsdWVcblx0ICovXG5cdHZhciBnZXRhdHRyID0gZnVuY3Rpb24ob2JqLCBuYW1lLCBuZXN0aW5nKSB7XG5cdCAgICBpZiAoIW9iaiB8fCAhbmFtZSkgcmV0dXJuO1xuXHQgICAgaWYgKCFuZXN0aW5nKSByZXR1cm4gb2JqW25hbWVdO1xuXHQgICAgdmFyIG5hbWVzID0gbmFtZS5zcGxpdChcIi5cIik7XG5cdCAgICB3aGlsZShuYW1lcy5sZW5ndGggJiYgKG9iaiA9IG9ialtuYW1lcy5zaGlmdCgpXSkpO1xuXHQgICAgcmV0dXJuIG9iajtcblx0fTtcblxuXHR2YXIgdHJpbSA9IGZ1bmN0aW9uKHN0cikge1xuXHRcdHJldHVybiAoc3RyICsgJycpLnJlcGxhY2UoL15cXHMrfFxccyskfC9nLCAnJyk7XG5cdH07XG5cblx0dmFyIGVzY2FwZV9yZWdleCA9IGZ1bmN0aW9uKHN0cikge1xuXHRcdHJldHVybiAoc3RyICsgJycpLnJlcGxhY2UoLyhbLj8qK14kW1xcXVxcXFwoKXt9fC1dKS9nLCAnXFxcXCQxJyk7XG5cdH07XG5cblx0dmFyIGlzX2FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCAodHlwZW9mICQgIT09ICd1bmRlZmluZWQnICYmICQuaXNBcnJheSkgfHwgZnVuY3Rpb24ob2JqZWN0KSB7XG5cdFx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBBcnJheV0nO1xuXHR9O1xuXG5cdHZhciBESUFDUklUSUNTID0ge1xuXHRcdCdhJzogJ1th4biA4biBxILEg8OCw6LHjceOyLrisaXIpsin4bqg4bqhw4TDpMOAw6DDgcOhxIDEgcODw6PDhcOlxIXEhMODxIXEhF0nLFxuXHRcdCdiJzogJ1ti4pCizrLOkkLguL/wkIyB4ZuSXScsXG5cdFx0J2MnOiAnW2PEhsSHxIjEicSMxI3EisSLQ8yEY8yEw4fDp+G4iOG4ici7yLzGh8aIyZXhtITvvKPvvYNdJyxcblx0XHQnZCc6ICdbZMSOxI/huIrhuIvhuJDhuJHhuIzhuI3huJLhuJPhuI7huI/EkMSRRMymZMymxonJlsaKyZfGi8aM4bWt4baB4baRyKHhtIXvvKTvvYTDsF0nLFxuXHRcdCdlJzogJ1tlw4nDqcOIw6jDisOq4biY4biZxJrEm8SUxJXhurzhur3huJrhuJvhurrhurvElsSXw4vDq8SSxJPIqMipxJjEmeG2ksmGyYfIhMiF4bq+4bq/4buA4buB4buE4buF4buC4buD4bic4bid4biW4biX4biU4biVyIbIh+G6uOG6ueG7huG7h+KxuOG0h++8pe+9hcmYx53Gj8aQzrVdJyxcblx0XHQnZic6ICdbZsaRxpLhuJ7huJ9dJyxcblx0XHQnZyc6ICdbZ8mi4oKyx6THpcScxJ3EnsSfxKLEo8aTyaDEoMShXScsXG5cdFx0J2gnOiAnW2jEpMSlxKbEp+G4qOG4qeG6luG6luG4pOG4peG4ouG4o8mmyrDHtsaVXScsXG5cdFx0J2knOiAnW2nDjcOtw4zDrMSsxK3DjsOux4/HkMOPw6/huK7huK/EqMSpxK7Er8SqxKvhu4jhu4nIiMiJyIrIi+G7iuG7i+G4rOG4rcaXyajJqMyG4bW74baWxLBpScSxyarvvKnvvYldJyxcblx0XHQnaic6ICdbasi3xLTEtcmIyYnKncmfyrJdJyxcblx0XHQnayc6ICdba8aYxpnqnYDqnYHhuLDhuLHHqMep4biy4biz4bi04bi1zrrPsOKCrV0nLFxuXHRcdCdsJzogJ1tsxYHFgsS9xL7Eu8S8xLnEuuG4tuG4t+G4uOG4ueG4vOG4veG4uuG4u8S/xYDIvcaa4rGg4rGh4rGiyavJrOG2hcmtyLTKn++8rO+9jF0nLFxuXHRcdCduJzogJ1tuxYPFhMe4x7nFh8WIw5HDseG5hOG5hcWFxYbhuYbhuYfhuYrhuYvhuYjhuYlOzIhuzIjGncmyyKDGnuG1sOG2h8mzyLXJtO+8ru+9jsWKxYtdJyxcblx0XHQnbyc6ICdbb8OYw7jDlsO2w5PDs8OSw7LDlMO0x5HHksWQxZHFjsWPyK7Ir+G7jOG7jcafybXGoMah4buO4buPxYzFjcOVw7XHqseryIzIjdWV1oVdJyxcblx0XHQncCc6ICdbcOG5lOG5leG5luG5l+Kxo+G1vcakxqXhtbFdJyxcblx0XHQncSc6ICdbceqdluqdl8qgyYrJi+qdmOqdmXHMg10nLFxuXHRcdCdyJzogJ1tyxZTFlcmMyY3FmMWZxZbFl+G5mOG5mciQyJHIksiT4bma4bmb4rGkyb1dJyxcblx0XHQncyc6ICdbc8WaxZvhuaDhuaHhuaLhuaPqnqjqnqnFnMWdxaDFocWexZ/ImMiZU8yIc8yIXScsXG5cdFx0J3QnOiAnW3TFpMWl4bmq4bmrxaLFo+G5rOG5rcauyojImsib4bmw4bmx4bmu4bmvxqzGrV0nLFxuXHRcdCd1JzogJ1t1xazFrcmEyonhu6Thu6XDnMO8w5rDusOZw7nDm8O7x5PHlMWwxbHFrMWtxq/GsOG7puG7p8WqxavFqMWpxbLFs8iUyJXiiKpdJyxcblx0XHQndic6ICdbduG5vOG5veG5vuG5v8ayyovqnZ7qnZ/isbHKi10nLFxuXHRcdCd3JzogJ1t34bqC4bqD4bqA4bqBxbTFteG6hOG6heG6huG6h+G6iOG6iV0nLFxuXHRcdCd4JzogJ1t44bqM4bqN4bqK4bqLz4ddJyxcblx0XHQneSc6ICdbecOdw73hu7Lhu7PFtsW3xbjDv+G7uOG7ueG6juG6j+G7tOG7tcmOyY/Gs8a0XScsXG5cdFx0J3onOiAnW3rFucW64bqQ4bqRxb3FvsW7xbzhupLhupPhupThupXGtca2XSdcblx0fTtcblxuXHR2YXIgYXNjaWlmb2xkID0gKGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpLCBuLCBrLCBjaHVuaztcblx0XHR2YXIgZm9yZWlnbmxldHRlcnMgPSAnJztcblx0XHR2YXIgbG9va3VwID0ge307XG5cdFx0Zm9yIChrIGluIERJQUNSSVRJQ1MpIHtcblx0XHRcdGlmIChESUFDUklUSUNTLmhhc093blByb3BlcnR5KGspKSB7XG5cdFx0XHRcdGNodW5rID0gRElBQ1JJVElDU1trXS5zdWJzdHJpbmcoMiwgRElBQ1JJVElDU1trXS5sZW5ndGggLSAxKTtcblx0XHRcdFx0Zm9yZWlnbmxldHRlcnMgKz0gY2h1bms7XG5cdFx0XHRcdGZvciAoaSA9IDAsIG4gPSBjaHVuay5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0XHRsb29rdXBbY2h1bmsuY2hhckF0KGkpXSA9IGs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJ1snICsgIGZvcmVpZ25sZXR0ZXJzICsgJ10nLCAnZycpO1xuXHRcdHJldHVybiBmdW5jdGlvbihzdHIpIHtcblx0XHRcdHJldHVybiBzdHIucmVwbGFjZShyZWdleHAsIGZ1bmN0aW9uKGZvcmVpZ25sZXR0ZXIpIHtcblx0XHRcdFx0cmV0dXJuIGxvb2t1cFtmb3JlaWdubGV0dGVyXTtcblx0XHRcdH0pLnRvTG93ZXJDYXNlKCk7XG5cdFx0fTtcblx0fSkoKTtcblxuXG5cdC8vIGV4cG9ydFxuXHQvLyAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtXG5cblx0cmV0dXJuIFNpZnRlcjtcbn0pKTtcblxuXG5cbi8qKlxuICogbWljcm9wbHVnaW4uanNcbiAqIENvcHlyaWdodCAoYykgMjAxMyBCcmlhbiBSZWF2aXMgJiBjb250cmlidXRvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xuICogZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GXG4gKiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQGF1dGhvciBCcmlhbiBSZWF2aXMgPGJyaWFuQHRoaXJkcm91dGUuY29tPlxuICovXG5cbihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoJ21pY3JvcGx1Z2luJywgZmFjdG9yeSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdH0gZWxzZSB7XG5cdFx0cm9vdC5NaWNyb1BsdWdpbiA9IGZhY3RvcnkoKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbigpIHtcblx0dmFyIE1pY3JvUGx1Z2luID0ge307XG5cblx0TWljcm9QbHVnaW4ubWl4aW4gPSBmdW5jdGlvbihJbnRlcmZhY2UpIHtcblx0XHRJbnRlcmZhY2UucGx1Z2lucyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogSW5pdGlhbGl6ZXMgdGhlIGxpc3RlZCBwbHVnaW5zICh3aXRoIG9wdGlvbnMpLlxuXHRcdCAqIEFjY2VwdGFibGUgZm9ybWF0czpcblx0XHQgKlxuXHRcdCAqIExpc3QgKHdpdGhvdXQgb3B0aW9ucyk6XG5cdFx0ICogICBbJ2EnLCAnYicsICdjJ11cblx0XHQgKlxuXHRcdCAqIExpc3QgKHdpdGggb3B0aW9ucyk6XG5cdFx0ICogICBbeyduYW1lJzogJ2EnLCBvcHRpb25zOiB7fX0sIHsnbmFtZSc6ICdiJywgb3B0aW9uczoge319XVxuXHRcdCAqXG5cdFx0ICogSGFzaCAod2l0aCBvcHRpb25zKTpcblx0XHQgKiAgIHsnYSc6IHsgLi4uIH0sICdiJzogeyAuLi4gfSwgJ2MnOiB7IC4uLiB9fVxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHttaXhlZH0gcGx1Z2luc1xuXHRcdCAqL1xuXHRcdEludGVyZmFjZS5wcm90b3R5cGUuaW5pdGlhbGl6ZVBsdWdpbnMgPSBmdW5jdGlvbihwbHVnaW5zKSB7XG5cdFx0XHR2YXIgaSwgbiwga2V5O1xuXHRcdFx0dmFyIHNlbGYgID0gdGhpcztcblx0XHRcdHZhciBxdWV1ZSA9IFtdO1xuXG5cdFx0XHRzZWxmLnBsdWdpbnMgPSB7XG5cdFx0XHRcdG5hbWVzICAgICA6IFtdLFxuXHRcdFx0XHRzZXR0aW5ncyAgOiB7fSxcblx0XHRcdFx0cmVxdWVzdGVkIDoge30sXG5cdFx0XHRcdGxvYWRlZCAgICA6IHt9XG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAodXRpbHMuaXNBcnJheShwbHVnaW5zKSkge1xuXHRcdFx0XHRmb3IgKGkgPSAwLCBuID0gcGx1Z2lucy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIHBsdWdpbnNbaV0gPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKHBsdWdpbnNbaV0pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLnBsdWdpbnMuc2V0dGluZ3NbcGx1Z2luc1tpXS5uYW1lXSA9IHBsdWdpbnNbaV0ub3B0aW9ucztcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2gocGx1Z2luc1tpXS5uYW1lKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAocGx1Z2lucykge1xuXHRcdFx0XHRmb3IgKGtleSBpbiBwbHVnaW5zKSB7XG5cdFx0XHRcdFx0aWYgKHBsdWdpbnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0XHRcdFx0c2VsZi5wbHVnaW5zLnNldHRpbmdzW2tleV0gPSBwbHVnaW5zW2tleV07XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcblx0XHRcdFx0c2VsZi5yZXF1aXJlKHF1ZXVlLnNoaWZ0KCkpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRJbnRlcmZhY2UucHJvdG90eXBlLmxvYWRQbHVnaW4gPSBmdW5jdGlvbihuYW1lKSB7XG5cdFx0XHR2YXIgc2VsZiAgICA9IHRoaXM7XG5cdFx0XHR2YXIgcGx1Z2lucyA9IHNlbGYucGx1Z2lucztcblx0XHRcdHZhciBwbHVnaW4gID0gSW50ZXJmYWNlLnBsdWdpbnNbbmFtZV07XG5cblx0XHRcdGlmICghSW50ZXJmYWNlLnBsdWdpbnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCBcIicgKyAgbmFtZSArICdcIiBwbHVnaW4nKTtcblx0XHRcdH1cblxuXHRcdFx0cGx1Z2lucy5yZXF1ZXN0ZWRbbmFtZV0gPSB0cnVlO1xuXHRcdFx0cGx1Z2lucy5sb2FkZWRbbmFtZV0gPSBwbHVnaW4uZm4uYXBwbHkoc2VsZiwgW3NlbGYucGx1Z2lucy5zZXR0aW5nc1tuYW1lXSB8fCB7fV0pO1xuXHRcdFx0cGx1Z2lucy5uYW1lcy5wdXNoKG5hbWUpO1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXplcyBhIHBsdWdpbi5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG5cdFx0ICovXG5cdFx0SW50ZXJmYWNlLnByb3RvdHlwZS5yZXF1aXJlID0gZnVuY3Rpb24obmFtZSkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0dmFyIHBsdWdpbnMgPSBzZWxmLnBsdWdpbnM7XG5cblx0XHRcdGlmICghc2VsZi5wbHVnaW5zLmxvYWRlZC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuXHRcdFx0XHRpZiAocGx1Z2lucy5yZXF1ZXN0ZWRbbmFtZV0pIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1BsdWdpbiBoYXMgY2lyY3VsYXIgZGVwZW5kZW5jeSAoXCInICsgbmFtZSArICdcIiknKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLmxvYWRQbHVnaW4obmFtZSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBwbHVnaW5zLmxvYWRlZFtuYW1lXTtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmVnaXN0ZXJzIGEgcGx1Z2luLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuXHRcdCAqL1xuXHRcdEludGVyZmFjZS5kZWZpbmUgPSBmdW5jdGlvbihuYW1lLCBmbikge1xuXHRcdFx0SW50ZXJmYWNlLnBsdWdpbnNbbmFtZV0gPSB7XG5cdFx0XHRcdCduYW1lJyA6IG5hbWUsXG5cdFx0XHRcdCdmbicgICA6IGZuXG5cdFx0XHR9O1xuXHRcdH07XG5cdH07XG5cblx0dmFyIHV0aWxzID0ge1xuXHRcdGlzQXJyYXk6IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24odkFyZykge1xuXHRcdFx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2QXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIE1pY3JvUGx1Z2luO1xufSkpO1xuXG4vKipcbiAqIHNlbGVjdGl6ZS5qcyAodjAuMTIuNClcbiAqIENvcHlyaWdodCAoYykgMjAxM+KAkzIwMTUgQnJpYW4gUmVhdmlzICYgY29udHJpYnV0b3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXNcbiAqIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRlxuICogQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEBhdXRob3IgQnJpYW4gUmVhdmlzIDxicmlhbkB0aGlyZHJvdXRlLmNvbT5cbiAqL1xuXG4vKmpzaGludCBjdXJseTpmYWxzZSAqL1xuLypqc2hpbnQgYnJvd3Nlcjp0cnVlICovXG5cbihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoJ3NlbGVjdGl6ZScsIFsnanF1ZXJ5Jywnc2lmdGVyJywnbWljcm9wbHVnaW4nXSwgZmFjdG9yeSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpLCByZXF1aXJlKCdzaWZ0ZXInKSwgcmVxdWlyZSgnbWljcm9wbHVnaW4nKSk7XG5cdH0gZWxzZSB7XG5cdFx0cm9vdC5TZWxlY3RpemUgPSBmYWN0b3J5KHJvb3QualF1ZXJ5LCByb290LlNpZnRlciwgcm9vdC5NaWNyb1BsdWdpbik7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24oJCwgU2lmdGVyLCBNaWNyb1BsdWdpbikge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhpZ2hsaWdodCA9IGZ1bmN0aW9uKCRlbGVtZW50LCBwYXR0ZXJuKSB7XG5cdFx0aWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJyAmJiAhcGF0dGVybi5sZW5ndGgpIHJldHVybjtcblx0XHR2YXIgcmVnZXggPSAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSA/IG5ldyBSZWdFeHAocGF0dGVybiwgJ2knKSA6IHBhdHRlcm47XG5cblx0XHR2YXIgaGlnaGxpZ2h0ID0gZnVuY3Rpb24obm9kZSkge1xuXHRcdFx0dmFyIHNraXAgPSAwO1xuXHRcdFx0aWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcblx0XHRcdFx0dmFyIHBvcyA9IG5vZGUuZGF0YS5zZWFyY2gocmVnZXgpO1xuXHRcdFx0XHRpZiAocG9zID49IDAgJiYgbm9kZS5kYXRhLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2ggPSBub2RlLmRhdGEubWF0Y2gocmVnZXgpO1xuXHRcdFx0XHRcdHZhciBzcGFubm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblx0XHRcdFx0XHRzcGFubm9kZS5jbGFzc05hbWUgPSAnaGlnaGxpZ2h0Jztcblx0XHRcdFx0XHR2YXIgbWlkZGxlYml0ID0gbm9kZS5zcGxpdFRleHQocG9zKTtcblx0XHRcdFx0XHR2YXIgZW5kYml0ID0gbWlkZGxlYml0LnNwbGl0VGV4dChtYXRjaFswXS5sZW5ndGgpO1xuXHRcdFx0XHRcdHZhciBtaWRkbGVjbG9uZSA9IG1pZGRsZWJpdC5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0XHRcdFx0c3Bhbm5vZGUuYXBwZW5kQ2hpbGQobWlkZGxlY2xvbmUpO1xuXHRcdFx0XHRcdG1pZGRsZWJpdC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChzcGFubm9kZSwgbWlkZGxlYml0KTtcblx0XHRcdFx0XHRza2lwID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSAxICYmIG5vZGUuY2hpbGROb2RlcyAmJiAhLyhzY3JpcHR8c3R5bGUpL2kudGVzdChub2RlLnRhZ05hbWUpKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdFx0aSArPSBoaWdobGlnaHQobm9kZS5jaGlsZE5vZGVzW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHNraXA7XG5cdFx0fTtcblxuXHRcdHJldHVybiAkZWxlbWVudC5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aGlnaGxpZ2h0KHRoaXMpO1xuXHRcdH0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiByZW1vdmVIaWdobGlnaHQgZm4gY29waWVkIGZyb20gaGlnaGxpZ2h0IHY1IGFuZFxuXHQgKiBlZGl0ZWQgdG8gcmVtb3ZlIHdpdGgoKSBhbmQgcGFzcyBqcyBzdHJpY3QgbW9kZVxuXHQgKi9cblx0JC5mbi5yZW1vdmVIaWdobGlnaHQgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5maW5kKFwic3Bhbi5oaWdobGlnaHRcIikuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkLm5vZGVOYW1lO1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQodGhpcy5maXJzdENoaWxkLCB0aGlzKTtcblx0XHRcdHBhcmVudC5ub3JtYWxpemUoKTtcblx0XHR9KS5lbmQoKTtcblx0fTtcblxuXG5cdHZhciBNaWNyb0V2ZW50ID0gZnVuY3Rpb24oKSB7fTtcblx0TWljcm9FdmVudC5wcm90b3R5cGUgPSB7XG5cdFx0b246IGZ1bmN0aW9uKGV2ZW50LCBmY3Qpe1xuXHRcdFx0dGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuXHRcdFx0dGhpcy5fZXZlbnRzW2V2ZW50XSA9IHRoaXMuX2V2ZW50c1tldmVudF0gfHwgW107XG5cdFx0XHR0aGlzLl9ldmVudHNbZXZlbnRdLnB1c2goZmN0KTtcblx0XHR9LFxuXHRcdG9mZjogZnVuY3Rpb24oZXZlbnQsIGZjdCl7XG5cdFx0XHR2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdFx0XHRpZiAobiA9PT0gMCkgcmV0dXJuIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG5cdFx0XHRpZiAobiA9PT0gMSkgcmV0dXJuIGRlbGV0ZSB0aGlzLl9ldmVudHNbZXZlbnRdO1xuXG5cdFx0XHR0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG5cdFx0XHRpZiAoZXZlbnQgaW4gdGhpcy5fZXZlbnRzID09PSBmYWxzZSkgcmV0dXJuO1xuXHRcdFx0dGhpcy5fZXZlbnRzW2V2ZW50XS5zcGxpY2UodGhpcy5fZXZlbnRzW2V2ZW50XS5pbmRleE9mKGZjdCksIDEpO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oZXZlbnQgLyogLCBhcmdzLi4uICovKXtcblx0XHRcdHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcblx0XHRcdGlmIChldmVudCBpbiB0aGlzLl9ldmVudHMgPT09IGZhbHNlKSByZXR1cm47XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2V2ZW50c1tldmVudF0ubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHR0aGlzLl9ldmVudHNbZXZlbnRdW2ldLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogTWl4aW4gd2lsbCBkZWxlZ2F0ZSBhbGwgTWljcm9FdmVudC5qcyBmdW5jdGlvbiBpbiB0aGUgZGVzdGluYXRpb24gb2JqZWN0LlxuXHQgKlxuXHQgKiAtIE1pY3JvRXZlbnQubWl4aW4oRm9vYmFyKSB3aWxsIG1ha2UgRm9vYmFyIGFibGUgdG8gdXNlIE1pY3JvRXZlbnRcblx0ICpcblx0ICogQHBhcmFtIHtvYmplY3R9IHRoZSBvYmplY3Qgd2hpY2ggd2lsbCBzdXBwb3J0IE1pY3JvRXZlbnRcblx0ICovXG5cdE1pY3JvRXZlbnQubWl4aW4gPSBmdW5jdGlvbihkZXN0T2JqZWN0KXtcblx0XHR2YXIgcHJvcHMgPSBbJ29uJywgJ29mZicsICd0cmlnZ2VyJ107XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRkZXN0T2JqZWN0LnByb3RvdHlwZVtwcm9wc1tpXV0gPSBNaWNyb0V2ZW50LnByb3RvdHlwZVtwcm9wc1tpXV07XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBJU19NQUMgICAgICAgID0gL01hYy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuXHR2YXIgS0VZX0EgICAgICAgICA9IDY1O1xuXHR2YXIgS0VZX0NPTU1BICAgICA9IDE4ODtcblx0dmFyIEtFWV9SRVRVUk4gICAgPSAxMztcblx0dmFyIEtFWV9FU0MgICAgICAgPSAyNztcblx0dmFyIEtFWV9MRUZUICAgICAgPSAzNztcblx0dmFyIEtFWV9VUCAgICAgICAgPSAzODtcblx0dmFyIEtFWV9QICAgICAgICAgPSA4MDtcblx0dmFyIEtFWV9SSUdIVCAgICAgPSAzOTtcblx0dmFyIEtFWV9ET1dOICAgICAgPSA0MDtcblx0dmFyIEtFWV9OICAgICAgICAgPSA3ODtcblx0dmFyIEtFWV9CQUNLU1BBQ0UgPSA4O1xuXHR2YXIgS0VZX0RFTEVURSAgICA9IDQ2O1xuXHR2YXIgS0VZX1NISUZUICAgICA9IDE2O1xuXHR2YXIgS0VZX0NNRCAgICAgICA9IElTX01BQyA/IDkxIDogMTc7XG5cdHZhciBLRVlfQ1RSTCAgICAgID0gSVNfTUFDID8gMTggOiAxNztcblx0dmFyIEtFWV9UQUIgICAgICAgPSA5O1xuXG5cdHZhciBUQUdfU0VMRUNUICAgID0gMTtcblx0dmFyIFRBR19JTlBVVCAgICAgPSAyO1xuXG5cdC8vIGZvciBub3csIGFuZHJvaWQgc3VwcG9ydCBpbiBnZW5lcmFsIGlzIHRvbyBzcG90dHkgdG8gc3VwcG9ydCB2YWxpZGl0eVxuXHR2YXIgU1VQUE9SVFNfVkFMSURJVFlfQVBJID0gIS9hbmRyb2lkL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgISFkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpLnZhbGlkaXR5O1xuXG5cblx0dmFyIGlzc2V0ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG5cdFx0cmV0dXJuIHR5cGVvZiBvYmplY3QgIT09ICd1bmRlZmluZWQnO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIHNjYWxhciB0byBpdHMgYmVzdCBzdHJpbmcgcmVwcmVzZW50YXRpb25cblx0ICogZm9yIGhhc2gga2V5cyBhbmQgSFRNTCBhdHRyaWJ1dGUgdmFsdWVzLlxuXHQgKlxuXHQgKiBUcmFuc2Zvcm1hdGlvbnM6XG5cdCAqICAgJ3N0cicgICAgIC0+ICdzdHInXG5cdCAqICAgbnVsbCAgICAgIC0+ICcnXG5cdCAqICAgdW5kZWZpbmVkIC0+ICcnXG5cdCAqICAgdHJ1ZSAgICAgIC0+ICcxJ1xuXHQgKiAgIGZhbHNlICAgICAtPiAnMCdcblx0ICogICAwICAgICAgICAgLT4gJzAnXG5cdCAqICAgMSAgICAgICAgIC0+ICcxJ1xuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcblx0ICogQHJldHVybnMge3N0cmluZ3xudWxsfVxuXHQgKi9cblx0dmFyIGhhc2hfa2V5ID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gdmFsdWUgPyAnMScgOiAnMCc7XG5cdFx0cmV0dXJuIHZhbHVlICsgJyc7XG5cdH07XG5cblx0LyoqXG5cdCAqIEVzY2FwZXMgYSBzdHJpbmcgZm9yIHVzZSB3aXRoaW4gSFRNTC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0clxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfVxuXHQgKi9cblx0dmFyIGVzY2FwZV9odG1sID0gZnVuY3Rpb24oc3RyKSB7XG5cdFx0cmV0dXJuIChzdHIgKyAnJylcblx0XHRcdC5yZXBsYWNlKC8mL2csICcmYW1wOycpXG5cdFx0XHQucmVwbGFjZSgvPC9nLCAnJmx0OycpXG5cdFx0XHQucmVwbGFjZSgvPi9nLCAnJmd0OycpXG5cdFx0XHQucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBFc2NhcGVzIFwiJFwiIGNoYXJhY3RlcnMgaW4gcmVwbGFjZW1lbnQgc3RyaW5ncy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0clxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfVxuXHQgKi9cblx0dmFyIGVzY2FwZV9yZXBsYWNlID0gZnVuY3Rpb24oc3RyKSB7XG5cdFx0cmV0dXJuIChzdHIgKyAnJykucmVwbGFjZSgvXFwkL2csICckJCQkJyk7XG5cdH07XG5cblx0dmFyIGhvb2sgPSB7fTtcblxuXHQvKipcblx0ICogV3JhcHMgYG1ldGhvZGAgb24gYHNlbGZgIHNvIHRoYXQgYGZuYFxuXHQgKiBpcyBpbnZva2VkIGJlZm9yZSB0aGUgb3JpZ2luYWwgbWV0aG9kLlxuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gc2VsZlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuXG5cdCAqL1xuXHRob29rLmJlZm9yZSA9IGZ1bmN0aW9uKHNlbGYsIG1ldGhvZCwgZm4pIHtcblx0XHR2YXIgb3JpZ2luYWwgPSBzZWxmW21ldGhvZF07XG5cdFx0c2VsZlttZXRob2RdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRmbi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuXHRcdFx0cmV0dXJuIG9yaWdpbmFsLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG5cdFx0fTtcblx0fTtcblxuXHQvKipcblx0ICogV3JhcHMgYG1ldGhvZGAgb24gYHNlbGZgIHNvIHRoYXQgYGZuYFxuXHQgKiBpcyBpbnZva2VkIGFmdGVyIHRoZSBvcmlnaW5hbCBtZXRob2QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBzZWxmXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2Rcblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cblx0ICovXG5cdGhvb2suYWZ0ZXIgPSBmdW5jdGlvbihzZWxmLCBtZXRob2QsIGZuKSB7XG5cdFx0dmFyIG9yaWdpbmFsID0gc2VsZlttZXRob2RdO1xuXHRcdHNlbGZbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG5cdFx0XHRmbi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBXcmFwcyBgZm5gIHNvIHRoYXQgaXQgY2FuIG9ubHkgYmUgaW52b2tlZCBvbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuXHQgKiBAcmV0dXJucyB7ZnVuY3Rpb259XG5cdCAqL1xuXHR2YXIgb25jZSA9IGZ1bmN0aW9uKGZuKSB7XG5cdFx0dmFyIGNhbGxlZCA9IGZhbHNlO1xuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdGlmIChjYWxsZWQpIHJldHVybjtcblx0XHRcdGNhbGxlZCA9IHRydWU7XG5cdFx0XHRmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdH07XG5cdH07XG5cblx0LyoqXG5cdCAqIFdyYXBzIGBmbmAgc28gdGhhdCBpdCBjYW4gb25seSBiZSBjYWxsZWQgb25jZVxuXHQgKiBldmVyeSBgZGVsYXlgIG1pbGxpc2Vjb25kcyAoaW52b2tlZCBvbiB0aGUgZmFsbGluZyBlZGdlKS5cblx0ICpcblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cblx0ICogQHBhcmFtIHtpbnR9IGRlbGF5XG5cdCAqIEByZXR1cm5zIHtmdW5jdGlvbn1cblx0ICovXG5cdHZhciBkZWJvdW5jZSA9IGZ1bmN0aW9uKGZuLCBkZWxheSkge1xuXHRcdHZhciB0aW1lb3V0O1xuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHZhciBhcmdzID0gYXJndW1lbnRzO1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHRcdHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cdFx0XHR9LCBkZWxheSk7XG5cdFx0fTtcblx0fTtcblxuXHQvKipcblx0ICogRGVib3VuY2UgYWxsIGZpcmVkIGV2ZW50cyB0eXBlcyBsaXN0ZWQgaW4gYHR5cGVzYFxuXHQgKiB3aGlsZSBleGVjdXRpbmcgdGhlIHByb3ZpZGVkIGBmbmAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBzZWxmXG5cdCAqIEBwYXJhbSB7YXJyYXl9IHR5cGVzXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuXG5cdCAqL1xuXHR2YXIgZGVib3VuY2VfZXZlbnRzID0gZnVuY3Rpb24oc2VsZiwgdHlwZXMsIGZuKSB7XG5cdFx0dmFyIHR5cGU7XG5cdFx0dmFyIHRyaWdnZXIgPSBzZWxmLnRyaWdnZXI7XG5cdFx0dmFyIGV2ZW50X2FyZ3MgPSB7fTtcblxuXHRcdC8vIG92ZXJyaWRlIHRyaWdnZXIgbWV0aG9kXG5cdFx0c2VsZi50cmlnZ2VyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IGFyZ3VtZW50c1swXTtcblx0XHRcdGlmICh0eXBlcy5pbmRleE9mKHR5cGUpICE9PSAtMSkge1xuXHRcdFx0XHRldmVudF9hcmdzW3R5cGVdID0gYXJndW1lbnRzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRyaWdnZXIuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Ly8gaW52b2tlIHByb3ZpZGVkIGZ1bmN0aW9uXG5cdFx0Zm4uYXBwbHkoc2VsZiwgW10pO1xuXHRcdHNlbGYudHJpZ2dlciA9IHRyaWdnZXI7XG5cblx0XHQvLyB0cmlnZ2VyIHF1ZXVlZCBldmVudHNcblx0XHRmb3IgKHR5cGUgaW4gZXZlbnRfYXJncykge1xuXHRcdFx0aWYgKGV2ZW50X2FyZ3MuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcblx0XHRcdFx0dHJpZ2dlci5hcHBseShzZWxmLCBldmVudF9hcmdzW3R5cGVdKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIEEgd29ya2Fyb3VuZCBmb3IgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNjY5NlxuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gJHBhcmVudCAtIFBhcmVudCBlbGVtZW50IHRvIGxpc3RlbiBvbi5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IC0gRXZlbnQgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIC0gRGVzY2VuZGFudCBzZWxlY3RvciB0byBmaWx0ZXIgYnkuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gRXZlbnQgaGFuZGxlci5cblx0ICovXG5cdHZhciB3YXRjaENoaWxkRXZlbnQgPSBmdW5jdGlvbigkcGFyZW50LCBldmVudCwgc2VsZWN0b3IsIGZuKSB7XG5cdFx0JHBhcmVudC5vbihldmVudCwgc2VsZWN0b3IsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBjaGlsZCA9IGUudGFyZ2V0O1xuXHRcdFx0d2hpbGUgKGNoaWxkICYmIGNoaWxkLnBhcmVudE5vZGUgIT09ICRwYXJlbnRbMF0pIHtcblx0XHRcdFx0Y2hpbGQgPSBjaGlsZC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0ZS5jdXJyZW50VGFyZ2V0ID0gY2hpbGQ7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkodGhpcywgW2VdKTtcblx0XHR9KTtcblx0fTtcblxuXHQvKipcblx0ICogRGV0ZXJtaW5lcyB0aGUgY3VycmVudCBzZWxlY3Rpb24gd2l0aGluIGEgdGV4dCBpbnB1dCBjb250cm9sLlxuXHQgKiBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nOlxuXHQgKiAgIC0gc3RhcnRcblx0ICogICAtIGxlbmd0aFxuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gaW5wdXRcblx0ICogQHJldHVybnMge29iamVjdH1cblx0ICovXG5cdHZhciBnZXRTZWxlY3Rpb24gPSBmdW5jdGlvbihpbnB1dCkge1xuXHRcdHZhciByZXN1bHQgPSB7fTtcblx0XHRpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuXHRcdFx0cmVzdWx0LnN0YXJ0ID0gaW5wdXQuc2VsZWN0aW9uU3RhcnQ7XG5cdFx0XHRyZXN1bHQubGVuZ3RoID0gaW5wdXQuc2VsZWN0aW9uRW5kIC0gcmVzdWx0LnN0YXJ0O1xuXHRcdH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uKSB7XG5cdFx0XHRpbnB1dC5mb2N1cygpO1xuXHRcdFx0dmFyIHNlbCA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuXHRcdFx0dmFyIHNlbExlbiA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLnRleHQubGVuZ3RoO1xuXHRcdFx0c2VsLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgLWlucHV0LnZhbHVlLmxlbmd0aCk7XG5cdFx0XHRyZXN1bHQuc3RhcnQgPSBzZWwudGV4dC5sZW5ndGggLSBzZWxMZW47XG5cdFx0XHRyZXN1bHQubGVuZ3RoID0gc2VsTGVuO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBDb3BpZXMgQ1NTIHByb3BlcnRpZXMgZnJvbSBvbmUgZWxlbWVudCB0byBhbm90aGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gJGZyb21cblx0ICogQHBhcmFtIHtvYmplY3R9ICR0b1xuXHQgKiBAcGFyYW0ge2FycmF5fSBwcm9wZXJ0aWVzXG5cdCAqL1xuXHR2YXIgdHJhbnNmZXJTdHlsZXMgPSBmdW5jdGlvbigkZnJvbSwgJHRvLCBwcm9wZXJ0aWVzKSB7XG5cdFx0dmFyIGksIG4sIHN0eWxlcyA9IHt9O1xuXHRcdGlmIChwcm9wZXJ0aWVzKSB7XG5cdFx0XHRmb3IgKGkgPSAwLCBuID0gcHJvcGVydGllcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0c3R5bGVzW3Byb3BlcnRpZXNbaV1dID0gJGZyb20uY3NzKHByb3BlcnRpZXNbaV0pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZXMgPSAkZnJvbS5jc3MoKTtcblx0XHR9XG5cdFx0JHRvLmNzcyhzdHlsZXMpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBNZWFzdXJlcyB0aGUgd2lkdGggb2YgYSBzdHJpbmcgd2l0aGluIGFcblx0ICogcGFyZW50IGVsZW1lbnQgKGluIHBpeGVscykuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcblx0ICogQHBhcmFtIHtvYmplY3R9ICRwYXJlbnRcblx0ICogQHJldHVybnMge2ludH1cblx0ICovXG5cdHZhciBtZWFzdXJlU3RyaW5nID0gZnVuY3Rpb24oc3RyLCAkcGFyZW50KSB7XG5cdFx0aWYgKCFzdHIpIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciAkdGVzdCA9ICQoJzx0ZXN0PicpLmNzcyh7XG5cdFx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcblx0XHRcdHRvcDogLTk5OTk5LFxuXHRcdFx0bGVmdDogLTk5OTk5LFxuXHRcdFx0d2lkdGg6ICdhdXRvJyxcblx0XHRcdHBhZGRpbmc6IDAsXG5cdFx0XHR3aGl0ZVNwYWNlOiAncHJlJ1xuXHRcdH0pLnRleHQoc3RyKS5hcHBlbmRUbygnYm9keScpO1xuXG5cdFx0dHJhbnNmZXJTdHlsZXMoJHBhcmVudCwgJHRlc3QsIFtcblx0XHRcdCdsZXR0ZXJTcGFjaW5nJyxcblx0XHRcdCdmb250U2l6ZScsXG5cdFx0XHQnZm9udEZhbWlseScsXG5cdFx0XHQnZm9udFdlaWdodCcsXG5cdFx0XHQndGV4dFRyYW5zZm9ybSdcblx0XHRdKTtcblxuXHRcdHZhciB3aWR0aCA9ICR0ZXN0LndpZHRoKCk7XG5cdFx0JHRlc3QucmVtb3ZlKCk7XG5cblx0XHRyZXR1cm4gd2lkdGg7XG5cdH07XG5cblx0LyoqXG5cdCAqIFNldHMgdXAgYW4gaW5wdXQgdG8gZ3JvdyBob3Jpem9udGFsbHkgYXMgdGhlIHVzZXJcblx0ICogdHlwZXMuIElmIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkIG1hbnVhbGx5LCB5b3UgY2FuXG5cdCAqIHRyaWdnZXIgdGhlIFwidXBkYXRlXCIgaGFuZGxlciB0byByZXNpemU6XG5cdCAqXG5cdCAqICRpbnB1dC50cmlnZ2VyKCd1cGRhdGUnKTtcblx0ICpcblx0ICogQHBhcmFtIHtvYmplY3R9ICRpbnB1dFxuXHQgKi9cblx0dmFyIGF1dG9Hcm93ID0gZnVuY3Rpb24oJGlucHV0KSB7XG5cdFx0dmFyIGN1cnJlbnRXaWR0aCA9IG51bGw7XG5cblx0XHR2YXIgdXBkYXRlID0gZnVuY3Rpb24oZSwgb3B0aW9ucykge1xuXHRcdFx0dmFyIHZhbHVlLCBrZXlDb2RlLCBwcmludGFibGUsIHBsYWNlaG9sZGVyLCB3aWR0aDtcblx0XHRcdHZhciBzaGlmdCwgY2hhcmFjdGVyLCBzZWxlY3Rpb247XG5cdFx0XHRlID0gZSB8fCB3aW5kb3cuZXZlbnQgfHwge307XG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdFx0aWYgKGUubWV0YUtleSB8fCBlLmFsdEtleSkgcmV0dXJuO1xuXHRcdFx0aWYgKCFvcHRpb25zLmZvcmNlICYmICRpbnB1dC5kYXRhKCdncm93JykgPT09IGZhbHNlKSByZXR1cm47XG5cblx0XHRcdHZhbHVlID0gJGlucHV0LnZhbCgpO1xuXHRcdFx0aWYgKGUudHlwZSAmJiBlLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ2tleWRvd24nKSB7XG5cdFx0XHRcdGtleUNvZGUgPSBlLmtleUNvZGU7XG5cdFx0XHRcdHByaW50YWJsZSA9IChcblx0XHRcdFx0XHQoa2V5Q29kZSA+PSA5NyAmJiBrZXlDb2RlIDw9IDEyMikgfHwgLy8gYS16XG5cdFx0XHRcdFx0KGtleUNvZGUgPj0gNjUgJiYga2V5Q29kZSA8PSA5MCkgIHx8IC8vIEEtWlxuXHRcdFx0XHRcdChrZXlDb2RlID49IDQ4ICYmIGtleUNvZGUgPD0gNTcpICB8fCAvLyAwLTlcblx0XHRcdFx0XHRrZXlDb2RlID09PSAzMiAvLyBzcGFjZVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGlmIChrZXlDb2RlID09PSBLRVlfREVMRVRFIHx8IGtleUNvZGUgPT09IEtFWV9CQUNLU1BBQ0UpIHtcblx0XHRcdFx0XHRzZWxlY3Rpb24gPSBnZXRTZWxlY3Rpb24oJGlucHV0WzBdKTtcblx0XHRcdFx0XHRpZiAoc2VsZWN0aW9uLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgc2VsZWN0aW9uLnN0YXJ0KSArIHZhbHVlLnN1YnN0cmluZyhzZWxlY3Rpb24uc3RhcnQgKyBzZWxlY3Rpb24ubGVuZ3RoKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGtleUNvZGUgPT09IEtFWV9CQUNLU1BBQ0UgJiYgc2VsZWN0aW9uLnN0YXJ0KSB7XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygwLCBzZWxlY3Rpb24uc3RhcnQgLSAxKSArIHZhbHVlLnN1YnN0cmluZyhzZWxlY3Rpb24uc3RhcnQgKyAxKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGtleUNvZGUgPT09IEtFWV9ERUxFVEUgJiYgdHlwZW9mIHNlbGVjdGlvbi5zdGFydCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDAsIHNlbGVjdGlvbi5zdGFydCkgKyB2YWx1ZS5zdWJzdHJpbmcoc2VsZWN0aW9uLnN0YXJ0ICsgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKHByaW50YWJsZSkge1xuXHRcdFx0XHRcdHNoaWZ0ID0gZS5zaGlmdEtleTtcblx0XHRcdFx0XHRjaGFyYWN0ZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUua2V5Q29kZSk7XG5cdFx0XHRcdFx0aWYgKHNoaWZ0KSBjaGFyYWN0ZXIgPSBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKTtcblx0XHRcdFx0XHRlbHNlIGNoYXJhY3RlciA9IGNoYXJhY3Rlci50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdHZhbHVlICs9IGNoYXJhY3Rlcjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRwbGFjZWhvbGRlciA9ICRpbnB1dC5hdHRyKCdwbGFjZWhvbGRlcicpO1xuXHRcdFx0aWYgKCF2YWx1ZSAmJiBwbGFjZWhvbGRlcikge1xuXHRcdFx0XHR2YWx1ZSA9IHBsYWNlaG9sZGVyO1xuXHRcdFx0fVxuXG5cdFx0XHR3aWR0aCA9IG1lYXN1cmVTdHJpbmcodmFsdWUsICRpbnB1dCkgKyA0O1xuXHRcdFx0aWYgKHdpZHRoICE9PSBjdXJyZW50V2lkdGgpIHtcblx0XHRcdFx0Y3VycmVudFdpZHRoID0gd2lkdGg7XG5cdFx0XHRcdCRpbnB1dC53aWR0aCh3aWR0aCk7XG5cdFx0XHRcdCRpbnB1dC50cmlnZ2VySGFuZGxlcigncmVzaXplJyk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdCRpbnB1dC5vbigna2V5ZG93biBrZXl1cCB1cGRhdGUgYmx1cicsIHVwZGF0ZSk7XG5cdFx0dXBkYXRlKCk7XG5cdH07XG5cblx0dmFyIGRvbVRvU3RyaW5nID0gZnVuY3Rpb24oZCkge1xuXHRcdHZhciB0bXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuXHRcdHRtcC5hcHBlbmRDaGlsZChkLmNsb25lTm9kZSh0cnVlKSk7XG5cblx0XHRyZXR1cm4gdG1wLmlubmVySFRNTDtcblx0fTtcblxuXHR2YXIgbG9nRXJyb3IgPSBmdW5jdGlvbihtZXNzYWdlLCBvcHRpb25zKXtcblx0XHRpZighb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuXHRcdHZhciBjb21wb25lbnQgPSBcIlNlbGVjdGl6ZVwiO1xuXG5cdFx0Y29uc29sZS5lcnJvcihjb21wb25lbnQgKyBcIjogXCIgKyBtZXNzYWdlKVxuXG5cdFx0aWYob3B0aW9ucy5leHBsYW5hdGlvbil7XG5cdFx0XHQvLyBjb25zb2xlLmdyb3VwIGlzIHVuZGVmaW5lZCBpbiA8SUUxMVxuXHRcdFx0aWYoY29uc29sZS5ncm91cCkgY29uc29sZS5ncm91cCgpO1xuXHRcdFx0Y29uc29sZS5lcnJvcihvcHRpb25zLmV4cGxhbmF0aW9uKTtcblx0XHRcdGlmKGNvbnNvbGUuZ3JvdXApIGNvbnNvbGUuZ3JvdXBFbmQoKTtcblx0XHR9XG5cdH1cblxuXG5cdHZhciBTZWxlY3RpemUgPSBmdW5jdGlvbigkaW5wdXQsIHNldHRpbmdzKSB7XG5cdFx0dmFyIGtleSwgaSwgbiwgZGlyLCBpbnB1dCwgc2VsZiA9IHRoaXM7XG5cdFx0aW5wdXQgPSAkaW5wdXRbMF07XG5cdFx0aW5wdXQuc2VsZWN0aXplID0gc2VsZjtcblxuXHRcdC8vIGRldGVjdCBydGwgZW52aXJvbm1lbnRcblx0XHR2YXIgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGlucHV0LCBudWxsKTtcblx0XHRkaXIgPSBjb21wdXRlZFN0eWxlID8gY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXJlY3Rpb24nKSA6IGlucHV0LmN1cnJlbnRTdHlsZSAmJiBpbnB1dC5jdXJyZW50U3R5bGUuZGlyZWN0aW9uO1xuXHRcdGRpciA9IGRpciB8fCAkaW5wdXQucGFyZW50cygnW2Rpcl06Zmlyc3QnKS5hdHRyKCdkaXInKSB8fCAnJztcblxuXHRcdC8vIHNldHVwIGRlZmF1bHQgc3RhdGVcblx0XHQkLmV4dGVuZChzZWxmLCB7XG5cdFx0XHRvcmRlciAgICAgICAgICAgIDogMCxcblx0XHRcdHNldHRpbmdzICAgICAgICAgOiBzZXR0aW5ncyxcblx0XHRcdCRpbnB1dCAgICAgICAgICAgOiAkaW5wdXQsXG5cdFx0XHR0YWJJbmRleCAgICAgICAgIDogJGlucHV0LmF0dHIoJ3RhYmluZGV4JykgfHwgJycsXG5cdFx0XHR0YWdUeXBlICAgICAgICAgIDogaW5wdXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VsZWN0JyA/IFRBR19TRUxFQ1QgOiBUQUdfSU5QVVQsXG5cdFx0XHRydGwgICAgICAgICAgICAgIDogL3J0bC9pLnRlc3QoZGlyKSxcblxuXHRcdFx0ZXZlbnROUyAgICAgICAgICA6ICcuc2VsZWN0aXplJyArICgrK1NlbGVjdGl6ZS5jb3VudCksXG5cdFx0XHRoaWdobGlnaHRlZFZhbHVlIDogbnVsbCxcblx0XHRcdGlzT3BlbiAgICAgICAgICAgOiBmYWxzZSxcblx0XHRcdGlzRGlzYWJsZWQgICAgICAgOiBmYWxzZSxcblx0XHRcdGlzUmVxdWlyZWQgICAgICAgOiAkaW5wdXQuaXMoJ1tyZXF1aXJlZF0nKSxcblx0XHRcdGlzSW52YWxpZCAgICAgICAgOiBmYWxzZSxcblx0XHRcdGlzTG9ja2VkICAgICAgICAgOiBmYWxzZSxcblx0XHRcdGlzRm9jdXNlZCAgICAgICAgOiBmYWxzZSxcblx0XHRcdGlzSW5wdXRIaWRkZW4gICAgOiBmYWxzZSxcblx0XHRcdGlzU2V0dXAgICAgICAgICAgOiBmYWxzZSxcblx0XHRcdGlzU2hpZnREb3duICAgICAgOiBmYWxzZSxcblx0XHRcdGlzQ21kRG93biAgICAgICAgOiBmYWxzZSxcblx0XHRcdGlzQ3RybERvd24gICAgICAgOiBmYWxzZSxcblx0XHRcdGlnbm9yZUZvY3VzICAgICAgOiBmYWxzZSxcblx0XHRcdGlnbm9yZUJsdXIgICAgICAgOiBmYWxzZSxcblx0XHRcdGlnbm9yZUhvdmVyICAgICAgOiBmYWxzZSxcblx0XHRcdGhhc09wdGlvbnMgICAgICAgOiBmYWxzZSxcblx0XHRcdGN1cnJlbnRSZXN1bHRzICAgOiBudWxsLFxuXHRcdFx0bGFzdFZhbHVlICAgICAgICA6ICcnLFxuXHRcdFx0Y2FyZXRQb3MgICAgICAgICA6IDAsXG5cdFx0XHRsb2FkaW5nICAgICAgICAgIDogMCxcblx0XHRcdGxvYWRlZFNlYXJjaGVzICAgOiB7fSxcblxuXHRcdFx0JGFjdGl2ZU9wdGlvbiAgICA6IG51bGwsXG5cdFx0XHQkYWN0aXZlSXRlbXMgICAgIDogW10sXG5cblx0XHRcdG9wdGdyb3VwcyAgICAgICAgOiB7fSxcblx0XHRcdG9wdGlvbnMgICAgICAgICAgOiB7fSxcblx0XHRcdHVzZXJPcHRpb25zICAgICAgOiB7fSxcblx0XHRcdGl0ZW1zICAgICAgICAgICAgOiBbXSxcblx0XHRcdHJlbmRlckNhY2hlICAgICAgOiB7fSxcblx0XHRcdG9uU2VhcmNoQ2hhbmdlICAgOiBzZXR0aW5ncy5sb2FkVGhyb3R0bGUgPT09IG51bGwgPyBzZWxmLm9uU2VhcmNoQ2hhbmdlIDogZGVib3VuY2Uoc2VsZi5vblNlYXJjaENoYW5nZSwgc2V0dGluZ3MubG9hZFRocm90dGxlKVxuXHRcdH0pO1xuXG5cdFx0Ly8gc2VhcmNoIHN5c3RlbVxuXHRcdHNlbGYuc2lmdGVyID0gbmV3IFNpZnRlcih0aGlzLm9wdGlvbnMsIHtkaWFjcml0aWNzOiBzZXR0aW5ncy5kaWFjcml0aWNzfSk7XG5cblx0XHQvLyBidWlsZCBvcHRpb25zIHRhYmxlXG5cdFx0aWYgKHNlbGYuc2V0dGluZ3Mub3B0aW9ucykge1xuXHRcdFx0Zm9yIChpID0gMCwgbiA9IHNlbGYuc2V0dGluZ3Mub3B0aW9ucy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0c2VsZi5yZWdpc3Rlck9wdGlvbihzZWxmLnNldHRpbmdzLm9wdGlvbnNbaV0pO1xuXHRcdFx0fVxuXHRcdFx0ZGVsZXRlIHNlbGYuc2V0dGluZ3Mub3B0aW9ucztcblx0XHR9XG5cblx0XHQvLyBidWlsZCBvcHRncm91cCB0YWJsZVxuXHRcdGlmIChzZWxmLnNldHRpbmdzLm9wdGdyb3Vwcykge1xuXHRcdFx0Zm9yIChpID0gMCwgbiA9IHNlbGYuc2V0dGluZ3Mub3B0Z3JvdXBzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHRzZWxmLnJlZ2lzdGVyT3B0aW9uR3JvdXAoc2VsZi5zZXR0aW5ncy5vcHRncm91cHNbaV0pO1xuXHRcdFx0fVxuXHRcdFx0ZGVsZXRlIHNlbGYuc2V0dGluZ3Mub3B0Z3JvdXBzO1xuXHRcdH1cblxuXHRcdC8vIG9wdGlvbi1kZXBlbmRlbnQgZGVmYXVsdHNcblx0XHRzZWxmLnNldHRpbmdzLm1vZGUgPSBzZWxmLnNldHRpbmdzLm1vZGUgfHwgKHNlbGYuc2V0dGluZ3MubWF4SXRlbXMgPT09IDEgPyAnc2luZ2xlJyA6ICdtdWx0aScpO1xuXHRcdGlmICh0eXBlb2Ygc2VsZi5zZXR0aW5ncy5oaWRlU2VsZWN0ZWQgIT09ICdib29sZWFuJykge1xuXHRcdFx0c2VsZi5zZXR0aW5ncy5oaWRlU2VsZWN0ZWQgPSBzZWxmLnNldHRpbmdzLm1vZGUgPT09ICdtdWx0aSc7XG5cdFx0fVxuXG5cdFx0c2VsZi5pbml0aWFsaXplUGx1Z2lucyhzZWxmLnNldHRpbmdzLnBsdWdpbnMpO1xuXHRcdHNlbGYuc2V0dXBDYWxsYmFja3MoKTtcblx0XHRzZWxmLnNldHVwVGVtcGxhdGVzKCk7XG5cdFx0c2VsZi5zZXR1cCgpO1xuXHR9O1xuXG5cdC8vIG1peGluc1xuXHQvLyAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLVxuXG5cdE1pY3JvRXZlbnQubWl4aW4oU2VsZWN0aXplKTtcblxuXHRpZih0eXBlb2YgTWljcm9QbHVnaW4gIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdE1pY3JvUGx1Z2luLm1peGluKFNlbGVjdGl6ZSk7XG5cdH1lbHNle1xuXHRcdGxvZ0Vycm9yKFwiRGVwZW5kZW5jeSBNaWNyb1BsdWdpbiBpcyBtaXNzaW5nXCIsXG5cdFx0XHR7ZXhwbGFuYXRpb246XG5cdFx0XHRcdFwiTWFrZSBzdXJlIHlvdSBlaXRoZXI6ICgxKSBhcmUgdXNpbmcgdGhlIFxcXCJzdGFuZGFsb25lXFxcIiBcIitcblx0XHRcdFx0XCJ2ZXJzaW9uIG9mIFNlbGVjdGl6ZSwgb3IgKDIpIHJlcXVpcmUgTWljcm9QbHVnaW4gYmVmb3JlIHlvdSBcIitcblx0XHRcdFx0XCJsb2FkIFNlbGVjdGl6ZS5cIn1cblx0XHQpO1xuXHR9XG5cblxuXHQvLyBtZXRob2RzXG5cdC8vIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtXG5cblx0JC5leHRlbmQoU2VsZWN0aXplLnByb3RvdHlwZSwge1xuXG5cdFx0LyoqXG5cdFx0ICogQ3JlYXRlcyBhbGwgZWxlbWVudHMgYW5kIHNldHMgdXAgZXZlbnQgYmluZGluZ3MuXG5cdFx0ICovXG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgICAgICA9IHRoaXM7XG5cdFx0XHR2YXIgc2V0dGluZ3MgID0gc2VsZi5zZXR0aW5ncztcblx0XHRcdHZhciBldmVudE5TICAgPSBzZWxmLmV2ZW50TlM7XG5cdFx0XHR2YXIgJHdpbmRvdyAgID0gJCh3aW5kb3cpO1xuXHRcdFx0dmFyICRkb2N1bWVudCA9ICQoZG9jdW1lbnQpO1xuXHRcdFx0dmFyICRpbnB1dCAgICA9IHNlbGYuJGlucHV0O1xuXG5cdFx0XHR2YXIgJHdyYXBwZXI7XG5cdFx0XHR2YXIgJGNvbnRyb2w7XG5cdFx0XHR2YXIgJGNvbnRyb2xfaW5wdXQ7XG5cdFx0XHR2YXIgJGRyb3Bkb3duO1xuXHRcdFx0dmFyICRkcm9wZG93bl9jb250ZW50O1xuXHRcdFx0dmFyICRkcm9wZG93bl9wYXJlbnQ7XG5cdFx0XHR2YXIgaW5wdXRNb2RlO1xuXHRcdFx0dmFyIHRpbWVvdXRfYmx1cjtcblx0XHRcdHZhciB0aW1lb3V0X2ZvY3VzO1xuXHRcdFx0dmFyIGNsYXNzZXM7XG5cdFx0XHR2YXIgY2xhc3Nlc19wbHVnaW5zO1xuXHRcdFx0dmFyIGlucHV0SWQ7XG5cblx0XHRcdGlucHV0TW9kZSAgICAgICAgID0gc2VsZi5zZXR0aW5ncy5tb2RlO1xuXHRcdFx0Y2xhc3NlcyAgICAgICAgICAgPSAkaW5wdXQuYXR0cignY2xhc3MnKSB8fCAnJztcblxuXHRcdFx0JHdyYXBwZXIgICAgICAgICAgPSAkKCc8ZGl2PicpLmFkZENsYXNzKHNldHRpbmdzLndyYXBwZXJDbGFzcykuYWRkQ2xhc3MoY2xhc3NlcykuYWRkQ2xhc3MoaW5wdXRNb2RlKTtcblx0XHRcdCRjb250cm9sICAgICAgICAgID0gJCgnPGRpdj4nKS5hZGRDbGFzcyhzZXR0aW5ncy5pbnB1dENsYXNzKS5hZGRDbGFzcygnaXRlbXMnKS5hcHBlbmRUbygkd3JhcHBlcik7XG5cdFx0XHQkY29udHJvbF9pbnB1dCAgICA9ICQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIC8+JykuYXBwZW5kVG8oJGNvbnRyb2wpLmF0dHIoJ3RhYmluZGV4JywgJGlucHV0LmlzKCc6ZGlzYWJsZWQnKSA/ICctMScgOiBzZWxmLnRhYkluZGV4KTtcblx0XHRcdCRkcm9wZG93bl9wYXJlbnQgID0gJChzZXR0aW5ncy5kcm9wZG93blBhcmVudCB8fCAkd3JhcHBlcik7XG5cdFx0XHQkZHJvcGRvd24gICAgICAgICA9ICQoJzxkaXY+JykuYWRkQ2xhc3Moc2V0dGluZ3MuZHJvcGRvd25DbGFzcykuYWRkQ2xhc3MoaW5wdXRNb2RlKS5oaWRlKCkuYXBwZW5kVG8oJGRyb3Bkb3duX3BhcmVudCk7XG5cdFx0XHQkZHJvcGRvd25fY29udGVudCA9ICQoJzxkaXY+JykuYWRkQ2xhc3Moc2V0dGluZ3MuZHJvcGRvd25Db250ZW50Q2xhc3MpLmFwcGVuZFRvKCRkcm9wZG93bik7XG5cblx0XHRcdGlmKGlucHV0SWQgPSAkaW5wdXQuYXR0cignaWQnKSkge1xuXHRcdFx0XHQkY29udHJvbF9pbnB1dC5hdHRyKCdpZCcsIGlucHV0SWQgKyAnLXNlbGVjdGl6ZWQnKTtcblx0XHRcdFx0JChcImxhYmVsW2Zvcj0nXCIraW5wdXRJZCtcIiddXCIpLmF0dHIoJ2ZvcicsIGlucHV0SWQgKyAnLXNlbGVjdGl6ZWQnKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoc2VsZi5zZXR0aW5ncy5jb3B5Q2xhc3Nlc1RvRHJvcGRvd24pIHtcblx0XHRcdFx0JGRyb3Bkb3duLmFkZENsYXNzKGNsYXNzZXMpO1xuXHRcdFx0fVxuXG5cdFx0XHQkd3JhcHBlci5jc3Moe1xuXHRcdFx0XHR3aWR0aDogJGlucHV0WzBdLnN0eWxlLndpZHRoXG5cdFx0XHR9KTtcblxuXHRcdFx0aWYgKHNlbGYucGx1Z2lucy5uYW1lcy5sZW5ndGgpIHtcblx0XHRcdFx0Y2xhc3Nlc19wbHVnaW5zID0gJ3BsdWdpbi0nICsgc2VsZi5wbHVnaW5zLm5hbWVzLmpvaW4oJyBwbHVnaW4tJyk7XG5cdFx0XHRcdCR3cmFwcGVyLmFkZENsYXNzKGNsYXNzZXNfcGx1Z2lucyk7XG5cdFx0XHRcdCRkcm9wZG93bi5hZGRDbGFzcyhjbGFzc2VzX3BsdWdpbnMpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoKHNldHRpbmdzLm1heEl0ZW1zID09PSBudWxsIHx8IHNldHRpbmdzLm1heEl0ZW1zID4gMSkgJiYgc2VsZi50YWdUeXBlID09PSBUQUdfU0VMRUNUKSB7XG5cdFx0XHRcdCRpbnB1dC5hdHRyKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc2VsZi5zZXR0aW5ncy5wbGFjZWhvbGRlcikge1xuXHRcdFx0XHQkY29udHJvbF9pbnB1dC5hdHRyKCdwbGFjZWhvbGRlcicsIHNldHRpbmdzLnBsYWNlaG9sZGVyKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gaWYgc3BsaXRPbiB3YXMgbm90IHBhc3NlZCBpbiwgY29uc3RydWN0IGl0IGZyb20gdGhlIGRlbGltaXRlciB0byBhbGxvdyBwYXN0aW5nIHVuaXZlcnNhbGx5XG5cdFx0XHRpZiAoIXNlbGYuc2V0dGluZ3Muc3BsaXRPbiAmJiBzZWxmLnNldHRpbmdzLmRlbGltaXRlcikge1xuXHRcdFx0XHR2YXIgZGVsaW1pdGVyRXNjYXBlZCA9IHNlbGYuc2V0dGluZ3MuZGVsaW1pdGVyLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuXHRcdFx0XHRzZWxmLnNldHRpbmdzLnNwbGl0T24gPSBuZXcgUmVnRXhwKCdcXFxccyonICsgZGVsaW1pdGVyRXNjYXBlZCArICcrXFxcXHMqJyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICgkaW5wdXQuYXR0cignYXV0b2NvcnJlY3QnKSkge1xuXHRcdFx0XHQkY29udHJvbF9pbnB1dC5hdHRyKCdhdXRvY29ycmVjdCcsICRpbnB1dC5hdHRyKCdhdXRvY29ycmVjdCcpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCRpbnB1dC5hdHRyKCdhdXRvY2FwaXRhbGl6ZScpKSB7XG5cdFx0XHRcdCRjb250cm9sX2lucHV0LmF0dHIoJ2F1dG9jYXBpdGFsaXplJywgJGlucHV0LmF0dHIoJ2F1dG9jYXBpdGFsaXplJykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxmLiR3cmFwcGVyICAgICAgICAgID0gJHdyYXBwZXI7XG5cdFx0XHRzZWxmLiRjb250cm9sICAgICAgICAgID0gJGNvbnRyb2w7XG5cdFx0XHRzZWxmLiRjb250cm9sX2lucHV0ICAgID0gJGNvbnRyb2xfaW5wdXQ7XG5cdFx0XHRzZWxmLiRkcm9wZG93biAgICAgICAgID0gJGRyb3Bkb3duO1xuXHRcdFx0c2VsZi4kZHJvcGRvd25fY29udGVudCA9ICRkcm9wZG93bl9jb250ZW50O1xuXG5cdFx0XHQkZHJvcGRvd24ub24oJ21vdXNlZW50ZXInLCAnW2RhdGEtc2VsZWN0YWJsZV0nLCBmdW5jdGlvbigpIHsgcmV0dXJuIHNlbGYub25PcHRpb25Ib3Zlci5hcHBseShzZWxmLCBhcmd1bWVudHMpOyB9KTtcblx0XHRcdCRkcm9wZG93bi5vbignbW91c2Vkb3duIGNsaWNrJywgJ1tkYXRhLXNlbGVjdGFibGVdJywgZnVuY3Rpb24oKSB7IHJldHVybiBzZWxmLm9uT3B0aW9uU2VsZWN0LmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7IH0pO1xuXHRcdFx0d2F0Y2hDaGlsZEV2ZW50KCRjb250cm9sLCAnbW91c2Vkb3duJywgJyo6bm90KGlucHV0KScsIGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VsZi5vbkl0ZW1TZWxlY3QuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTsgfSk7XG5cdFx0XHRhdXRvR3JvdygkY29udHJvbF9pbnB1dCk7XG5cblx0XHRcdCRjb250cm9sLm9uKHtcblx0XHRcdFx0bW91c2Vkb3duIDogZnVuY3Rpb24oKSB7IHJldHVybiBzZWxmLm9uTW91c2VEb3duLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7IH0sXG5cdFx0XHRcdGNsaWNrICAgICA6IGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VsZi5vbkNsaWNrLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7IH1cblx0XHRcdH0pO1xuXG5cdFx0XHQkY29udHJvbF9pbnB1dC5vbih7XG5cdFx0XHRcdG1vdXNlZG93biA6IGZ1bmN0aW9uKGUpIHsgZS5zdG9wUHJvcGFnYXRpb24oKTsgfSxcblx0XHRcdFx0a2V5ZG93biAgIDogZnVuY3Rpb24oKSB7IHJldHVybiBzZWxmLm9uS2V5RG93bi5hcHBseShzZWxmLCBhcmd1bWVudHMpOyB9LFxuXHRcdFx0XHRrZXl1cCAgICAgOiBmdW5jdGlvbigpIHsgcmV0dXJuIHNlbGYub25LZXlVcC5hcHBseShzZWxmLCBhcmd1bWVudHMpOyB9LFxuXHRcdFx0XHRrZXlwcmVzcyAgOiBmdW5jdGlvbigpIHsgcmV0dXJuIHNlbGYub25LZXlQcmVzcy5hcHBseShzZWxmLCBhcmd1bWVudHMpOyB9LFxuXHRcdFx0XHRyZXNpemUgICAgOiBmdW5jdGlvbigpIHsgc2VsZi5wb3NpdGlvbkRyb3Bkb3duLmFwcGx5KHNlbGYsIFtdKTsgfSxcblx0XHRcdFx0Ymx1ciAgICAgIDogZnVuY3Rpb24oKSB7IHJldHVybiBzZWxmLm9uQmx1ci5hcHBseShzZWxmLCBhcmd1bWVudHMpOyB9LFxuXHRcdFx0XHRmb2N1cyAgICAgOiBmdW5jdGlvbigpIHsgc2VsZi5pZ25vcmVCbHVyID0gZmFsc2U7IHJldHVybiBzZWxmLm9uRm9jdXMuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTsgfSxcblx0XHRcdFx0cGFzdGUgICAgIDogZnVuY3Rpb24oKSB7IHJldHVybiBzZWxmLm9uUGFzdGUuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTsgfVxuXHRcdFx0fSk7XG5cblx0XHRcdCRkb2N1bWVudC5vbigna2V5ZG93bicgKyBldmVudE5TLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdHNlbGYuaXNDbWREb3duID0gZVtJU19NQUMgPyAnbWV0YUtleScgOiAnY3RybEtleSddO1xuXHRcdFx0XHRzZWxmLmlzQ3RybERvd24gPSBlW0lTX01BQyA/ICdhbHRLZXknIDogJ2N0cmxLZXknXTtcblx0XHRcdFx0c2VsZi5pc1NoaWZ0RG93biA9IGUuc2hpZnRLZXk7XG5cdFx0XHR9KTtcblxuXHRcdFx0JGRvY3VtZW50Lm9uKCdrZXl1cCcgKyBldmVudE5TLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLmtleUNvZGUgPT09IEtFWV9DVFJMKSBzZWxmLmlzQ3RybERvd24gPSBmYWxzZTtcblx0XHRcdFx0aWYgKGUua2V5Q29kZSA9PT0gS0VZX1NISUZUKSBzZWxmLmlzU2hpZnREb3duID0gZmFsc2U7XG5cdFx0XHRcdGlmIChlLmtleUNvZGUgPT09IEtFWV9DTUQpIHNlbGYuaXNDbWREb3duID0gZmFsc2U7XG5cdFx0XHR9KTtcblxuXHRcdFx0JGRvY3VtZW50Lm9uKCdtb3VzZWRvd24nICsgZXZlbnROUywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoc2VsZi5pc0ZvY3VzZWQpIHtcblx0XHRcdFx0XHQvLyBwcmV2ZW50IGV2ZW50cyBvbiB0aGUgZHJvcGRvd24gc2Nyb2xsYmFyIGZyb20gY2F1c2luZyB0aGUgY29udHJvbCB0byBibHVyXG5cdFx0XHRcdFx0aWYgKGUudGFyZ2V0ID09PSBzZWxmLiRkcm9wZG93blswXSB8fCBlLnRhcmdldC5wYXJlbnROb2RlID09PSBzZWxmLiRkcm9wZG93blswXSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBibHVyIG9uIGNsaWNrIG91dHNpZGVcblx0XHRcdFx0XHRpZiAoIXNlbGYuJGNvbnRyb2wuaGFzKGUudGFyZ2V0KS5sZW5ndGggJiYgZS50YXJnZXQgIT09IHNlbGYuJGNvbnRyb2xbMF0pIHtcblx0XHRcdFx0XHRcdHNlbGYuYmx1cihlLnRhcmdldCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0JHdpbmRvdy5vbihbJ3Njcm9sbCcgKyBldmVudE5TLCAncmVzaXplJyArIGV2ZW50TlNdLmpvaW4oJyAnKSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmIChzZWxmLmlzT3Blbikge1xuXHRcdFx0XHRcdHNlbGYucG9zaXRpb25Ecm9wZG93bi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdCR3aW5kb3cub24oJ21vdXNlbW92ZScgKyBldmVudE5TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5pZ25vcmVIb3ZlciA9IGZhbHNlO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIHN0b3JlIG9yaWdpbmFsIGNoaWxkcmVuIGFuZCB0YWIgaW5kZXggc28gdGhhdCB0aGV5IGNhbiBiZVxuXHRcdFx0Ly8gcmVzdG9yZWQgd2hlbiB0aGUgZGVzdHJveSgpIG1ldGhvZCBpcyBjYWxsZWQuXG5cdFx0XHR0aGlzLnJldmVydFNldHRpbmdzID0ge1xuXHRcdFx0XHQkY2hpbGRyZW4gOiAkaW5wdXQuY2hpbGRyZW4oKS5kZXRhY2goKSxcblx0XHRcdFx0dGFiaW5kZXggIDogJGlucHV0LmF0dHIoJ3RhYmluZGV4Jylcblx0XHRcdH07XG5cblx0XHRcdCRpbnB1dC5hdHRyKCd0YWJpbmRleCcsIC0xKS5oaWRlKCkuYWZ0ZXIoc2VsZi4kd3JhcHBlcik7XG5cblx0XHRcdGlmICgkLmlzQXJyYXkoc2V0dGluZ3MuaXRlbXMpKSB7XG5cdFx0XHRcdHNlbGYuc2V0VmFsdWUoc2V0dGluZ3MuaXRlbXMpO1xuXHRcdFx0XHRkZWxldGUgc2V0dGluZ3MuaXRlbXM7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGZlYXR1cmUgZGV0ZWN0IGZvciB0aGUgdmFsaWRhdGlvbiBBUElcblx0XHRcdGlmIChTVVBQT1JUU19WQUxJRElUWV9BUEkpIHtcblx0XHRcdFx0JGlucHV0Lm9uKCdpbnZhbGlkJyArIGV2ZW50TlMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0c2VsZi5pc0ludmFsaWQgPSB0cnVlO1xuXHRcdFx0XHRcdHNlbGYucmVmcmVzaFN0YXRlKCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxmLnVwZGF0ZU9yaWdpbmFsSW5wdXQoKTtcblx0XHRcdHNlbGYucmVmcmVzaEl0ZW1zKCk7XG5cdFx0XHRzZWxmLnJlZnJlc2hTdGF0ZSgpO1xuXHRcdFx0c2VsZi51cGRhdGVQbGFjZWhvbGRlcigpO1xuXHRcdFx0c2VsZi5pc1NldHVwID0gdHJ1ZTtcblxuXHRcdFx0aWYgKCRpbnB1dC5pcygnOmRpc2FibGVkJykpIHtcblx0XHRcdFx0c2VsZi5kaXNhYmxlKCk7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGYub24oJ2NoYW5nZScsIHRoaXMub25DaGFuZ2UpO1xuXG5cdFx0XHQkaW5wdXQuZGF0YSgnc2VsZWN0aXplJywgc2VsZik7XG5cdFx0XHQkaW5wdXQuYWRkQ2xhc3MoJ3NlbGVjdGl6ZWQnKTtcblx0XHRcdHNlbGYudHJpZ2dlcignaW5pdGlhbGl6ZScpO1xuXG5cdFx0XHQvLyBwcmVsb2FkIG9wdGlvbnNcblx0XHRcdGlmIChzZXR0aW5ncy5wcmVsb2FkID09PSB0cnVlKSB7XG5cdFx0XHRcdHNlbGYub25TZWFyY2hDaGFuZ2UoJycpO1xuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFNldHMgdXAgZGVmYXVsdCByZW5kZXJpbmcgZnVuY3Rpb25zLlxuXHRcdCAqL1xuXHRcdHNldHVwVGVtcGxhdGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHZhciBmaWVsZF9sYWJlbCA9IHNlbGYuc2V0dGluZ3MubGFiZWxGaWVsZDtcblx0XHRcdHZhciBmaWVsZF9vcHRncm91cCA9IHNlbGYuc2V0dGluZ3Mub3B0Z3JvdXBMYWJlbEZpZWxkO1xuXG5cdFx0XHR2YXIgdGVtcGxhdGVzID0ge1xuXHRcdFx0XHQnb3B0Z3JvdXAnOiBmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRcdFx0cmV0dXJuICc8ZGl2IGNsYXNzPVwib3B0Z3JvdXBcIj4nICsgZGF0YS5odG1sICsgJzwvZGl2Pic7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdCdvcHRncm91cF9oZWFkZXInOiBmdW5jdGlvbihkYXRhLCBlc2NhcGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gJzxkaXYgY2xhc3M9XCJvcHRncm91cC1oZWFkZXJcIj4nICsgZXNjYXBlKGRhdGFbZmllbGRfb3B0Z3JvdXBdKSArICc8L2Rpdj4nO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHQnb3B0aW9uJzogZnVuY3Rpb24oZGF0YSwgZXNjYXBlKSB7XG5cdFx0XHRcdFx0cmV0dXJuICc8ZGl2IGNsYXNzPVwib3B0aW9uXCI+JyArIGVzY2FwZShkYXRhW2ZpZWxkX2xhYmVsXSkgKyAnPC9kaXY+Jztcblx0XHRcdFx0fSxcblx0XHRcdFx0J2l0ZW0nOiBmdW5jdGlvbihkYXRhLCBlc2NhcGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gJzxkaXYgY2xhc3M9XCJpdGVtXCI+JyArIGVzY2FwZShkYXRhW2ZpZWxkX2xhYmVsXSkgKyAnPC9kaXY+Jztcblx0XHRcdFx0fSxcblx0XHRcdFx0J29wdGlvbl9jcmVhdGUnOiBmdW5jdGlvbihkYXRhLCBlc2NhcGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gJzxkaXYgY2xhc3M9XCJjcmVhdGVcIj5BZGQgPHN0cm9uZz4nICsgZXNjYXBlKGRhdGEuaW5wdXQpICsgJzwvc3Ryb25nPiZoZWxsaXA7PC9kaXY+Jztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0c2VsZi5zZXR0aW5ncy5yZW5kZXIgPSAkLmV4dGVuZCh7fSwgdGVtcGxhdGVzLCBzZWxmLnNldHRpbmdzLnJlbmRlcik7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIE1hcHMgZmlyZWQgZXZlbnRzIHRvIGNhbGxiYWNrcyBwcm92aWRlZFxuXHRcdCAqIGluIHRoZSBzZXR0aW5ncyB1c2VkIHdoZW4gY3JlYXRpbmcgdGhlIGNvbnRyb2wuXG5cdFx0ICovXG5cdFx0c2V0dXBDYWxsYmFja3M6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGtleSwgZm4sIGNhbGxiYWNrcyA9IHtcblx0XHRcdFx0J2luaXRpYWxpemUnICAgICAgOiAnb25Jbml0aWFsaXplJyxcblx0XHRcdFx0J2NoYW5nZScgICAgICAgICAgOiAnb25DaGFuZ2UnLFxuXHRcdFx0XHQnaXRlbV9hZGQnICAgICAgICA6ICdvbkl0ZW1BZGQnLFxuXHRcdFx0XHQnaXRlbV9yZW1vdmUnICAgICA6ICdvbkl0ZW1SZW1vdmUnLFxuXHRcdFx0XHQnY2xlYXInICAgICAgICAgICA6ICdvbkNsZWFyJyxcblx0XHRcdFx0J29wdGlvbl9hZGQnICAgICAgOiAnb25PcHRpb25BZGQnLFxuXHRcdFx0XHQnb3B0aW9uX3JlbW92ZScgICA6ICdvbk9wdGlvblJlbW92ZScsXG5cdFx0XHRcdCdvcHRpb25fY2xlYXInICAgIDogJ29uT3B0aW9uQ2xlYXInLFxuXHRcdFx0XHQnb3B0Z3JvdXBfYWRkJyAgICA6ICdvbk9wdGlvbkdyb3VwQWRkJyxcblx0XHRcdFx0J29wdGdyb3VwX3JlbW92ZScgOiAnb25PcHRpb25Hcm91cFJlbW92ZScsXG5cdFx0XHRcdCdvcHRncm91cF9jbGVhcicgIDogJ29uT3B0aW9uR3JvdXBDbGVhcicsXG5cdFx0XHRcdCdkcm9wZG93bl9vcGVuJyAgIDogJ29uRHJvcGRvd25PcGVuJyxcblx0XHRcdFx0J2Ryb3Bkb3duX2Nsb3NlJyAgOiAnb25Ecm9wZG93bkNsb3NlJyxcblx0XHRcdFx0J3R5cGUnICAgICAgICAgICAgOiAnb25UeXBlJyxcblx0XHRcdFx0J2xvYWQnICAgICAgICAgICAgOiAnb25Mb2FkJyxcblx0XHRcdFx0J2ZvY3VzJyAgICAgICAgICAgOiAnb25Gb2N1cycsXG5cdFx0XHRcdCdibHVyJyAgICAgICAgICAgIDogJ29uQmx1cidcblx0XHRcdH07XG5cblx0XHRcdGZvciAoa2V5IGluIGNhbGxiYWNrcykge1xuXHRcdFx0XHRpZiAoY2FsbGJhY2tzLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0XHRmbiA9IHRoaXMuc2V0dGluZ3NbY2FsbGJhY2tzW2tleV1dO1xuXHRcdFx0XHRcdGlmIChmbikgdGhpcy5vbihrZXksIGZuKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBUcmlnZ2VyZWQgd2hlbiB0aGUgbWFpbiBjb250cm9sIGVsZW1lbnRcblx0XHQgKiBoYXMgYSBjbGljayBldmVudC5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBlXG5cdFx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHRvbkNsaWNrOiBmdW5jdGlvbihlKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRcdC8vIG5lY2Vzc2FyeSBmb3IgbW9iaWxlIHdlYmtpdCBkZXZpY2VzIChtYW51YWwgZm9jdXMgdHJpZ2dlcmluZ1xuXHRcdFx0Ly8gaXMgaWdub3JlZCB1bmxlc3MgaW52b2tlZCB3aXRoaW4gYSBjbGljayBldmVudClcblx0XHRcdGlmICghc2VsZi5pc0ZvY3VzZWQpIHtcblx0XHRcdFx0c2VsZi5mb2N1cygpO1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFRyaWdnZXJlZCB3aGVuIHRoZSBtYWluIGNvbnRyb2wgZWxlbWVudFxuXHRcdCAqIGhhcyBhIG1vdXNlIGRvd24gZXZlbnQuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZVxuXHRcdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdFx0ICovXG5cdFx0b25Nb3VzZURvd246IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHZhciBkZWZhdWx0UHJldmVudGVkID0gZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKTtcblx0XHRcdHZhciAkdGFyZ2V0ID0gJChlLnRhcmdldCk7XG5cblx0XHRcdGlmIChzZWxmLmlzRm9jdXNlZCkge1xuXHRcdFx0XHQvLyByZXRhaW4gZm9jdXMgYnkgcHJldmVudGluZyBuYXRpdmUgaGFuZGxpbmcuIGlmIHRoZVxuXHRcdFx0XHQvLyBldmVudCB0YXJnZXQgaXMgdGhlIGlucHV0IGl0IHNob3VsZCBub3QgYmUgbW9kaWZpZWQuXG5cdFx0XHRcdC8vIG90aGVyd2lzZSwgdGV4dCBzZWxlY3Rpb24gd2l0aGluIHRoZSBpbnB1dCB3b24ndCB3b3JrLlxuXHRcdFx0XHRpZiAoZS50YXJnZXQgIT09IHNlbGYuJGNvbnRyb2xfaW5wdXRbMF0pIHtcblx0XHRcdFx0XHRpZiAoc2VsZi5zZXR0aW5ncy5tb2RlID09PSAnc2luZ2xlJykge1xuXHRcdFx0XHRcdFx0Ly8gdG9nZ2xlIGRyb3Bkb3duXG5cdFx0XHRcdFx0XHRzZWxmLmlzT3BlbiA/IHNlbGYuY2xvc2UoKSA6IHNlbGYub3BlbigpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIWRlZmF1bHRQcmV2ZW50ZWQpIHtcblx0XHRcdFx0XHRcdHNlbGYuc2V0QWN0aXZlSXRlbShudWxsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBnaXZlIGNvbnRyb2wgZm9jdXNcblx0XHRcdFx0aWYgKCFkZWZhdWx0UHJldmVudGVkKSB7XG5cdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzZWxmLmZvY3VzKCk7XG5cdFx0XHRcdFx0fSwgMCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogVHJpZ2dlcmVkIHdoZW4gdGhlIHZhbHVlIG9mIHRoZSBjb250cm9sIGhhcyBiZWVuIGNoYW5nZWQuXG5cdFx0ICogVGhpcyBzaG91bGQgcHJvcGFnYXRlIHRoZSBldmVudCB0byB0aGUgb3JpZ2luYWwgRE9NXG5cdFx0ICogaW5wdXQgLyBzZWxlY3QgZWxlbWVudC5cblx0XHQgKi9cblx0XHRvbkNoYW5nZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLiRpbnB1dC50cmlnZ2VyKCdjaGFuZ2UnKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogVHJpZ2dlcmVkIG9uIDxpbnB1dD4gcGFzdGUuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZVxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdG9uUGFzdGU6IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0aWYgKHNlbGYuaXNGdWxsKCkgfHwgc2VsZi5pc0lucHV0SGlkZGVuIHx8IHNlbGYuaXNMb2NrZWQpIHtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgcmVnZXggb3Igc3RyaW5nIGlzIGluY2x1ZGVkLCB0aGlzIHdpbGwgc3BsaXQgdGhlIHBhc3RlZFxuXHRcdFx0Ly8gaW5wdXQgYW5kIGNyZWF0ZSBJdGVtcyBmb3IgZWFjaCBzZXBhcmF0ZSB2YWx1ZVxuXHRcdFx0aWYgKHNlbGYuc2V0dGluZ3Muc3BsaXRPbikge1xuXG5cdFx0XHRcdC8vIFdhaXQgZm9yIHBhc3RlZCB0ZXh0IHRvIGJlIHJlY29nbml6ZWQgaW4gdmFsdWVcblx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgcGFzdGVkVGV4dCA9IHNlbGYuJGNvbnRyb2xfaW5wdXQudmFsKCk7XG5cdFx0XHRcdFx0aWYoIXBhc3RlZFRleHQubWF0Y2goc2VsZi5zZXR0aW5ncy5zcGxpdE9uKSl7IHJldHVybiB9XG5cblx0XHRcdFx0XHR2YXIgc3BsaXRJbnB1dCA9ICQudHJpbShwYXN0ZWRUZXh0KS5zcGxpdChzZWxmLnNldHRpbmdzLnNwbGl0T24pO1xuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwLCBuID0gc3BsaXRJbnB1dC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0XHRcdHNlbGYuY3JlYXRlSXRlbShzcGxpdElucHV0W2ldKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sIDApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBUcmlnZ2VyZWQgb24gPGlucHV0PiBrZXlwcmVzcy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBlXG5cdFx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdFx0ICovXG5cdFx0b25LZXlQcmVzczogZnVuY3Rpb24oZSkge1xuXHRcdFx0aWYgKHRoaXMuaXNMb2NrZWQpIHJldHVybiBlICYmIGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHZhciBjaGFyYWN0ZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUua2V5Q29kZSB8fCBlLndoaWNoKTtcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmNyZWF0ZSAmJiB0aGlzLnNldHRpbmdzLm1vZGUgPT09ICdtdWx0aScgJiYgY2hhcmFjdGVyID09PSB0aGlzLnNldHRpbmdzLmRlbGltaXRlcikge1xuXHRcdFx0XHR0aGlzLmNyZWF0ZUl0ZW0oKTtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFRyaWdnZXJlZCBvbiA8aW5wdXQ+IGtleWRvd24uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZVxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdG9uS2V5RG93bjogZnVuY3Rpb24oZSkge1xuXHRcdFx0dmFyIGlzSW5wdXQgPSBlLnRhcmdldCA9PT0gdGhpcy4kY29udHJvbF9pbnB1dFswXTtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0aWYgKHNlbGYuaXNMb2NrZWQpIHtcblx0XHRcdFx0aWYgKGUua2V5Q29kZSAhPT0gS0VZX1RBQikge1xuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHN3aXRjaCAoZS5rZXlDb2RlKSB7XG5cdFx0XHRcdGNhc2UgS0VZX0E6XG5cdFx0XHRcdFx0aWYgKHNlbGYuaXNDbWREb3duKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnNlbGVjdEFsbCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBLRVlfRVNDOlxuXHRcdFx0XHRcdGlmIChzZWxmLmlzT3Blbikge1xuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdHNlbGYuY2xvc2UoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRjYXNlIEtFWV9OOlxuXHRcdFx0XHRcdGlmICghZS5jdHJsS2V5IHx8IGUuYWx0S2V5KSBicmVhaztcblx0XHRcdFx0Y2FzZSBLRVlfRE9XTjpcblx0XHRcdFx0XHRpZiAoIXNlbGYuaXNPcGVuICYmIHNlbGYuaGFzT3B0aW9ucykge1xuXHRcdFx0XHRcdFx0c2VsZi5vcGVuKCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChzZWxmLiRhY3RpdmVPcHRpb24pIHtcblx0XHRcdFx0XHRcdHNlbGYuaWdub3JlSG92ZXIgPSB0cnVlO1xuXHRcdFx0XHRcdFx0dmFyICRuZXh0ID0gc2VsZi5nZXRBZGphY2VudE9wdGlvbihzZWxmLiRhY3RpdmVPcHRpb24sIDEpO1xuXHRcdFx0XHRcdFx0aWYgKCRuZXh0Lmxlbmd0aCkgc2VsZi5zZXRBY3RpdmVPcHRpb24oJG5leHQsIHRydWUsIHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRjYXNlIEtFWV9QOlxuXHRcdFx0XHRcdGlmICghZS5jdHJsS2V5IHx8IGUuYWx0S2V5KSBicmVhaztcblx0XHRcdFx0Y2FzZSBLRVlfVVA6XG5cdFx0XHRcdFx0aWYgKHNlbGYuJGFjdGl2ZU9wdGlvbikge1xuXHRcdFx0XHRcdFx0c2VsZi5pZ25vcmVIb3ZlciA9IHRydWU7XG5cdFx0XHRcdFx0XHR2YXIgJHByZXYgPSBzZWxmLmdldEFkamFjZW50T3B0aW9uKHNlbGYuJGFjdGl2ZU9wdGlvbiwgLTEpO1xuXHRcdFx0XHRcdFx0aWYgKCRwcmV2Lmxlbmd0aCkgc2VsZi5zZXRBY3RpdmVPcHRpb24oJHByZXYsIHRydWUsIHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRjYXNlIEtFWV9SRVRVUk46XG5cdFx0XHRcdFx0aWYgKHNlbGYuaXNPcGVuICYmIHNlbGYuJGFjdGl2ZU9wdGlvbikge1xuXHRcdFx0XHRcdFx0c2VsZi5vbk9wdGlvblNlbGVjdCh7Y3VycmVudFRhcmdldDogc2VsZi4kYWN0aXZlT3B0aW9ufSk7XG5cdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0Y2FzZSBLRVlfTEVGVDpcblx0XHRcdFx0XHRzZWxmLmFkdmFuY2VTZWxlY3Rpb24oLTEsIGUpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0Y2FzZSBLRVlfUklHSFQ6XG5cdFx0XHRcdFx0c2VsZi5hZHZhbmNlU2VsZWN0aW9uKDEsIGUpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0Y2FzZSBLRVlfVEFCOlxuXHRcdFx0XHRcdGlmIChzZWxmLnNldHRpbmdzLnNlbGVjdE9uVGFiICYmIHNlbGYuaXNPcGVuICYmIHNlbGYuJGFjdGl2ZU9wdGlvbikge1xuXHRcdFx0XHRcdFx0c2VsZi5vbk9wdGlvblNlbGVjdCh7Y3VycmVudFRhcmdldDogc2VsZi4kYWN0aXZlT3B0aW9ufSk7XG5cblx0XHRcdFx0XHRcdC8vIERlZmF1bHQgYmVoYXZpb3VyIGlzIHRvIGp1bXAgdG8gdGhlIG5leHQgZmllbGQsIHdlIG9ubHkgd2FudCB0aGlzXG5cdFx0XHRcdFx0XHQvLyBpZiB0aGUgY3VycmVudCBmaWVsZCBkb2Vzbid0IGFjY2VwdCBhbnkgbW9yZSBlbnRyaWVzXG5cdFx0XHRcdFx0XHRpZiAoIXNlbGYuaXNGdWxsKCkpIHtcblx0XHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoc2VsZi5zZXR0aW5ncy5jcmVhdGUgJiYgc2VsZi5jcmVhdGVJdGVtKCkpIHtcblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRjYXNlIEtFWV9CQUNLU1BBQ0U6XG5cdFx0XHRcdGNhc2UgS0VZX0RFTEVURTpcblx0XHRcdFx0XHRzZWxmLmRlbGV0ZVNlbGVjdGlvbihlKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICgoc2VsZi5pc0Z1bGwoKSB8fCBzZWxmLmlzSW5wdXRIaWRkZW4pICYmICEoSVNfTUFDID8gZS5tZXRhS2V5IDogZS5jdHJsS2V5KSkge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogVHJpZ2dlcmVkIG9uIDxpbnB1dD4ga2V5dXAuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZVxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdG9uS2V5VXA6IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0aWYgKHNlbGYuaXNMb2NrZWQpIHJldHVybiBlICYmIGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHZhciB2YWx1ZSA9IHNlbGYuJGNvbnRyb2xfaW5wdXQudmFsKCkgfHwgJyc7XG5cdFx0XHRpZiAoc2VsZi5sYXN0VmFsdWUgIT09IHZhbHVlKSB7XG5cdFx0XHRcdHNlbGYubGFzdFZhbHVlID0gdmFsdWU7XG5cdFx0XHRcdHNlbGYub25TZWFyY2hDaGFuZ2UodmFsdWUpO1xuXHRcdFx0XHRzZWxmLnJlZnJlc2hPcHRpb25zKCk7XG5cdFx0XHRcdHNlbGYudHJpZ2dlcigndHlwZScsIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogSW52b2tlcyB0aGUgdXNlci1wcm92aWRlIG9wdGlvbiBwcm92aWRlciAvIGxvYWRlci5cblx0XHQgKlxuXHRcdCAqIE5vdGU6IHRoaXMgZnVuY3Rpb24gaXMgZGVib3VuY2VkIGluIHRoZSBTZWxlY3RpemVcblx0XHQgKiBjb25zdHJ1Y3RvciAoYnkgYHNldHRpbmdzLmxvYWRUaHJvdHRsZWAgbWlsbGlzZWNvbmRzKVxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG5cdFx0ICovXG5cdFx0b25TZWFyY2hDaGFuZ2U6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHR2YXIgZm4gPSBzZWxmLnNldHRpbmdzLmxvYWQ7XG5cdFx0XHRpZiAoIWZuKSByZXR1cm47XG5cdFx0XHRpZiAoc2VsZi5sb2FkZWRTZWFyY2hlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHJldHVybjtcblx0XHRcdHNlbGYubG9hZGVkU2VhcmNoZXNbdmFsdWVdID0gdHJ1ZTtcblx0XHRcdHNlbGYubG9hZChmdW5jdGlvbihjYWxsYmFjaykge1xuXHRcdFx0XHRmbi5hcHBseShzZWxmLCBbdmFsdWUsIGNhbGxiYWNrXSk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogVHJpZ2dlcmVkIG9uIDxpbnB1dD4gZm9jdXMuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZSAob3B0aW9uYWwpXG5cdFx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdFx0ICovXG5cdFx0b25Gb2N1czogZnVuY3Rpb24oZSkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0dmFyIHdhc0ZvY3VzZWQgPSBzZWxmLmlzRm9jdXNlZDtcblxuXHRcdFx0aWYgKHNlbGYuaXNEaXNhYmxlZCkge1xuXHRcdFx0XHRzZWxmLmJsdXIoKTtcblx0XHRcdFx0ZSAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHNlbGYuaWdub3JlRm9jdXMpIHJldHVybjtcblx0XHRcdHNlbGYuaXNGb2N1c2VkID0gdHJ1ZTtcblx0XHRcdGlmIChzZWxmLnNldHRpbmdzLnByZWxvYWQgPT09ICdmb2N1cycpIHNlbGYub25TZWFyY2hDaGFuZ2UoJycpO1xuXG5cdFx0XHRpZiAoIXdhc0ZvY3VzZWQpIHNlbGYudHJpZ2dlcignZm9jdXMnKTtcblxuXHRcdFx0aWYgKCFzZWxmLiRhY3RpdmVJdGVtcy5sZW5ndGgpIHtcblx0XHRcdFx0c2VsZi5zaG93SW5wdXQoKTtcblx0XHRcdFx0c2VsZi5zZXRBY3RpdmVJdGVtKG51bGwpO1xuXHRcdFx0XHRzZWxmLnJlZnJlc2hPcHRpb25zKCEhc2VsZi5zZXR0aW5ncy5vcGVuT25Gb2N1cyk7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGYucmVmcmVzaFN0YXRlKCk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFRyaWdnZXJlZCBvbiA8aW5wdXQ+IGJsdXIuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZVxuXHRcdCAqIEBwYXJhbSB7RWxlbWVudH0gZGVzdFxuXHRcdCAqL1xuXHRcdG9uQmx1cjogZnVuY3Rpb24oZSwgZGVzdCkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0aWYgKCFzZWxmLmlzRm9jdXNlZCkgcmV0dXJuO1xuXHRcdFx0c2VsZi5pc0ZvY3VzZWQgPSBmYWxzZTtcblxuXHRcdFx0aWYgKHNlbGYuaWdub3JlRm9jdXMpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBlbHNlIGlmICghc2VsZi5pZ25vcmVCbHVyICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHNlbGYuJGRyb3Bkb3duX2NvbnRlbnRbMF0pIHtcblx0XHRcdFx0Ly8gbmVjZXNzYXJ5IHRvIHByZXZlbnQgSUUgY2xvc2luZyB0aGUgZHJvcGRvd24gd2hlbiB0aGUgc2Nyb2xsYmFyIGlzIGNsaWNrZWRcblx0XHRcdFx0c2VsZi5pZ25vcmVCbHVyID0gdHJ1ZTtcblx0XHRcdFx0c2VsZi5vbkZvY3VzKGUpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBkZWFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuY2xvc2UoKTtcblx0XHRcdFx0c2VsZi5zZXRUZXh0Ym94VmFsdWUoJycpO1xuXHRcdFx0XHRzZWxmLnNldEFjdGl2ZUl0ZW0obnVsbCk7XG5cdFx0XHRcdHNlbGYuc2V0QWN0aXZlT3B0aW9uKG51bGwpO1xuXHRcdFx0XHRzZWxmLnNldENhcmV0KHNlbGYuaXRlbXMubGVuZ3RoKTtcblx0XHRcdFx0c2VsZi5yZWZyZXNoU3RhdGUoKTtcblxuXHRcdFx0XHQvLyBJRTExIGJ1ZzogZWxlbWVudCBzdGlsbCBtYXJrZWQgYXMgYWN0aXZlXG5cdFx0XHRcdGRlc3QgJiYgZGVzdC5mb2N1cyAmJiBkZXN0LmZvY3VzKCk7XG5cblx0XHRcdFx0c2VsZi5pZ25vcmVGb2N1cyA9IGZhbHNlO1xuXHRcdFx0XHRzZWxmLnRyaWdnZXIoJ2JsdXInKTtcblx0XHRcdH07XG5cblx0XHRcdHNlbGYuaWdub3JlRm9jdXMgPSB0cnVlO1xuXHRcdFx0aWYgKHNlbGYuc2V0dGluZ3MuY3JlYXRlICYmIHNlbGYuc2V0dGluZ3MuY3JlYXRlT25CbHVyKSB7XG5cdFx0XHRcdHNlbGYuY3JlYXRlSXRlbShudWxsLCBmYWxzZSwgZGVhY3RpdmF0ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWFjdGl2YXRlKCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFRyaWdnZXJlZCB3aGVuIHRoZSB1c2VyIHJvbGxzIG92ZXJcblx0XHQgKiBhbiBvcHRpb24gaW4gdGhlIGF1dG9jb21wbGV0ZSBkcm9wZG93biBtZW51LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IGVcblx0XHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHRvbk9wdGlvbkhvdmVyOiBmdW5jdGlvbihlKSB7XG5cdFx0XHRpZiAodGhpcy5pZ25vcmVIb3ZlcikgcmV0dXJuO1xuXHRcdFx0dGhpcy5zZXRBY3RpdmVPcHRpb24oZS5jdXJyZW50VGFyZ2V0LCBmYWxzZSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFRyaWdnZXJlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiBhbiBvcHRpb25cblx0XHQgKiBpbiB0aGUgYXV0b2NvbXBsZXRlIGRyb3Bkb3duIG1lbnUuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZVxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdG9uT3B0aW9uU2VsZWN0OiBmdW5jdGlvbihlKSB7XG5cdFx0XHR2YXIgdmFsdWUsICR0YXJnZXQsICRvcHRpb24sIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHRpZiAoZS5wcmV2ZW50RGVmYXVsdCkge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cblx0XHRcdCR0YXJnZXQgPSAkKGUuY3VycmVudFRhcmdldCk7XG5cdFx0XHRpZiAoJHRhcmdldC5oYXNDbGFzcygnY3JlYXRlJykpIHtcblx0XHRcdFx0c2VsZi5jcmVhdGVJdGVtKG51bGwsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmIChzZWxmLnNldHRpbmdzLmNsb3NlQWZ0ZXJTZWxlY3QpIHtcblx0XHRcdFx0XHRcdHNlbGYuY2xvc2UoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsdWUgPSAkdGFyZ2V0LmF0dHIoJ2RhdGEtdmFsdWUnKTtcblx0XHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRzZWxmLmxhc3RRdWVyeSA9IG51bGw7XG5cdFx0XHRcdFx0c2VsZi5zZXRUZXh0Ym94VmFsdWUoJycpO1xuXHRcdFx0XHRcdHNlbGYuYWRkSXRlbSh2YWx1ZSk7XG5cdFx0XHRcdFx0aWYgKHNlbGYuc2V0dGluZ3MuY2xvc2VBZnRlclNlbGVjdCkge1xuXHRcdFx0XHRcdFx0c2VsZi5jbG9zZSgpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIXNlbGYuc2V0dGluZ3MuaGlkZVNlbGVjdGVkICYmIGUudHlwZSAmJiAvbW91c2UvLnRlc3QoZS50eXBlKSkge1xuXHRcdFx0XHRcdFx0c2VsZi5zZXRBY3RpdmVPcHRpb24oc2VsZi5nZXRPcHRpb24odmFsdWUpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogVHJpZ2dlcmVkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIG9uIGFuIGl0ZW1cblx0XHQgKiB0aGF0IGhhcyBiZWVuIHNlbGVjdGVkLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IGVcblx0XHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHRvbkl0ZW1TZWxlY3Q6IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0aWYgKHNlbGYuaXNMb2NrZWQpIHJldHVybjtcblx0XHRcdGlmIChzZWxmLnNldHRpbmdzLm1vZGUgPT09ICdtdWx0aScpIHtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRzZWxmLnNldEFjdGl2ZUl0ZW0oZS5jdXJyZW50VGFyZ2V0LCBlKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogSW52b2tlcyB0aGUgcHJvdmlkZWQgbWV0aG9kIHRoYXQgcHJvdmlkZXNcblx0XHQgKiByZXN1bHRzIHRvIGEgY2FsbGJhY2stLS13aGljaCBhcmUgdGhlbiBhZGRlZFxuXHRcdCAqIGFzIG9wdGlvbnMgdG8gdGhlIGNvbnRyb2wuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuXHRcdCAqL1xuXHRcdGxvYWQ6IGZ1bmN0aW9uKGZuKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHR2YXIgJHdyYXBwZXIgPSBzZWxmLiR3cmFwcGVyLmFkZENsYXNzKHNlbGYuc2V0dGluZ3MubG9hZGluZ0NsYXNzKTtcblxuXHRcdFx0c2VsZi5sb2FkaW5nKys7XG5cdFx0XHRmbi5hcHBseShzZWxmLCBbZnVuY3Rpb24ocmVzdWx0cykge1xuXHRcdFx0XHRzZWxmLmxvYWRpbmcgPSBNYXRoLm1heChzZWxmLmxvYWRpbmcgLSAxLCAwKTtcblx0XHRcdFx0aWYgKHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGgpIHtcblx0XHRcdFx0XHRzZWxmLmFkZE9wdGlvbihyZXN1bHRzKTtcblx0XHRcdFx0XHRzZWxmLnJlZnJlc2hPcHRpb25zKHNlbGYuaXNGb2N1c2VkICYmICFzZWxmLmlzSW5wdXRIaWRkZW4pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghc2VsZi5sb2FkaW5nKSB7XG5cdFx0XHRcdFx0JHdyYXBwZXIucmVtb3ZlQ2xhc3Moc2VsZi5zZXR0aW5ncy5sb2FkaW5nQ2xhc3MpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYudHJpZ2dlcignbG9hZCcsIHJlc3VsdHMpO1xuXHRcdFx0fV0pO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBTZXRzIHRoZSBpbnB1dCBmaWVsZCBvZiB0aGUgY29udHJvbCB0byB0aGUgc3BlY2lmaWVkIHZhbHVlLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG5cdFx0ICovXG5cdFx0c2V0VGV4dGJveFZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyICRpbnB1dCA9IHRoaXMuJGNvbnRyb2xfaW5wdXQ7XG5cdFx0XHR2YXIgY2hhbmdlZCA9ICRpbnB1dC52YWwoKSAhPT0gdmFsdWU7XG5cdFx0XHRpZiAoY2hhbmdlZCkge1xuXHRcdFx0XHQkaW5wdXQudmFsKHZhbHVlKS50cmlnZ2VySGFuZGxlcigndXBkYXRlJyk7XG5cdFx0XHRcdHRoaXMubGFzdFZhbHVlID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBjb250cm9sLiBJZiBtdWx0aXBsZSBpdGVtc1xuXHRcdCAqIGNhbiBiZSBzZWxlY3RlZCAoZS5nLiA8c2VsZWN0IG11bHRpcGxlPiksIHRoaXMgcmV0dXJuc1xuXHRcdCAqIGFuIGFycmF5LiBJZiBvbmx5IG9uZSBpdGVtIGNhbiBiZSBzZWxlY3RlZCwgdGhpc1xuXHRcdCAqIHJldHVybnMgYSBzdHJpbmcuXG5cdFx0ICpcblx0XHQgKiBAcmV0dXJucyB7bWl4ZWR9XG5cdFx0ICovXG5cdFx0Z2V0VmFsdWU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKHRoaXMudGFnVHlwZSA9PT0gVEFHX1NFTEVDVCAmJiB0aGlzLiRpbnB1dC5hdHRyKCdtdWx0aXBsZScpKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLml0ZW1zO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuaXRlbXMuam9pbih0aGlzLnNldHRpbmdzLmRlbGltaXRlcik7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlc2V0cyB0aGUgc2VsZWN0ZWQgaXRlbXMgdG8gdGhlIGdpdmVuIHZhbHVlLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHttaXhlZH0gdmFsdWVcblx0XHQgKi9cblx0XHRzZXRWYWx1ZTogZnVuY3Rpb24odmFsdWUsIHNpbGVudCkge1xuXHRcdFx0dmFyIGV2ZW50cyA9IHNpbGVudCA/IFtdIDogWydjaGFuZ2UnXTtcblxuXHRcdFx0ZGVib3VuY2VfZXZlbnRzKHRoaXMsIGV2ZW50cywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoaXMuY2xlYXIoc2lsZW50KTtcblx0XHRcdFx0dGhpcy5hZGRJdGVtcyh2YWx1ZSwgc2lsZW50KTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBTZXRzIHRoZSBzZWxlY3RlZCBpdGVtLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9ICRpdGVtXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IGUgKG9wdGlvbmFsKVxuXHRcdCAqL1xuXHRcdHNldEFjdGl2ZUl0ZW06IGZ1bmN0aW9uKCRpdGVtLCBlKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHR2YXIgZXZlbnROYW1lO1xuXHRcdFx0dmFyIGksIGlkeCwgYmVnaW4sIGVuZCwgaXRlbSwgc3dhcDtcblx0XHRcdHZhciAkbGFzdDtcblxuXHRcdFx0aWYgKHNlbGYuc2V0dGluZ3MubW9kZSA9PT0gJ3NpbmdsZScpIHJldHVybjtcblx0XHRcdCRpdGVtID0gJCgkaXRlbSk7XG5cblx0XHRcdC8vIGNsZWFyIHRoZSBhY3RpdmUgc2VsZWN0aW9uXG5cdFx0XHRpZiAoISRpdGVtLmxlbmd0aCkge1xuXHRcdFx0XHQkKHNlbGYuJGFjdGl2ZUl0ZW1zKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cdFx0XHRcdHNlbGYuJGFjdGl2ZUl0ZW1zID0gW107XG5cdFx0XHRcdGlmIChzZWxmLmlzRm9jdXNlZCkge1xuXHRcdFx0XHRcdHNlbGYuc2hvd0lucHV0KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBtb2RpZnkgc2VsZWN0aW9uXG5cdFx0XHRldmVudE5hbWUgPSBlICYmIGUudHlwZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoZXZlbnROYW1lID09PSAnbW91c2Vkb3duJyAmJiBzZWxmLmlzU2hpZnREb3duICYmIHNlbGYuJGFjdGl2ZUl0ZW1zLmxlbmd0aCkge1xuXHRcdFx0XHQkbGFzdCA9IHNlbGYuJGNvbnRyb2wuY2hpbGRyZW4oJy5hY3RpdmU6bGFzdCcpO1xuXHRcdFx0XHRiZWdpbiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmFwcGx5KHNlbGYuJGNvbnRyb2xbMF0uY2hpbGROb2RlcywgWyRsYXN0WzBdXSk7XG5cdFx0XHRcdGVuZCAgID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuYXBwbHkoc2VsZi4kY29udHJvbFswXS5jaGlsZE5vZGVzLCBbJGl0ZW1bMF1dKTtcblx0XHRcdFx0aWYgKGJlZ2luID4gZW5kKSB7XG5cdFx0XHRcdFx0c3dhcCAgPSBiZWdpbjtcblx0XHRcdFx0XHRiZWdpbiA9IGVuZDtcblx0XHRcdFx0XHRlbmQgICA9IHN3YXA7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yIChpID0gYmVnaW47IGkgPD0gZW5kOyBpKyspIHtcblx0XHRcdFx0XHRpdGVtID0gc2VsZi4kY29udHJvbFswXS5jaGlsZE5vZGVzW2ldO1xuXHRcdFx0XHRcdGlmIChzZWxmLiRhY3RpdmVJdGVtcy5pbmRleE9mKGl0ZW0pID09PSAtMSkge1xuXHRcdFx0XHRcdFx0JChpdGVtKS5hZGRDbGFzcygnYWN0aXZlJyk7XG5cdFx0XHRcdFx0XHRzZWxmLiRhY3RpdmVJdGVtcy5wdXNoKGl0ZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9IGVsc2UgaWYgKChldmVudE5hbWUgPT09ICdtb3VzZWRvd24nICYmIHNlbGYuaXNDdHJsRG93bikgfHwgKGV2ZW50TmFtZSA9PT0gJ2tleWRvd24nICYmIHRoaXMuaXNTaGlmdERvd24pKSB7XG5cdFx0XHRcdGlmICgkaXRlbS5oYXNDbGFzcygnYWN0aXZlJykpIHtcblx0XHRcdFx0XHRpZHggPSBzZWxmLiRhY3RpdmVJdGVtcy5pbmRleE9mKCRpdGVtWzBdKTtcblx0XHRcdFx0XHRzZWxmLiRhY3RpdmVJdGVtcy5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHQkaXRlbS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi4kYWN0aXZlSXRlbXMucHVzaCgkaXRlbS5hZGRDbGFzcygnYWN0aXZlJylbMF0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkKHNlbGYuJGFjdGl2ZUl0ZW1zKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cdFx0XHRcdHNlbGYuJGFjdGl2ZUl0ZW1zID0gWyRpdGVtLmFkZENsYXNzKCdhY3RpdmUnKVswXV07XG5cdFx0XHR9XG5cblx0XHRcdC8vIGVuc3VyZSBjb250cm9sIGhhcyBmb2N1c1xuXHRcdFx0c2VsZi5oaWRlSW5wdXQoKTtcblx0XHRcdGlmICghdGhpcy5pc0ZvY3VzZWQpIHtcblx0XHRcdFx0c2VsZi5mb2N1cygpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBTZXRzIHRoZSBzZWxlY3RlZCBpdGVtIGluIHRoZSBkcm9wZG93biBtZW51XG5cdFx0ICogb2YgYXZhaWxhYmxlIG9wdGlvbnMuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gJG9iamVjdFxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gc2Nyb2xsXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBhbmltYXRlXG5cdFx0ICovXG5cdFx0c2V0QWN0aXZlT3B0aW9uOiBmdW5jdGlvbigkb3B0aW9uLCBzY3JvbGwsIGFuaW1hdGUpIHtcblx0XHRcdHZhciBoZWlnaHRfbWVudSwgaGVpZ2h0X2l0ZW0sIHk7XG5cdFx0XHR2YXIgc2Nyb2xsX3RvcCwgc2Nyb2xsX2JvdHRvbTtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0aWYgKHNlbGYuJGFjdGl2ZU9wdGlvbikgc2VsZi4kYWN0aXZlT3B0aW9uLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcblx0XHRcdHNlbGYuJGFjdGl2ZU9wdGlvbiA9IG51bGw7XG5cblx0XHRcdCRvcHRpb24gPSAkKCRvcHRpb24pO1xuXHRcdFx0aWYgKCEkb3B0aW9uLmxlbmd0aCkgcmV0dXJuO1xuXG5cdFx0XHRzZWxmLiRhY3RpdmVPcHRpb24gPSAkb3B0aW9uLmFkZENsYXNzKCdhY3RpdmUnKTtcblxuXHRcdFx0aWYgKHNjcm9sbCB8fCAhaXNzZXQoc2Nyb2xsKSkge1xuXG5cdFx0XHRcdGhlaWdodF9tZW51ICAgPSBzZWxmLiRkcm9wZG93bl9jb250ZW50LmhlaWdodCgpO1xuXHRcdFx0XHRoZWlnaHRfaXRlbSAgID0gc2VsZi4kYWN0aXZlT3B0aW9uLm91dGVySGVpZ2h0KHRydWUpO1xuXHRcdFx0XHRzY3JvbGwgICAgICAgID0gc2VsZi4kZHJvcGRvd25fY29udGVudC5zY3JvbGxUb3AoKSB8fCAwO1xuXHRcdFx0XHR5ICAgICAgICAgICAgID0gc2VsZi4kYWN0aXZlT3B0aW9uLm9mZnNldCgpLnRvcCAtIHNlbGYuJGRyb3Bkb3duX2NvbnRlbnQub2Zmc2V0KCkudG9wICsgc2Nyb2xsO1xuXHRcdFx0XHRzY3JvbGxfdG9wICAgID0geTtcblx0XHRcdFx0c2Nyb2xsX2JvdHRvbSA9IHkgLSBoZWlnaHRfbWVudSArIGhlaWdodF9pdGVtO1xuXG5cdFx0XHRcdGlmICh5ICsgaGVpZ2h0X2l0ZW0gPiBoZWlnaHRfbWVudSArIHNjcm9sbCkge1xuXHRcdFx0XHRcdHNlbGYuJGRyb3Bkb3duX2NvbnRlbnQuc3RvcCgpLmFuaW1hdGUoe3Njcm9sbFRvcDogc2Nyb2xsX2JvdHRvbX0sIGFuaW1hdGUgPyBzZWxmLnNldHRpbmdzLnNjcm9sbER1cmF0aW9uIDogMCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoeSA8IHNjcm9sbCkge1xuXHRcdFx0XHRcdHNlbGYuJGRyb3Bkb3duX2NvbnRlbnQuc3RvcCgpLmFuaW1hdGUoe3Njcm9sbFRvcDogc2Nyb2xsX3RvcH0sIGFuaW1hdGUgPyBzZWxmLnNldHRpbmdzLnNjcm9sbER1cmF0aW9uIDogMCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBTZWxlY3RzIGFsbCBpdGVtcyAoQ1RSTCArIEEpLlxuXHRcdCAqL1xuXHRcdHNlbGVjdEFsbDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHRpZiAoc2VsZi5zZXR0aW5ncy5tb2RlID09PSAnc2luZ2xlJykgcmV0dXJuO1xuXG5cdFx0XHRzZWxmLiRhY3RpdmVJdGVtcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShzZWxmLiRjb250cm9sLmNoaWxkcmVuKCc6bm90KGlucHV0KScpLmFkZENsYXNzKCdhY3RpdmUnKSk7XG5cdFx0XHRpZiAoc2VsZi4kYWN0aXZlSXRlbXMubGVuZ3RoKSB7XG5cdFx0XHRcdHNlbGYuaGlkZUlucHV0KCk7XG5cdFx0XHRcdHNlbGYuY2xvc2UoKTtcblx0XHRcdH1cblx0XHRcdHNlbGYuZm9jdXMoKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogSGlkZXMgdGhlIGlucHV0IGVsZW1lbnQgb3V0IG9mIHZpZXcsIHdoaWxlXG5cdFx0ICogcmV0YWluaW5nIGl0cyBmb2N1cy5cblx0XHQgKi9cblx0XHRoaWRlSW5wdXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHRzZWxmLnNldFRleHRib3hWYWx1ZSgnJyk7XG5cdFx0XHRzZWxmLiRjb250cm9sX2lucHV0LmNzcyh7b3BhY2l0eTogMCwgcG9zaXRpb246ICdhYnNvbHV0ZScsIGxlZnQ6IHNlbGYucnRsID8gMTAwMDAgOiAtMTAwMDB9KTtcblx0XHRcdHNlbGYuaXNJbnB1dEhpZGRlbiA9IHRydWU7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlc3RvcmVzIGlucHV0IHZpc2liaWxpdHkuXG5cdFx0ICovXG5cdFx0c2hvd0lucHV0OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuJGNvbnRyb2xfaW5wdXQuY3NzKHtvcGFjaXR5OiAxLCBwb3NpdGlvbjogJ3JlbGF0aXZlJywgbGVmdDogMH0pO1xuXHRcdFx0dGhpcy5pc0lucHV0SGlkZGVuID0gZmFsc2U7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEdpdmVzIHRoZSBjb250cm9sIGZvY3VzLlxuXHRcdCAqL1xuXHRcdGZvY3VzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdGlmIChzZWxmLmlzRGlzYWJsZWQpIHJldHVybjtcblxuXHRcdFx0c2VsZi5pZ25vcmVGb2N1cyA9IHRydWU7XG5cdFx0XHRzZWxmLiRjb250cm9sX2lucHV0WzBdLmZvY3VzKCk7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5pZ25vcmVGb2N1cyA9IGZhbHNlO1xuXHRcdFx0XHRzZWxmLm9uRm9jdXMoKTtcblx0XHRcdH0sIDApO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBGb3JjZXMgdGhlIGNvbnRyb2wgb3V0IG9mIGZvY3VzLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtFbGVtZW50fSBkZXN0XG5cdFx0ICovXG5cdFx0Ymx1cjogZnVuY3Rpb24oZGVzdCkge1xuXHRcdFx0dGhpcy4kY29udHJvbF9pbnB1dFswXS5ibHVyKCk7XG5cdFx0XHR0aGlzLm9uQmx1cihudWxsLCBkZXN0KTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgc2NvcmVzIGFuIG9iamVjdFxuXHRcdCAqIHRvIHNob3cgaG93IGdvb2Qgb2YgYSBtYXRjaCBpdCBpcyB0byB0aGVcblx0XHQgKiBwcm92aWRlZCBxdWVyeS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeVxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG5cdFx0ICogQHJldHVybiB7ZnVuY3Rpb259XG5cdFx0ICovXG5cdFx0Z2V0U2NvcmVGdW5jdGlvbjogZnVuY3Rpb24ocXVlcnkpIHtcblx0XHRcdHJldHVybiB0aGlzLnNpZnRlci5nZXRTY29yZUZ1bmN0aW9uKHF1ZXJ5LCB0aGlzLmdldFNlYXJjaE9wdGlvbnMoKSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgc2VhcmNoIG9wdGlvbnMgZm9yIHNpZnRlciAodGhlIHN5c3RlbVxuXHRcdCAqIGZvciBzY29yaW5nIGFuZCBzb3J0aW5nIHJlc3VsdHMpLlxuXHRcdCAqXG5cdFx0ICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYnJpYW5yZWF2aXMvc2lmdGVyLmpzXG5cdFx0ICogQHJldHVybiB7b2JqZWN0fVxuXHRcdCAqL1xuXHRcdGdldFNlYXJjaE9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNldHRpbmdzID0gdGhpcy5zZXR0aW5ncztcblx0XHRcdHZhciBzb3J0ID0gc2V0dGluZ3Muc29ydEZpZWxkO1xuXHRcdFx0aWYgKHR5cGVvZiBzb3J0ID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRzb3J0ID0gW3tmaWVsZDogc29ydH1dO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRmaWVsZHMgICAgICA6IHNldHRpbmdzLnNlYXJjaEZpZWxkLFxuXHRcdFx0XHRjb25qdW5jdGlvbiA6IHNldHRpbmdzLnNlYXJjaENvbmp1bmN0aW9uLFxuXHRcdFx0XHRzb3J0ICAgICAgICA6IHNvcnRcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFNlYXJjaGVzIHRocm91Z2ggYXZhaWxhYmxlIG9wdGlvbnMgYW5kIHJldHVybnNcblx0XHQgKiBhIHNvcnRlZCBhcnJheSBvZiBtYXRjaGVzLlxuXHRcdCAqXG5cdFx0ICogUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZzpcblx0XHQgKlxuXHRcdCAqICAgLSBxdWVyeSB7c3RyaW5nfVxuXHRcdCAqICAgLSB0b2tlbnMge2FycmF5fVxuXHRcdCAqICAgLSB0b3RhbCB7aW50fVxuXHRcdCAqICAgLSBpdGVtcyB7YXJyYXl9XG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlcblx0XHQgKiBAcmV0dXJucyB7b2JqZWN0fVxuXHRcdCAqL1xuXHRcdHNlYXJjaDogZnVuY3Rpb24ocXVlcnkpIHtcblx0XHRcdHZhciBpLCB2YWx1ZSwgc2NvcmUsIHJlc3VsdCwgY2FsY3VsYXRlU2NvcmU7XG5cdFx0XHR2YXIgc2VsZiAgICAgPSB0aGlzO1xuXHRcdFx0dmFyIHNldHRpbmdzID0gc2VsZi5zZXR0aW5ncztcblx0XHRcdHZhciBvcHRpb25zICA9IHRoaXMuZ2V0U2VhcmNoT3B0aW9ucygpO1xuXG5cdFx0XHQvLyB2YWxpZGF0ZSB1c2VyLXByb3ZpZGVkIHJlc3VsdCBzY29yaW5nIGZ1bmN0aW9uXG5cdFx0XHRpZiAoc2V0dGluZ3Muc2NvcmUpIHtcblx0XHRcdFx0Y2FsY3VsYXRlU2NvcmUgPSBzZWxmLnNldHRpbmdzLnNjb3JlLmFwcGx5KHRoaXMsIFtxdWVyeV0pO1xuXHRcdFx0XHRpZiAodHlwZW9mIGNhbGN1bGF0ZVNjb3JlICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdTZWxlY3RpemUgXCJzY29yZVwiIHNldHRpbmcgbXVzdCBiZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcGVyZm9ybSBzZWFyY2hcblx0XHRcdGlmIChxdWVyeSAhPT0gc2VsZi5sYXN0UXVlcnkpIHtcblx0XHRcdFx0c2VsZi5sYXN0UXVlcnkgPSBxdWVyeTtcblx0XHRcdFx0cmVzdWx0ID0gc2VsZi5zaWZ0ZXIuc2VhcmNoKHF1ZXJ5LCAkLmV4dGVuZChvcHRpb25zLCB7c2NvcmU6IGNhbGN1bGF0ZVNjb3JlfSkpO1xuXHRcdFx0XHRzZWxmLmN1cnJlbnRSZXN1bHRzID0gcmVzdWx0O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzdWx0ID0gJC5leHRlbmQodHJ1ZSwge30sIHNlbGYuY3VycmVudFJlc3VsdHMpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBmaWx0ZXIgb3V0IHNlbGVjdGVkIGl0ZW1zXG5cdFx0XHRpZiAoc2V0dGluZ3MuaGlkZVNlbGVjdGVkKSB7XG5cdFx0XHRcdGZvciAoaSA9IHJlc3VsdC5pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0XHRcdGlmIChzZWxmLml0ZW1zLmluZGV4T2YoaGFzaF9rZXkocmVzdWx0Lml0ZW1zW2ldLmlkKSkgIT09IC0xKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQuaXRlbXMuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZWZyZXNoZXMgdGhlIGxpc3Qgb2YgYXZhaWxhYmxlIG9wdGlvbnMgc2hvd25cblx0XHQgKiBpbiB0aGUgYXV0b2NvbXBsZXRlIGRyb3Bkb3duIG1lbnUuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IHRyaWdnZXJEcm9wZG93blxuXHRcdCAqL1xuXHRcdHJlZnJlc2hPcHRpb25zOiBmdW5jdGlvbih0cmlnZ2VyRHJvcGRvd24pIHtcblx0XHRcdHZhciBpLCBqLCBrLCBuLCBncm91cHMsIGdyb3Vwc19vcmRlciwgb3B0aW9uLCBvcHRpb25faHRtbCwgb3B0Z3JvdXAsIG9wdGdyb3VwcywgaHRtbCwgaHRtbF9jaGlsZHJlbiwgaGFzX2NyZWF0ZV9vcHRpb247XG5cdFx0XHR2YXIgJGFjdGl2ZSwgJGFjdGl2ZV9iZWZvcmUsICRjcmVhdGU7XG5cblx0XHRcdGlmICh0eXBlb2YgdHJpZ2dlckRyb3Bkb3duID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHR0cmlnZ2VyRHJvcGRvd24gPSB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgc2VsZiAgICAgICAgICAgICAgPSB0aGlzO1xuXHRcdFx0dmFyIHF1ZXJ5ICAgICAgICAgICAgID0gJC50cmltKHNlbGYuJGNvbnRyb2xfaW5wdXQudmFsKCkpO1xuXHRcdFx0dmFyIHJlc3VsdHMgICAgICAgICAgID0gc2VsZi5zZWFyY2gocXVlcnkpO1xuXHRcdFx0dmFyICRkcm9wZG93bl9jb250ZW50ID0gc2VsZi4kZHJvcGRvd25fY29udGVudDtcblx0XHRcdHZhciBhY3RpdmVfYmVmb3JlICAgICA9IHNlbGYuJGFjdGl2ZU9wdGlvbiAmJiBoYXNoX2tleShzZWxmLiRhY3RpdmVPcHRpb24uYXR0cignZGF0YS12YWx1ZScpKTtcblxuXHRcdFx0Ly8gYnVpbGQgbWFya3VwXG5cdFx0XHRuID0gcmVzdWx0cy5pdGVtcy5sZW5ndGg7XG5cdFx0XHRpZiAodHlwZW9mIHNlbGYuc2V0dGluZ3MubWF4T3B0aW9ucyA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0biA9IE1hdGgubWluKG4sIHNlbGYuc2V0dGluZ3MubWF4T3B0aW9ucyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJlbmRlciBhbmQgZ3JvdXAgYXZhaWxhYmxlIG9wdGlvbnMgaW5kaXZpZHVhbGx5XG5cdFx0XHRncm91cHMgPSB7fTtcblx0XHRcdGdyb3Vwc19vcmRlciA9IFtdO1xuXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRcdG9wdGlvbiAgICAgID0gc2VsZi5vcHRpb25zW3Jlc3VsdHMuaXRlbXNbaV0uaWRdO1xuXHRcdFx0XHRvcHRpb25faHRtbCA9IHNlbGYucmVuZGVyKCdvcHRpb24nLCBvcHRpb24pO1xuXHRcdFx0XHRvcHRncm91cCAgICA9IG9wdGlvbltzZWxmLnNldHRpbmdzLm9wdGdyb3VwRmllbGRdIHx8ICcnO1xuXHRcdFx0XHRvcHRncm91cHMgICA9ICQuaXNBcnJheShvcHRncm91cCkgPyBvcHRncm91cCA6IFtvcHRncm91cF07XG5cblx0XHRcdFx0Zm9yIChqID0gMCwgayA9IG9wdGdyb3VwcyAmJiBvcHRncm91cHMubGVuZ3RoOyBqIDwgazsgaisrKSB7XG5cdFx0XHRcdFx0b3B0Z3JvdXAgPSBvcHRncm91cHNbal07XG5cdFx0XHRcdFx0aWYgKCFzZWxmLm9wdGdyb3Vwcy5oYXNPd25Qcm9wZXJ0eShvcHRncm91cCkpIHtcblx0XHRcdFx0XHRcdG9wdGdyb3VwID0gJyc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICghZ3JvdXBzLmhhc093blByb3BlcnR5KG9wdGdyb3VwKSkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW29wdGdyb3VwXSA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblx0XHRcdFx0XHRcdGdyb3Vwc19vcmRlci5wdXNoKG9wdGdyb3VwKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Z3JvdXBzW29wdGdyb3VwXS5hcHBlbmRDaGlsZChvcHRpb25faHRtbCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gc29ydCBvcHRncm91cHNcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmxvY2tPcHRncm91cE9yZGVyKSB7XG5cdFx0XHRcdGdyb3Vwc19vcmRlci5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdFx0XHR2YXIgYV9vcmRlciA9IHNlbGYub3B0Z3JvdXBzW2FdLiRvcmRlciB8fCAwO1xuXHRcdFx0XHRcdHZhciBiX29yZGVyID0gc2VsZi5vcHRncm91cHNbYl0uJG9yZGVyIHx8IDA7XG5cdFx0XHRcdFx0cmV0dXJuIGFfb3JkZXIgLSBiX29yZGVyO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcmVuZGVyIG9wdGdyb3VwIGhlYWRlcnMgJiBqb2luIGdyb3Vwc1xuXHRcdFx0aHRtbCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblx0XHRcdGZvciAoaSA9IDAsIG4gPSBncm91cHNfb3JkZXIubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRcdG9wdGdyb3VwID0gZ3JvdXBzX29yZGVyW2ldO1xuXHRcdFx0XHRpZiAoc2VsZi5vcHRncm91cHMuaGFzT3duUHJvcGVydHkob3B0Z3JvdXApICYmIGdyb3Vwc1tvcHRncm91cF0uY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdFx0XHQvLyByZW5kZXIgdGhlIG9wdGdyb3VwIGhlYWRlciBhbmQgb3B0aW9ucyB3aXRoaW4gaXQsXG5cdFx0XHRcdFx0Ly8gdGhlbiBwYXNzIGl0IHRvIHRoZSB3cmFwcGVyIHRlbXBsYXRlXG5cdFx0XHRcdFx0aHRtbF9jaGlsZHJlbiA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblx0XHRcdFx0XHRodG1sX2NoaWxkcmVuLmFwcGVuZENoaWxkKHNlbGYucmVuZGVyKCdvcHRncm91cF9oZWFkZXInLCBzZWxmLm9wdGdyb3Vwc1tvcHRncm91cF0pKTtcblx0XHRcdFx0XHRodG1sX2NoaWxkcmVuLmFwcGVuZENoaWxkKGdyb3Vwc1tvcHRncm91cF0pO1xuXG5cdFx0XHRcdFx0aHRtbC5hcHBlbmRDaGlsZChzZWxmLnJlbmRlcignb3B0Z3JvdXAnLCAkLmV4dGVuZCh7fSwgc2VsZi5vcHRncm91cHNbb3B0Z3JvdXBdLCB7XG5cdFx0XHRcdFx0XHRodG1sOiBkb21Ub1N0cmluZyhodG1sX2NoaWxkcmVuKSxcblx0XHRcdFx0XHRcdGRvbTogIGh0bWxfY2hpbGRyZW5cblx0XHRcdFx0XHR9KSkpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGh0bWwuYXBwZW5kQ2hpbGQoZ3JvdXBzW29wdGdyb3VwXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0JGRyb3Bkb3duX2NvbnRlbnQuaHRtbChodG1sKTtcblxuXHRcdFx0Ly8gaGlnaGxpZ2h0IG1hdGNoaW5nIHRlcm1zIGlubGluZVxuXHRcdFx0aWYgKHNlbGYuc2V0dGluZ3MuaGlnaGxpZ2h0ICYmIHJlc3VsdHMucXVlcnkubGVuZ3RoICYmIHJlc3VsdHMudG9rZW5zLmxlbmd0aCkge1xuXHRcdFx0XHQkZHJvcGRvd25fY29udGVudC5yZW1vdmVIaWdobGlnaHQoKTtcblx0XHRcdFx0Zm9yIChpID0gMCwgbiA9IHJlc3VsdHMudG9rZW5zLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHRcdGhpZ2hsaWdodCgkZHJvcGRvd25fY29udGVudCwgcmVzdWx0cy50b2tlbnNbaV0ucmVnZXgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGFkZCBcInNlbGVjdGVkXCIgY2xhc3MgdG8gc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0aWYgKCFzZWxmLnNldHRpbmdzLmhpZGVTZWxlY3RlZCkge1xuXHRcdFx0XHRmb3IgKGkgPSAwLCBuID0gc2VsZi5pdGVtcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0XHRzZWxmLmdldE9wdGlvbihzZWxmLml0ZW1zW2ldKS5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBhZGQgY3JlYXRlIG9wdGlvblxuXHRcdFx0aGFzX2NyZWF0ZV9vcHRpb24gPSBzZWxmLmNhbkNyZWF0ZShxdWVyeSk7XG5cdFx0XHRpZiAoaGFzX2NyZWF0ZV9vcHRpb24pIHtcblx0XHRcdFx0JGRyb3Bkb3duX2NvbnRlbnQucHJlcGVuZChzZWxmLnJlbmRlcignb3B0aW9uX2NyZWF0ZScsIHtpbnB1dDogcXVlcnl9KSk7XG5cdFx0XHRcdCRjcmVhdGUgPSAkKCRkcm9wZG93bl9jb250ZW50WzBdLmNoaWxkTm9kZXNbMF0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBhY3RpdmF0ZVxuXHRcdFx0c2VsZi5oYXNPcHRpb25zID0gcmVzdWx0cy5pdGVtcy5sZW5ndGggPiAwIHx8IGhhc19jcmVhdGVfb3B0aW9uO1xuXHRcdFx0aWYgKHNlbGYuaGFzT3B0aW9ucykge1xuXHRcdFx0XHRpZiAocmVzdWx0cy5pdGVtcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0JGFjdGl2ZV9iZWZvcmUgPSBhY3RpdmVfYmVmb3JlICYmIHNlbGYuZ2V0T3B0aW9uKGFjdGl2ZV9iZWZvcmUpO1xuXHRcdFx0XHRcdGlmICgkYWN0aXZlX2JlZm9yZSAmJiAkYWN0aXZlX2JlZm9yZS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdCRhY3RpdmUgPSAkYWN0aXZlX2JlZm9yZTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHNlbGYuc2V0dGluZ3MubW9kZSA9PT0gJ3NpbmdsZScgJiYgc2VsZi5pdGVtcy5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdCRhY3RpdmUgPSBzZWxmLmdldE9wdGlvbihzZWxmLml0ZW1zWzBdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCEkYWN0aXZlIHx8ICEkYWN0aXZlLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0aWYgKCRjcmVhdGUgJiYgIXNlbGYuc2V0dGluZ3MuYWRkUHJlY2VkZW5jZSkge1xuXHRcdFx0XHRcdFx0XHQkYWN0aXZlID0gc2VsZi5nZXRBZGphY2VudE9wdGlvbigkY3JlYXRlLCAxKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdCRhY3RpdmUgPSAkZHJvcGRvd25fY29udGVudC5maW5kKCdbZGF0YS1zZWxlY3RhYmxlXTpmaXJzdCcpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQkYWN0aXZlID0gJGNyZWF0ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLnNldEFjdGl2ZU9wdGlvbigkYWN0aXZlKTtcblx0XHRcdFx0aWYgKHRyaWdnZXJEcm9wZG93biAmJiAhc2VsZi5pc09wZW4pIHsgc2VsZi5vcGVuKCk7IH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuc2V0QWN0aXZlT3B0aW9uKG51bGwpO1xuXHRcdFx0XHRpZiAodHJpZ2dlckRyb3Bkb3duICYmIHNlbGYuaXNPcGVuKSB7IHNlbGYuY2xvc2UoKTsgfVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBBZGRzIGFuIGF2YWlsYWJsZSBvcHRpb24uIElmIGl0IGFscmVhZHkgZXhpc3RzLFxuXHRcdCAqIG5vdGhpbmcgd2lsbCBoYXBwZW4uIE5vdGU6IHRoaXMgZG9lcyBub3QgcmVmcmVzaFxuXHRcdCAqIHRoZSBvcHRpb25zIGxpc3QgZHJvcGRvd24gKHVzZSBgcmVmcmVzaE9wdGlvbnNgXG5cdFx0ICogZm9yIHRoYXQpLlxuXHRcdCAqXG5cdFx0ICogVXNhZ2U6XG5cdFx0ICpcblx0XHQgKiAgIHRoaXMuYWRkT3B0aW9uKGRhdGEpXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdHxhcnJheX0gZGF0YVxuXHRcdCAqL1xuXHRcdGFkZE9wdGlvbjogZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0dmFyIGksIG4sIHZhbHVlLCBzZWxmID0gdGhpcztcblxuXHRcdFx0aWYgKCQuaXNBcnJheShkYXRhKSkge1xuXHRcdFx0XHRmb3IgKGkgPSAwLCBuID0gZGF0YS5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0XHRzZWxmLmFkZE9wdGlvbihkYXRhW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICh2YWx1ZSA9IHNlbGYucmVnaXN0ZXJPcHRpb24oZGF0YSkpIHtcblx0XHRcdFx0c2VsZi51c2VyT3B0aW9uc1t2YWx1ZV0gPSB0cnVlO1xuXHRcdFx0XHRzZWxmLmxhc3RRdWVyeSA9IG51bGw7XG5cdFx0XHRcdHNlbGYudHJpZ2dlcignb3B0aW9uX2FkZCcsIHZhbHVlLCBkYXRhKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmVnaXN0ZXJzIGFuIG9wdGlvbiB0byB0aGUgcG9vbCBvZiBvcHRpb25zLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IGRhdGFcblx0XHQgKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ31cblx0XHQgKi9cblx0XHRyZWdpc3Rlck9wdGlvbjogZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0dmFyIGtleSA9IGhhc2hfa2V5KGRhdGFbdGhpcy5zZXR0aW5ncy52YWx1ZUZpZWxkXSk7XG5cdFx0XHRpZiAodHlwZW9mIGtleSA9PT0gJ3VuZGVmaW5lZCcgfHwga2V5ID09PSBudWxsIHx8IHRoaXMub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRkYXRhLiRvcmRlciA9IGRhdGEuJG9yZGVyIHx8ICsrdGhpcy5vcmRlcjtcblx0XHRcdHRoaXMub3B0aW9uc1trZXldID0gZGF0YTtcblx0XHRcdHJldHVybiBrZXk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlZ2lzdGVycyBhbiBvcHRpb24gZ3JvdXAgdG8gdGhlIHBvb2wgb2Ygb3B0aW9uIGdyb3Vwcy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXG5cdFx0ICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG5cdFx0ICovXG5cdFx0cmVnaXN0ZXJPcHRpb25Hcm91cDogZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0dmFyIGtleSA9IGhhc2hfa2V5KGRhdGFbdGhpcy5zZXR0aW5ncy5vcHRncm91cFZhbHVlRmllbGRdKTtcblx0XHRcdGlmICgha2V5KSByZXR1cm4gZmFsc2U7XG5cblx0XHRcdGRhdGEuJG9yZGVyID0gZGF0YS4kb3JkZXIgfHwgKyt0aGlzLm9yZGVyO1xuXHRcdFx0dGhpcy5vcHRncm91cHNba2V5XSA9IGRhdGE7XG5cdFx0XHRyZXR1cm4ga2V5O1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZWdpc3RlcnMgYSBuZXcgb3B0Z3JvdXAgZm9yIG9wdGlvbnNcblx0XHQgKiB0byBiZSBidWNrZXRlZCBpbnRvLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IGlkXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IGRhdGFcblx0XHQgKi9cblx0XHRhZGRPcHRpb25Hcm91cDogZnVuY3Rpb24oaWQsIGRhdGEpIHtcblx0XHRcdGRhdGFbdGhpcy5zZXR0aW5ncy5vcHRncm91cFZhbHVlRmllbGRdID0gaWQ7XG5cdFx0XHRpZiAoaWQgPSB0aGlzLnJlZ2lzdGVyT3B0aW9uR3JvdXAoZGF0YSkpIHtcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCdvcHRncm91cF9hZGQnLCBpZCwgZGF0YSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZXMgYW4gZXhpc3Rpbmcgb3B0aW9uIGdyb3VwLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IGlkXG5cdFx0ICovXG5cdFx0cmVtb3ZlT3B0aW9uR3JvdXA6IGZ1bmN0aW9uKGlkKSB7XG5cdFx0XHRpZiAodGhpcy5vcHRncm91cHMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG5cdFx0XHRcdGRlbGV0ZSB0aGlzLm9wdGdyb3Vwc1tpZF07XG5cdFx0XHRcdHRoaXMucmVuZGVyQ2FjaGUgPSB7fTtcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCdvcHRncm91cF9yZW1vdmUnLCBpZCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENsZWFycyBhbGwgZXhpc3Rpbmcgb3B0aW9uIGdyb3Vwcy5cblx0XHQgKi9cblx0XHRjbGVhck9wdGlvbkdyb3VwczogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLm9wdGdyb3VwcyA9IHt9O1xuXHRcdFx0dGhpcy5yZW5kZXJDYWNoZSA9IHt9O1xuXHRcdFx0dGhpcy50cmlnZ2VyKCdvcHRncm91cF9jbGVhcicpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBVcGRhdGVzIGFuIG9wdGlvbiBhdmFpbGFibGUgZm9yIHNlbGVjdGlvbi4gSWZcblx0XHQgKiBpdCBpcyB2aXNpYmxlIGluIHRoZSBzZWxlY3RlZCBpdGVtcyBvciBvcHRpb25zXG5cdFx0ICogZHJvcGRvd24sIGl0IHdpbGwgYmUgcmUtcmVuZGVyZWQgYXV0b21hdGljYWxseS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXG5cdFx0ICovXG5cdFx0dXBkYXRlT3B0aW9uOiBmdW5jdGlvbih2YWx1ZSwgZGF0YSkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0dmFyICRpdGVtLCAkaXRlbV9uZXc7XG5cdFx0XHR2YXIgdmFsdWVfbmV3LCBpbmRleF9pdGVtLCBjYWNoZV9pdGVtcywgY2FjaGVfb3B0aW9ucywgb3JkZXJfb2xkO1xuXG5cdFx0XHR2YWx1ZSAgICAgPSBoYXNoX2tleSh2YWx1ZSk7XG5cdFx0XHR2YWx1ZV9uZXcgPSBoYXNoX2tleShkYXRhW3NlbGYuc2V0dGluZ3MudmFsdWVGaWVsZF0pO1xuXG5cdFx0XHQvLyBzYW5pdHkgY2hlY2tzXG5cdFx0XHRpZiAodmFsdWUgPT09IG51bGwpIHJldHVybjtcblx0XHRcdGlmICghc2VsZi5vcHRpb25zLmhhc093blByb3BlcnR5KHZhbHVlKSkgcmV0dXJuO1xuXHRcdFx0aWYgKHR5cGVvZiB2YWx1ZV9uZXcgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoJ1ZhbHVlIG11c3QgYmUgc2V0IGluIG9wdGlvbiBkYXRhJyk7XG5cblx0XHRcdG9yZGVyX29sZCA9IHNlbGYub3B0aW9uc1t2YWx1ZV0uJG9yZGVyO1xuXG5cdFx0XHQvLyB1cGRhdGUgcmVmZXJlbmNlc1xuXHRcdFx0aWYgKHZhbHVlX25ldyAhPT0gdmFsdWUpIHtcblx0XHRcdFx0ZGVsZXRlIHNlbGYub3B0aW9uc1t2YWx1ZV07XG5cdFx0XHRcdGluZGV4X2l0ZW0gPSBzZWxmLml0ZW1zLmluZGV4T2YodmFsdWUpO1xuXHRcdFx0XHRpZiAoaW5kZXhfaXRlbSAhPT0gLTEpIHtcblx0XHRcdFx0XHRzZWxmLml0ZW1zLnNwbGljZShpbmRleF9pdGVtLCAxLCB2YWx1ZV9uZXcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRkYXRhLiRvcmRlciA9IGRhdGEuJG9yZGVyIHx8IG9yZGVyX29sZDtcblx0XHRcdHNlbGYub3B0aW9uc1t2YWx1ZV9uZXddID0gZGF0YTtcblxuXHRcdFx0Ly8gaW52YWxpZGF0ZSByZW5kZXIgY2FjaGVcblx0XHRcdGNhY2hlX2l0ZW1zID0gc2VsZi5yZW5kZXJDYWNoZVsnaXRlbSddO1xuXHRcdFx0Y2FjaGVfb3B0aW9ucyA9IHNlbGYucmVuZGVyQ2FjaGVbJ29wdGlvbiddO1xuXG5cdFx0XHRpZiAoY2FjaGVfaXRlbXMpIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlX2l0ZW1zW3ZhbHVlXTtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlX2l0ZW1zW3ZhbHVlX25ld107XG5cdFx0XHR9XG5cdFx0XHRpZiAoY2FjaGVfb3B0aW9ucykge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVfb3B0aW9uc1t2YWx1ZV07XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZV9vcHRpb25zW3ZhbHVlX25ld107XG5cdFx0XHR9XG5cblx0XHRcdC8vIHVwZGF0ZSB0aGUgaXRlbSBpZiBpdCdzIHNlbGVjdGVkXG5cdFx0XHRpZiAoc2VsZi5pdGVtcy5pbmRleE9mKHZhbHVlX25ldykgIT09IC0xKSB7XG5cdFx0XHRcdCRpdGVtID0gc2VsZi5nZXRJdGVtKHZhbHVlKTtcblx0XHRcdFx0JGl0ZW1fbmV3ID0gJChzZWxmLnJlbmRlcignaXRlbScsIGRhdGEpKTtcblx0XHRcdFx0aWYgKCRpdGVtLmhhc0NsYXNzKCdhY3RpdmUnKSkgJGl0ZW1fbmV3LmFkZENsYXNzKCdhY3RpdmUnKTtcblx0XHRcdFx0JGl0ZW0ucmVwbGFjZVdpdGgoJGl0ZW1fbmV3KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gaW52YWxpZGF0ZSBsYXN0IHF1ZXJ5IGJlY2F1c2Ugd2UgbWlnaHQgaGF2ZSB1cGRhdGVkIHRoZSBzb3J0RmllbGRcblx0XHRcdHNlbGYubGFzdFF1ZXJ5ID0gbnVsbDtcblxuXHRcdFx0Ly8gdXBkYXRlIGRyb3Bkb3duIGNvbnRlbnRzXG5cdFx0XHRpZiAoc2VsZi5pc09wZW4pIHtcblx0XHRcdFx0c2VsZi5yZWZyZXNoT3B0aW9ucyhmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZXMgYSBzaW5nbGUgb3B0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBzaWxlbnRcblx0XHQgKi9cblx0XHRyZW1vdmVPcHRpb246IGZ1bmN0aW9uKHZhbHVlLCBzaWxlbnQpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHZhbHVlID0gaGFzaF9rZXkodmFsdWUpO1xuXG5cdFx0XHR2YXIgY2FjaGVfaXRlbXMgPSBzZWxmLnJlbmRlckNhY2hlWydpdGVtJ107XG5cdFx0XHR2YXIgY2FjaGVfb3B0aW9ucyA9IHNlbGYucmVuZGVyQ2FjaGVbJ29wdGlvbiddO1xuXHRcdFx0aWYgKGNhY2hlX2l0ZW1zKSBkZWxldGUgY2FjaGVfaXRlbXNbdmFsdWVdO1xuXHRcdFx0aWYgKGNhY2hlX29wdGlvbnMpIGRlbGV0ZSBjYWNoZV9vcHRpb25zW3ZhbHVlXTtcblxuXHRcdFx0ZGVsZXRlIHNlbGYudXNlck9wdGlvbnNbdmFsdWVdO1xuXHRcdFx0ZGVsZXRlIHNlbGYub3B0aW9uc1t2YWx1ZV07XG5cdFx0XHRzZWxmLmxhc3RRdWVyeSA9IG51bGw7XG5cdFx0XHRzZWxmLnRyaWdnZXIoJ29wdGlvbl9yZW1vdmUnLCB2YWx1ZSk7XG5cdFx0XHRzZWxmLnJlbW92ZUl0ZW0odmFsdWUsIHNpbGVudCk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENsZWFycyBhbGwgb3B0aW9ucy5cblx0XHQgKi9cblx0XHRjbGVhck9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHRzZWxmLmxvYWRlZFNlYXJjaGVzID0ge307XG5cdFx0XHRzZWxmLnVzZXJPcHRpb25zID0ge307XG5cdFx0XHRzZWxmLnJlbmRlckNhY2hlID0ge307XG5cdFx0XHRzZWxmLm9wdGlvbnMgPSBzZWxmLnNpZnRlci5pdGVtcyA9IHt9O1xuXHRcdFx0c2VsZi5sYXN0UXVlcnkgPSBudWxsO1xuXHRcdFx0c2VsZi50cmlnZ2VyKCdvcHRpb25fY2xlYXInKTtcblx0XHRcdHNlbGYuY2xlYXIoKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgalF1ZXJ5IGVsZW1lbnQgb2YgdGhlIG9wdGlvblxuXHRcdCAqIG1hdGNoaW5nIHRoZSBnaXZlbiB2YWx1ZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuXHRcdCAqIEByZXR1cm5zIHtvYmplY3R9XG5cdFx0ICovXG5cdFx0Z2V0T3B0aW9uOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0RWxlbWVudFdpdGhWYWx1ZSh2YWx1ZSwgdGhpcy4kZHJvcGRvd25fY29udGVudC5maW5kKCdbZGF0YS1zZWxlY3RhYmxlXScpKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgalF1ZXJ5IGVsZW1lbnQgb2YgdGhlIG5leHQgb3Jcblx0XHQgKiBwcmV2aW91cyBzZWxlY3RhYmxlIG9wdGlvbi5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSAkb3B0aW9uXG5cdFx0ICogQHBhcmFtIHtpbnR9IGRpcmVjdGlvbiAgY2FuIGJlIDEgZm9yIG5leHQgb3IgLTEgZm9yIHByZXZpb3VzXG5cdFx0ICogQHJldHVybiB7b2JqZWN0fVxuXHRcdCAqL1xuXHRcdGdldEFkamFjZW50T3B0aW9uOiBmdW5jdGlvbigkb3B0aW9uLCBkaXJlY3Rpb24pIHtcblx0XHRcdHZhciAkb3B0aW9ucyA9IHRoaXMuJGRyb3Bkb3duLmZpbmQoJ1tkYXRhLXNlbGVjdGFibGVdJyk7XG5cdFx0XHR2YXIgaW5kZXggICAgPSAkb3B0aW9ucy5pbmRleCgkb3B0aW9uKSArIGRpcmVjdGlvbjtcblxuXHRcdFx0cmV0dXJuIGluZGV4ID49IDAgJiYgaW5kZXggPCAkb3B0aW9ucy5sZW5ndGggPyAkb3B0aW9ucy5lcShpbmRleCkgOiAkKCk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEZpbmRzIHRoZSBmaXJzdCBlbGVtZW50IHdpdGggYSBcImRhdGEtdmFsdWVcIiBhdHRyaWJ1dGVcblx0XHQgKiB0aGF0IG1hdGNoZXMgdGhlIGdpdmVuIHZhbHVlLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHttaXhlZH0gdmFsdWVcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gJGVsc1xuXHRcdCAqIEByZXR1cm4ge29iamVjdH1cblx0XHQgKi9cblx0XHRnZXRFbGVtZW50V2l0aFZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgJGVscykge1xuXHRcdFx0dmFsdWUgPSBoYXNoX2tleSh2YWx1ZSk7XG5cblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlICE9PSBudWxsKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBuID0gJGVscy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0XHRpZiAoJGVsc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSA9PT0gdmFsdWUpIHtcblx0XHRcdFx0XHRcdHJldHVybiAkKCRlbHNbaV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gJCgpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBqUXVlcnkgZWxlbWVudCBvZiB0aGUgaXRlbVxuXHRcdCAqIG1hdGNoaW5nIHRoZSBnaXZlbiB2YWx1ZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuXHRcdCAqIEByZXR1cm5zIHtvYmplY3R9XG5cdFx0ICovXG5cdFx0Z2V0SXRlbTogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldEVsZW1lbnRXaXRoVmFsdWUodmFsdWUsIHRoaXMuJGNvbnRyb2wuY2hpbGRyZW4oKSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFwiU2VsZWN0c1wiIG11bHRpcGxlIGl0ZW1zIGF0IG9uY2UuIEFkZHMgdGhlbSB0byB0aGUgbGlzdFxuXHRcdCAqIGF0IHRoZSBjdXJyZW50IGNhcmV0IHBvc2l0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBzaWxlbnRcblx0XHQgKi9cblx0XHRhZGRJdGVtczogZnVuY3Rpb24odmFsdWVzLCBzaWxlbnQpIHtcblx0XHRcdHZhciBpdGVtcyA9ICQuaXNBcnJheSh2YWx1ZXMpID8gdmFsdWVzIDogW3ZhbHVlc107XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHR0aGlzLmlzUGVuZGluZyA9IChpIDwgbiAtIDEpO1xuXHRcdFx0XHR0aGlzLmFkZEl0ZW0oaXRlbXNbaV0sIHNpbGVudCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFwiU2VsZWN0c1wiIGFuIGl0ZW0uIEFkZHMgaXQgdG8gdGhlIGxpc3Rcblx0XHQgKiBhdCB0aGUgY3VycmVudCBjYXJldCBwb3NpdGlvbi5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gc2lsZW50XG5cdFx0ICovXG5cdFx0YWRkSXRlbTogZnVuY3Rpb24odmFsdWUsIHNpbGVudCkge1xuXHRcdFx0dmFyIGV2ZW50cyA9IHNpbGVudCA/IFtdIDogWydjaGFuZ2UnXTtcblxuXHRcdFx0ZGVib3VuY2VfZXZlbnRzKHRoaXMsIGV2ZW50cywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciAkaXRlbSwgJG9wdGlvbiwgJG9wdGlvbnM7XG5cdFx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdFx0dmFyIGlucHV0TW9kZSA9IHNlbGYuc2V0dGluZ3MubW9kZTtcblx0XHRcdFx0dmFyIGksIGFjdGl2ZSwgdmFsdWVfbmV4dCwgd2FzRnVsbDtcblx0XHRcdFx0dmFsdWUgPSBoYXNoX2tleSh2YWx1ZSk7XG5cblx0XHRcdFx0aWYgKHNlbGYuaXRlbXMuaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG5cdFx0XHRcdFx0aWYgKGlucHV0TW9kZSA9PT0gJ3NpbmdsZScpIHNlbGYuY2xvc2UoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIXNlbGYub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHJldHVybjtcblx0XHRcdFx0aWYgKGlucHV0TW9kZSA9PT0gJ3NpbmdsZScpIHNlbGYuY2xlYXIoc2lsZW50KTtcblx0XHRcdFx0aWYgKGlucHV0TW9kZSA9PT0gJ211bHRpJyAmJiBzZWxmLmlzRnVsbCgpKSByZXR1cm47XG5cblx0XHRcdFx0JGl0ZW0gPSAkKHNlbGYucmVuZGVyKCdpdGVtJywgc2VsZi5vcHRpb25zW3ZhbHVlXSkpO1xuXHRcdFx0XHR3YXNGdWxsID0gc2VsZi5pc0Z1bGwoKTtcblx0XHRcdFx0c2VsZi5pdGVtcy5zcGxpY2Uoc2VsZi5jYXJldFBvcywgMCwgdmFsdWUpO1xuXHRcdFx0XHRzZWxmLmluc2VydEF0Q2FyZXQoJGl0ZW0pO1xuXHRcdFx0XHRpZiAoIXNlbGYuaXNQZW5kaW5nIHx8ICghd2FzRnVsbCAmJiBzZWxmLmlzRnVsbCgpKSkge1xuXHRcdFx0XHRcdHNlbGYucmVmcmVzaFN0YXRlKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoc2VsZi5pc1NldHVwKSB7XG5cdFx0XHRcdFx0JG9wdGlvbnMgPSBzZWxmLiRkcm9wZG93bl9jb250ZW50LmZpbmQoJ1tkYXRhLXNlbGVjdGFibGVdJyk7XG5cblx0XHRcdFx0XHQvLyB1cGRhdGUgbWVudSAvIHJlbW92ZSB0aGUgb3B0aW9uIChpZiB0aGlzIGlzIG5vdCBvbmUgaXRlbSBiZWluZyBhZGRlZCBhcyBwYXJ0IG9mIHNlcmllcylcblx0XHRcdFx0XHRpZiAoIXNlbGYuaXNQZW5kaW5nKSB7XG5cdFx0XHRcdFx0XHQkb3B0aW9uID0gc2VsZi5nZXRPcHRpb24odmFsdWUpO1xuXHRcdFx0XHRcdFx0dmFsdWVfbmV4dCA9IHNlbGYuZ2V0QWRqYWNlbnRPcHRpb24oJG9wdGlvbiwgMSkuYXR0cignZGF0YS12YWx1ZScpO1xuXHRcdFx0XHRcdFx0c2VsZi5yZWZyZXNoT3B0aW9ucyhzZWxmLmlzRm9jdXNlZCAmJiBpbnB1dE1vZGUgIT09ICdzaW5nbGUnKTtcblx0XHRcdFx0XHRcdGlmICh2YWx1ZV9uZXh0KSB7XG5cdFx0XHRcdFx0XHRcdHNlbGYuc2V0QWN0aXZlT3B0aW9uKHNlbGYuZ2V0T3B0aW9uKHZhbHVlX25leHQpKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBoaWRlIHRoZSBtZW51IGlmIHRoZSBtYXhpbXVtIG51bWJlciBvZiBpdGVtcyBoYXZlIGJlZW4gc2VsZWN0ZWQgb3Igbm8gb3B0aW9ucyBhcmUgbGVmdFxuXHRcdFx0XHRcdGlmICghJG9wdGlvbnMubGVuZ3RoIHx8IHNlbGYuaXNGdWxsKCkpIHtcblx0XHRcdFx0XHRcdHNlbGYuY2xvc2UoKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5wb3NpdGlvbkRyb3Bkb3duKCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c2VsZi51cGRhdGVQbGFjZWhvbGRlcigpO1xuXHRcdFx0XHRcdHNlbGYudHJpZ2dlcignaXRlbV9hZGQnLCB2YWx1ZSwgJGl0ZW0pO1xuXHRcdFx0XHRcdHNlbGYudXBkYXRlT3JpZ2luYWxJbnB1dCh7c2lsZW50OiBzaWxlbnR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZXMgdGhlIHNlbGVjdGVkIGl0ZW0gbWF0Y2hpbmdcblx0XHQgKiB0aGUgcHJvdmlkZWQgdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcblx0XHQgKi9cblx0XHRyZW1vdmVJdGVtOiBmdW5jdGlvbih2YWx1ZSwgc2lsZW50KSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHR2YXIgJGl0ZW0sIGksIGlkeDtcblxuXHRcdFx0JGl0ZW0gPSAodmFsdWUgaW5zdGFuY2VvZiAkKSA/IHZhbHVlIDogc2VsZi5nZXRJdGVtKHZhbHVlKTtcblx0XHRcdHZhbHVlID0gaGFzaF9rZXkoJGl0ZW0uYXR0cignZGF0YS12YWx1ZScpKTtcblx0XHRcdGkgPSBzZWxmLml0ZW1zLmluZGV4T2YodmFsdWUpO1xuXG5cdFx0XHRpZiAoaSAhPT0gLTEpIHtcblx0XHRcdFx0JGl0ZW0ucmVtb3ZlKCk7XG5cdFx0XHRcdGlmICgkaXRlbS5oYXNDbGFzcygnYWN0aXZlJykpIHtcblx0XHRcdFx0XHRpZHggPSBzZWxmLiRhY3RpdmVJdGVtcy5pbmRleE9mKCRpdGVtWzBdKTtcblx0XHRcdFx0XHRzZWxmLiRhY3RpdmVJdGVtcy5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNlbGYuaXRlbXMuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRzZWxmLmxhc3RRdWVyeSA9IG51bGw7XG5cdFx0XHRcdGlmICghc2VsZi5zZXR0aW5ncy5wZXJzaXN0ICYmIHNlbGYudXNlck9wdGlvbnMuaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG5cdFx0XHRcdFx0c2VsZi5yZW1vdmVPcHRpb24odmFsdWUsIHNpbGVudCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoaSA8IHNlbGYuY2FyZXRQb3MpIHtcblx0XHRcdFx0XHRzZWxmLnNldENhcmV0KHNlbGYuY2FyZXRQb3MgLSAxKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNlbGYucmVmcmVzaFN0YXRlKCk7XG5cdFx0XHRcdHNlbGYudXBkYXRlUGxhY2Vob2xkZXIoKTtcblx0XHRcdFx0c2VsZi51cGRhdGVPcmlnaW5hbElucHV0KHtzaWxlbnQ6IHNpbGVudH0pO1xuXHRcdFx0XHRzZWxmLnBvc2l0aW9uRHJvcGRvd24oKTtcblx0XHRcdFx0c2VsZi50cmlnZ2VyKCdpdGVtX3JlbW92ZScsIHZhbHVlLCAkaXRlbSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEludm9rZXMgdGhlIGBjcmVhdGVgIG1ldGhvZCBwcm92aWRlZCBpbiB0aGVcblx0XHQgKiBzZWxlY3RpemUgb3B0aW9ucyB0aGF0IHNob3VsZCBwcm92aWRlIHRoZSBkYXRhXG5cdFx0ICogZm9yIHRoZSBuZXcgaXRlbSwgZ2l2ZW4gdGhlIHVzZXIgaW5wdXQuXG5cdFx0ICpcblx0XHQgKiBPbmNlIHRoaXMgY29tcGxldGVzLCBpdCB3aWxsIGJlIGFkZGVkXG5cdFx0ICogdG8gdGhlIGl0ZW0gbGlzdC5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3RyaWdnZXJEcm9wZG93bl1cblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdXG5cdFx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHRjcmVhdGVJdGVtOiBmdW5jdGlvbihpbnB1dCwgdHJpZ2dlckRyb3Bkb3duKSB7XG5cdFx0XHR2YXIgc2VsZiAgPSB0aGlzO1xuXHRcdFx0dmFyIGNhcmV0ID0gc2VsZi5jYXJldFBvcztcblx0XHRcdGlucHV0ID0gaW5wdXQgfHwgJC50cmltKHNlbGYuJGNvbnRyb2xfaW5wdXQudmFsKCkgfHwgJycpO1xuXG5cdFx0XHR2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuXHRcdFx0aWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2sgPSBmdW5jdGlvbigpIHt9O1xuXG5cdFx0XHRpZiAodHlwZW9mIHRyaWdnZXJEcm9wZG93biAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0XHRcdHRyaWdnZXJEcm9wZG93biA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghc2VsZi5jYW5DcmVhdGUoaW5wdXQpKSB7XG5cdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZi5sb2NrKCk7XG5cblx0XHRcdHZhciBzZXR1cCA9ICh0eXBlb2Ygc2VsZi5zZXR0aW5ncy5jcmVhdGUgPT09ICdmdW5jdGlvbicpID8gdGhpcy5zZXR0aW5ncy5jcmVhdGUgOiBmdW5jdGlvbihpbnB1dCkge1xuXHRcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXHRcdFx0XHRkYXRhW3NlbGYuc2V0dGluZ3MubGFiZWxGaWVsZF0gPSBpbnB1dDtcblx0XHRcdFx0ZGF0YVtzZWxmLnNldHRpbmdzLnZhbHVlRmllbGRdID0gaW5wdXQ7XG5cdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0fTtcblxuXHRcdFx0dmFyIGNyZWF0ZSA9IG9uY2UoZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0XHRzZWxmLnVubG9jaygpO1xuXG5cdFx0XHRcdGlmICghZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpIHJldHVybiBjYWxsYmFjaygpO1xuXHRcdFx0XHR2YXIgdmFsdWUgPSBoYXNoX2tleShkYXRhW3NlbGYuc2V0dGluZ3MudmFsdWVGaWVsZF0pO1xuXHRcdFx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykgcmV0dXJuIGNhbGxiYWNrKCk7XG5cblx0XHRcdFx0c2VsZi5zZXRUZXh0Ym94VmFsdWUoJycpO1xuXHRcdFx0XHRzZWxmLmFkZE9wdGlvbihkYXRhKTtcblx0XHRcdFx0c2VsZi5zZXRDYXJldChjYXJldCk7XG5cdFx0XHRcdHNlbGYuYWRkSXRlbSh2YWx1ZSk7XG5cdFx0XHRcdHNlbGYucmVmcmVzaE9wdGlvbnModHJpZ2dlckRyb3Bkb3duICYmIHNlbGYuc2V0dGluZ3MubW9kZSAhPT0gJ3NpbmdsZScpO1xuXHRcdFx0XHRjYWxsYmFjayhkYXRhKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR2YXIgb3V0cHV0ID0gc2V0dXAuYXBwbHkodGhpcywgW2lucHV0LCBjcmVhdGVdKTtcblx0XHRcdGlmICh0eXBlb2Ygb3V0cHV0ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRjcmVhdGUob3V0cHV0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlLXJlbmRlcnMgdGhlIHNlbGVjdGVkIGl0ZW0gbGlzdHMuXG5cdFx0ICovXG5cdFx0cmVmcmVzaEl0ZW1zOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMubGFzdFF1ZXJ5ID0gbnVsbDtcblxuXHRcdFx0aWYgKHRoaXMuaXNTZXR1cCkge1xuXHRcdFx0XHR0aGlzLmFkZEl0ZW0odGhpcy5pdGVtcyk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMucmVmcmVzaFN0YXRlKCk7XG5cdFx0XHR0aGlzLnVwZGF0ZU9yaWdpbmFsSW5wdXQoKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogVXBkYXRlcyBhbGwgc3RhdGUtZGVwZW5kZW50IGF0dHJpYnV0ZXNcblx0XHQgKiBhbmQgQ1NTIGNsYXNzZXMuXG5cdFx0ICovXG5cdFx0cmVmcmVzaFN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucmVmcmVzaFZhbGlkaXR5U3RhdGUoKTtcblx0XHRcdHRoaXMucmVmcmVzaENsYXNzZXMoKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogVXBkYXRlIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBvZiBib3RoIGlucHV0IGFuZCBjb250cm9sIGlucHV0LlxuXHRcdCAqXG5cdFx0ICogVGhlIGByZXF1aXJlZGAgcHJvcGVydHkgbmVlZHMgdG8gYmUgYWN0aXZhdGVkIG9uIHRoZSBjb250cm9sIGlucHV0XG5cdFx0ICogZm9yIHRoZSBlcnJvciB0byBiZSBkaXNwbGF5ZWQgYXQgdGhlIHJpZ2h0IHBsYWNlLiBgcmVxdWlyZWRgIGFsc29cblx0XHQgKiBuZWVkcyB0byBiZSB0ZW1wb3JhcmlseSBkZWFjdGl2YXRlZCBvbiB0aGUgaW5wdXQgc2luY2UgdGhlIGlucHV0IGlzXG5cdFx0ICogaGlkZGVuIGFuZCBjYW4ndCBzaG93IGVycm9ycy5cblx0XHQgKi9cblx0XHRyZWZyZXNoVmFsaWRpdHlTdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIXRoaXMuaXNSZXF1aXJlZCkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR2YXIgaW52YWxpZCA9ICF0aGlzLml0ZW1zLmxlbmd0aDtcblxuXHRcdFx0dGhpcy5pc0ludmFsaWQgPSBpbnZhbGlkO1xuXHRcdFx0dGhpcy4kY29udHJvbF9pbnB1dC5wcm9wKCdyZXF1aXJlZCcsIGludmFsaWQpO1xuXHRcdFx0dGhpcy4kaW5wdXQucHJvcCgncmVxdWlyZWQnLCAhaW52YWxpZCk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFVwZGF0ZXMgYWxsIHN0YXRlLWRlcGVuZGVudCBDU1MgY2xhc3Nlcy5cblx0XHQgKi9cblx0XHRyZWZyZXNoQ2xhc3NlczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiAgICAgPSB0aGlzO1xuXHRcdFx0dmFyIGlzRnVsbCAgID0gc2VsZi5pc0Z1bGwoKTtcblx0XHRcdHZhciBpc0xvY2tlZCA9IHNlbGYuaXNMb2NrZWQ7XG5cblx0XHRcdHNlbGYuJHdyYXBwZXJcblx0XHRcdFx0LnRvZ2dsZUNsYXNzKCdydGwnLCBzZWxmLnJ0bCk7XG5cblx0XHRcdHNlbGYuJGNvbnRyb2xcblx0XHRcdFx0LnRvZ2dsZUNsYXNzKCdmb2N1cycsIHNlbGYuaXNGb2N1c2VkKVxuXHRcdFx0XHQudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgc2VsZi5pc0Rpc2FibGVkKVxuXHRcdFx0XHQudG9nZ2xlQ2xhc3MoJ3JlcXVpcmVkJywgc2VsZi5pc1JlcXVpcmVkKVxuXHRcdFx0XHQudG9nZ2xlQ2xhc3MoJ2ludmFsaWQnLCBzZWxmLmlzSW52YWxpZClcblx0XHRcdFx0LnRvZ2dsZUNsYXNzKCdsb2NrZWQnLCBpc0xvY2tlZClcblx0XHRcdFx0LnRvZ2dsZUNsYXNzKCdmdWxsJywgaXNGdWxsKS50b2dnbGVDbGFzcygnbm90LWZ1bGwnLCAhaXNGdWxsKVxuXHRcdFx0XHQudG9nZ2xlQ2xhc3MoJ2lucHV0LWFjdGl2ZScsIHNlbGYuaXNGb2N1c2VkICYmICFzZWxmLmlzSW5wdXRIaWRkZW4pXG5cdFx0XHRcdC50b2dnbGVDbGFzcygnZHJvcGRvd24tYWN0aXZlJywgc2VsZi5pc09wZW4pXG5cdFx0XHRcdC50b2dnbGVDbGFzcygnaGFzLW9wdGlvbnMnLCAhJC5pc0VtcHR5T2JqZWN0KHNlbGYub3B0aW9ucykpXG5cdFx0XHRcdC50b2dnbGVDbGFzcygnaGFzLWl0ZW1zJywgc2VsZi5pdGVtcy5sZW5ndGggPiAwKTtcblxuXHRcdFx0c2VsZi4kY29udHJvbF9pbnB1dC5kYXRhKCdncm93JywgIWlzRnVsbCAmJiAhaXNMb2NrZWQpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IG1vcmUgaXRlbXMgY2FuIGJlIGFkZGVkXG5cdFx0ICogdG8gdGhlIGNvbnRyb2wgd2l0aG91dCBleGNlZWRpbmcgdGhlIHVzZXItZGVmaW5lZCBtYXhpbXVtLlxuXHRcdCAqXG5cdFx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdFx0ICovXG5cdFx0aXNGdWxsOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLnNldHRpbmdzLm1heEl0ZW1zICE9PSBudWxsICYmIHRoaXMuaXRlbXMubGVuZ3RoID49IHRoaXMuc2V0dGluZ3MubWF4SXRlbXM7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlZnJlc2hlcyB0aGUgb3JpZ2luYWwgPHNlbGVjdD4gb3IgPGlucHV0PlxuXHRcdCAqIGVsZW1lbnQgdG8gcmVmbGVjdCB0aGUgY3VycmVudCBzdGF0ZS5cblx0XHQgKi9cblx0XHR1cGRhdGVPcmlnaW5hbElucHV0OiBmdW5jdGlvbihvcHRzKSB7XG5cdFx0XHR2YXIgaSwgbiwgb3B0aW9ucywgbGFiZWwsIHNlbGYgPSB0aGlzO1xuXHRcdFx0b3B0cyA9IG9wdHMgfHwge307XG5cblx0XHRcdGlmIChzZWxmLnRhZ1R5cGUgPT09IFRBR19TRUxFQ1QpIHtcblx0XHRcdFx0b3B0aW9ucyA9IFtdO1xuXHRcdFx0XHRmb3IgKGkgPSAwLCBuID0gc2VsZi5pdGVtcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0XHRsYWJlbCA9IHNlbGYub3B0aW9uc1tzZWxmLml0ZW1zW2ldXVtzZWxmLnNldHRpbmdzLmxhYmVsRmllbGRdIHx8ICcnO1xuXHRcdFx0XHRcdG9wdGlvbnMucHVzaCgnPG9wdGlvbiB2YWx1ZT1cIicgKyBlc2NhcGVfaHRtbChzZWxmLml0ZW1zW2ldKSArICdcIiBzZWxlY3RlZD1cInNlbGVjdGVkXCI+JyArIGVzY2FwZV9odG1sKGxhYmVsKSArICc8L29wdGlvbj4nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIW9wdGlvbnMubGVuZ3RoICYmICF0aGlzLiRpbnB1dC5hdHRyKCdtdWx0aXBsZScpKSB7XG5cdFx0XHRcdFx0b3B0aW9ucy5wdXNoKCc8b3B0aW9uIHZhbHVlPVwiXCIgc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiPjwvb3B0aW9uPicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuJGlucHV0Lmh0bWwob3B0aW9ucy5qb2luKCcnKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLiRpbnB1dC52YWwoc2VsZi5nZXRWYWx1ZSgpKTtcblx0XHRcdFx0c2VsZi4kaW5wdXQuYXR0cigndmFsdWUnLHNlbGYuJGlucHV0LnZhbCgpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHNlbGYuaXNTZXR1cCkge1xuXHRcdFx0XHRpZiAoIW9wdHMuc2lsZW50KSB7XG5cdFx0XHRcdFx0c2VsZi50cmlnZ2VyKCdjaGFuZ2UnLCBzZWxmLiRpbnB1dC52YWwoKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogU2hvd3MvaGlkZSB0aGUgaW5wdXQgcGxhY2Vob2xkZXIgZGVwZW5kaW5nXG5cdFx0ICogb24gaWYgdGhlcmUgaXRlbXMgaW4gdGhlIGxpc3QgYWxyZWFkeS5cblx0XHQgKi9cblx0XHR1cGRhdGVQbGFjZWhvbGRlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIXRoaXMuc2V0dGluZ3MucGxhY2Vob2xkZXIpIHJldHVybjtcblx0XHRcdHZhciAkaW5wdXQgPSB0aGlzLiRjb250cm9sX2lucHV0O1xuXG5cdFx0XHRpZiAodGhpcy5pdGVtcy5sZW5ndGgpIHtcblx0XHRcdFx0JGlucHV0LnJlbW92ZUF0dHIoJ3BsYWNlaG9sZGVyJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkaW5wdXQuYXR0cigncGxhY2Vob2xkZXInLCB0aGlzLnNldHRpbmdzLnBsYWNlaG9sZGVyKTtcblx0XHRcdH1cblx0XHRcdCRpbnB1dC50cmlnZ2VySGFuZGxlcigndXBkYXRlJywge2ZvcmNlOiB0cnVlfSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFNob3dzIHRoZSBhdXRvY29tcGxldGUgZHJvcGRvd24gY29udGFpbmluZ1xuXHRcdCAqIHRoZSBhdmFpbGFibGUgb3B0aW9ucy5cblx0XHQgKi9cblx0XHRvcGVuOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0aWYgKHNlbGYuaXNMb2NrZWQgfHwgc2VsZi5pc09wZW4gfHwgKHNlbGYuc2V0dGluZ3MubW9kZSA9PT0gJ211bHRpJyAmJiBzZWxmLmlzRnVsbCgpKSkgcmV0dXJuO1xuXHRcdFx0c2VsZi5mb2N1cygpO1xuXHRcdFx0c2VsZi5pc09wZW4gPSB0cnVlO1xuXHRcdFx0c2VsZi5yZWZyZXNoU3RhdGUoKTtcblx0XHRcdHNlbGYuJGRyb3Bkb3duLmNzcyh7dmlzaWJpbGl0eTogJ2hpZGRlbicsIGRpc3BsYXk6ICdibG9jayd9KTtcblx0XHRcdHNlbGYucG9zaXRpb25Ecm9wZG93bigpO1xuXHRcdFx0c2VsZi4kZHJvcGRvd24uY3NzKHt2aXNpYmlsaXR5OiAndmlzaWJsZSd9KTtcblx0XHRcdHNlbGYudHJpZ2dlcignZHJvcGRvd25fb3BlbicsIHNlbGYuJGRyb3Bkb3duKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQ2xvc2VzIHRoZSBhdXRvY29tcGxldGUgZHJvcGRvd24gbWVudS5cblx0XHQgKi9cblx0XHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHR2YXIgdHJpZ2dlciA9IHNlbGYuaXNPcGVuO1xuXG5cdFx0XHRpZiAoc2VsZi5zZXR0aW5ncy5tb2RlID09PSAnc2luZ2xlJyAmJiBzZWxmLml0ZW1zLmxlbmd0aCkge1xuXHRcdFx0XHRzZWxmLmhpZGVJbnB1dCgpO1xuXHRcdFx0XHRzZWxmLiRjb250cm9sX2lucHV0LmJsdXIoKTsgLy8gY2xvc2Uga2V5Ym9hcmQgb24gaU9TXG5cdFx0XHR9XG5cblx0XHRcdHNlbGYuaXNPcGVuID0gZmFsc2U7XG5cdFx0XHRzZWxmLiRkcm9wZG93bi5oaWRlKCk7XG5cdFx0XHRzZWxmLnNldEFjdGl2ZU9wdGlvbihudWxsKTtcblx0XHRcdHNlbGYucmVmcmVzaFN0YXRlKCk7XG5cblx0XHRcdGlmICh0cmlnZ2VyKSBzZWxmLnRyaWdnZXIoJ2Ryb3Bkb3duX2Nsb3NlJywgc2VsZi4kZHJvcGRvd24pO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBDYWxjdWxhdGVzIGFuZCBhcHBsaWVzIHRoZSBhcHByb3ByaWF0ZVxuXHRcdCAqIHBvc2l0aW9uIG9mIHRoZSBkcm9wZG93bi5cblx0XHQgKi9cblx0XHRwb3NpdGlvbkRyb3Bkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciAkY29udHJvbCA9IHRoaXMuJGNvbnRyb2w7XG5cdFx0XHR2YXIgb2Zmc2V0ID0gdGhpcy5zZXR0aW5ncy5kcm9wZG93blBhcmVudCA9PT0gJ2JvZHknID8gJGNvbnRyb2wub2Zmc2V0KCkgOiAkY29udHJvbC5wb3NpdGlvbigpO1xuXHRcdFx0b2Zmc2V0LnRvcCArPSAkY29udHJvbC5vdXRlckhlaWdodCh0cnVlKTtcblxuXHRcdFx0dGhpcy4kZHJvcGRvd24uY3NzKHtcblx0XHRcdFx0d2lkdGggOiAkY29udHJvbC5vdXRlcldpZHRoKCksXG5cdFx0XHRcdHRvcCAgIDogb2Zmc2V0LnRvcCxcblx0XHRcdFx0bGVmdCAgOiBvZmZzZXQubGVmdFxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlc2V0cyAvIGNsZWFycyBhbGwgc2VsZWN0ZWQgaXRlbXNcblx0XHQgKiBmcm9tIHRoZSBjb250cm9sLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBzaWxlbnRcblx0XHQgKi9cblx0XHRjbGVhcjogZnVuY3Rpb24oc2lsZW50KSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRcdGlmICghc2VsZi5pdGVtcy5sZW5ndGgpIHJldHVybjtcblx0XHRcdHNlbGYuJGNvbnRyb2wuY2hpbGRyZW4oJzpub3QoaW5wdXQpJykucmVtb3ZlKCk7XG5cdFx0XHRzZWxmLml0ZW1zID0gW107XG5cdFx0XHRzZWxmLmxhc3RRdWVyeSA9IG51bGw7XG5cdFx0XHRzZWxmLnNldENhcmV0KDApO1xuXHRcdFx0c2VsZi5zZXRBY3RpdmVJdGVtKG51bGwpO1xuXHRcdFx0c2VsZi51cGRhdGVQbGFjZWhvbGRlcigpO1xuXHRcdFx0c2VsZi51cGRhdGVPcmlnaW5hbElucHV0KHtzaWxlbnQ6IHNpbGVudH0pO1xuXHRcdFx0c2VsZi5yZWZyZXNoU3RhdGUoKTtcblx0XHRcdHNlbGYuc2hvd0lucHV0KCk7XG5cdFx0XHRzZWxmLnRyaWdnZXIoJ2NsZWFyJyk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEEgaGVscGVyIG1ldGhvZCBmb3IgaW5zZXJ0aW5nIGFuIGVsZW1lbnRcblx0XHQgKiBhdCB0aGUgY3VycmVudCBjYXJldCBwb3NpdGlvbi5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSAkZWxcblx0XHQgKi9cblx0XHRpbnNlcnRBdENhcmV0OiBmdW5jdGlvbigkZWwpIHtcblx0XHRcdHZhciBjYXJldCA9IE1hdGgubWluKHRoaXMuY2FyZXRQb3MsIHRoaXMuaXRlbXMubGVuZ3RoKTtcblx0XHRcdGlmIChjYXJldCA9PT0gMCkge1xuXHRcdFx0XHR0aGlzLiRjb250cm9sLnByZXBlbmQoJGVsKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCQodGhpcy4kY29udHJvbFswXS5jaGlsZE5vZGVzW2NhcmV0XSkuYmVmb3JlKCRlbCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnNldENhcmV0KGNhcmV0ICsgMSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZXMgdGhlIGN1cnJlbnQgc2VsZWN0ZWQgaXRlbShzKS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBlIChvcHRpb25hbClcblx0XHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHRkZWxldGVTZWxlY3Rpb246IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBpLCBuLCBkaXJlY3Rpb24sIHNlbGVjdGlvbiwgdmFsdWVzLCBjYXJldCwgb3B0aW9uX3NlbGVjdCwgJG9wdGlvbl9zZWxlY3QsICR0YWlsO1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHRkaXJlY3Rpb24gPSAoZSAmJiBlLmtleUNvZGUgPT09IEtFWV9CQUNLU1BBQ0UpID8gLTEgOiAxO1xuXHRcdFx0c2VsZWN0aW9uID0gZ2V0U2VsZWN0aW9uKHNlbGYuJGNvbnRyb2xfaW5wdXRbMF0pO1xuXG5cdFx0XHRpZiAoc2VsZi4kYWN0aXZlT3B0aW9uICYmICFzZWxmLnNldHRpbmdzLmhpZGVTZWxlY3RlZCkge1xuXHRcdFx0XHRvcHRpb25fc2VsZWN0ID0gc2VsZi5nZXRBZGphY2VudE9wdGlvbihzZWxmLiRhY3RpdmVPcHRpb24sIC0xKS5hdHRyKCdkYXRhLXZhbHVlJyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGRldGVybWluZSBpdGVtcyB0aGF0IHdpbGwgYmUgcmVtb3ZlZFxuXHRcdFx0dmFsdWVzID0gW107XG5cblx0XHRcdGlmIChzZWxmLiRhY3RpdmVJdGVtcy5sZW5ndGgpIHtcblx0XHRcdFx0JHRhaWwgPSBzZWxmLiRjb250cm9sLmNoaWxkcmVuKCcuYWN0aXZlOicgKyAoZGlyZWN0aW9uID4gMCA/ICdsYXN0JyA6ICdmaXJzdCcpKTtcblx0XHRcdFx0Y2FyZXQgPSBzZWxmLiRjb250cm9sLmNoaWxkcmVuKCc6bm90KGlucHV0KScpLmluZGV4KCR0YWlsKTtcblx0XHRcdFx0aWYgKGRpcmVjdGlvbiA+IDApIHsgY2FyZXQrKzsgfVxuXG5cdFx0XHRcdGZvciAoaSA9IDAsIG4gPSBzZWxmLiRhY3RpdmVJdGVtcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0XHR2YWx1ZXMucHVzaCgkKHNlbGYuJGFjdGl2ZUl0ZW1zW2ldKS5hdHRyKCdkYXRhLXZhbHVlJykpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChlKSB7XG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoKHNlbGYuaXNGb2N1c2VkIHx8IHNlbGYuc2V0dGluZ3MubW9kZSA9PT0gJ3NpbmdsZScpICYmIHNlbGYuaXRlbXMubGVuZ3RoKSB7XG5cdFx0XHRcdGlmIChkaXJlY3Rpb24gPCAwICYmIHNlbGVjdGlvbi5zdGFydCA9PT0gMCAmJiBzZWxlY3Rpb24ubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0dmFsdWVzLnB1c2goc2VsZi5pdGVtc1tzZWxmLmNhcmV0UG9zIC0gMV0pO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGRpcmVjdGlvbiA+IDAgJiYgc2VsZWN0aW9uLnN0YXJ0ID09PSBzZWxmLiRjb250cm9sX2lucHV0LnZhbCgpLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhbHVlcy5wdXNoKHNlbGYuaXRlbXNbc2VsZi5jYXJldFBvc10pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGFsbG93IHRoZSBjYWxsYmFjayB0byBhYm9ydFxuXHRcdFx0aWYgKCF2YWx1ZXMubGVuZ3RoIHx8ICh0eXBlb2Ygc2VsZi5zZXR0aW5ncy5vbkRlbGV0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBzZWxmLnNldHRpbmdzLm9uRGVsZXRlLmFwcGx5KHNlbGYsIFt2YWx1ZXNdKSA9PT0gZmFsc2UpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcGVyZm9ybSByZW1vdmFsXG5cdFx0XHRpZiAodHlwZW9mIGNhcmV0ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRzZWxmLnNldENhcmV0KGNhcmV0KTtcblx0XHRcdH1cblx0XHRcdHdoaWxlICh2YWx1ZXMubGVuZ3RoKSB7XG5cdFx0XHRcdHNlbGYucmVtb3ZlSXRlbSh2YWx1ZXMucG9wKCkpO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxmLnNob3dJbnB1dCgpO1xuXHRcdFx0c2VsZi5wb3NpdGlvbkRyb3Bkb3duKCk7XG5cdFx0XHRzZWxmLnJlZnJlc2hPcHRpb25zKHRydWUpO1xuXG5cdFx0XHQvLyBzZWxlY3QgcHJldmlvdXMgb3B0aW9uXG5cdFx0XHRpZiAob3B0aW9uX3NlbGVjdCkge1xuXHRcdFx0XHQkb3B0aW9uX3NlbGVjdCA9IHNlbGYuZ2V0T3B0aW9uKG9wdGlvbl9zZWxlY3QpO1xuXHRcdFx0XHRpZiAoJG9wdGlvbl9zZWxlY3QubGVuZ3RoKSB7XG5cdFx0XHRcdFx0c2VsZi5zZXRBY3RpdmVPcHRpb24oJG9wdGlvbl9zZWxlY3QpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBTZWxlY3RzIHRoZSBwcmV2aW91cyAvIG5leHQgaXRlbSAoZGVwZW5kaW5nXG5cdFx0ICogb24gdGhlIGBkaXJlY3Rpb25gIGFyZ3VtZW50KS5cblx0XHQgKlxuXHRcdCAqID4gMCAtIHJpZ2h0XG5cdFx0ICogPCAwIC0gbGVmdFxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtpbnR9IGRpcmVjdGlvblxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBlIChvcHRpb25hbClcblx0XHQgKi9cblx0XHRhZHZhbmNlU2VsZWN0aW9uOiBmdW5jdGlvbihkaXJlY3Rpb24sIGUpIHtcblx0XHRcdHZhciB0YWlsLCBzZWxlY3Rpb24sIGlkeCwgdmFsdWVMZW5ndGgsIGN1cnNvckF0RWRnZSwgJHRhaWw7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRcdGlmIChkaXJlY3Rpb24gPT09IDApIHJldHVybjtcblx0XHRcdGlmIChzZWxmLnJ0bCkgZGlyZWN0aW9uICo9IC0xO1xuXG5cdFx0XHR0YWlsID0gZGlyZWN0aW9uID4gMCA/ICdsYXN0JyA6ICdmaXJzdCc7XG5cdFx0XHRzZWxlY3Rpb24gPSBnZXRTZWxlY3Rpb24oc2VsZi4kY29udHJvbF9pbnB1dFswXSk7XG5cblx0XHRcdGlmIChzZWxmLmlzRm9jdXNlZCAmJiAhc2VsZi5pc0lucHV0SGlkZGVuKSB7XG5cdFx0XHRcdHZhbHVlTGVuZ3RoID0gc2VsZi4kY29udHJvbF9pbnB1dC52YWwoKS5sZW5ndGg7XG5cdFx0XHRcdGN1cnNvckF0RWRnZSA9IGRpcmVjdGlvbiA8IDBcblx0XHRcdFx0XHQ/IHNlbGVjdGlvbi5zdGFydCA9PT0gMCAmJiBzZWxlY3Rpb24ubGVuZ3RoID09PSAwXG5cdFx0XHRcdFx0OiBzZWxlY3Rpb24uc3RhcnQgPT09IHZhbHVlTGVuZ3RoO1xuXG5cdFx0XHRcdGlmIChjdXJzb3JBdEVkZ2UgJiYgIXZhbHVlTGVuZ3RoKSB7XG5cdFx0XHRcdFx0c2VsZi5hZHZhbmNlQ2FyZXQoZGlyZWN0aW9uLCBlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JHRhaWwgPSBzZWxmLiRjb250cm9sLmNoaWxkcmVuKCcuYWN0aXZlOicgKyB0YWlsKTtcblx0XHRcdFx0aWYgKCR0YWlsLmxlbmd0aCkge1xuXHRcdFx0XHRcdGlkeCA9IHNlbGYuJGNvbnRyb2wuY2hpbGRyZW4oJzpub3QoaW5wdXQpJykuaW5kZXgoJHRhaWwpO1xuXHRcdFx0XHRcdHNlbGYuc2V0QWN0aXZlSXRlbShudWxsKTtcblx0XHRcdFx0XHRzZWxmLnNldENhcmV0KGRpcmVjdGlvbiA+IDAgPyBpZHggKyAxIDogaWR4KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBNb3ZlcyB0aGUgY2FyZXQgbGVmdCAvIHJpZ2h0LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtpbnR9IGRpcmVjdGlvblxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBlIChvcHRpb25hbClcblx0XHQgKi9cblx0XHRhZHZhbmNlQ2FyZXQ6IGZ1bmN0aW9uKGRpcmVjdGlvbiwgZSkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLCBmbiwgJGFkajtcblxuXHRcdFx0aWYgKGRpcmVjdGlvbiA9PT0gMCkgcmV0dXJuO1xuXG5cdFx0XHRmbiA9IGRpcmVjdGlvbiA+IDAgPyAnbmV4dCcgOiAncHJldic7XG5cdFx0XHRpZiAoc2VsZi5pc1NoaWZ0RG93bikge1xuXHRcdFx0XHQkYWRqID0gc2VsZi4kY29udHJvbF9pbnB1dFtmbl0oKTtcblx0XHRcdFx0aWYgKCRhZGoubGVuZ3RoKSB7XG5cdFx0XHRcdFx0c2VsZi5oaWRlSW5wdXQoKTtcblx0XHRcdFx0XHRzZWxmLnNldEFjdGl2ZUl0ZW0oJGFkaik7XG5cdFx0XHRcdFx0ZSAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuc2V0Q2FyZXQoc2VsZi5jYXJldFBvcyArIGRpcmVjdGlvbik7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIE1vdmVzIHRoZSBjYXJldCB0byB0aGUgc3BlY2lmaWVkIGluZGV4LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtpbnR9IGlcblx0XHQgKi9cblx0XHRzZXRDYXJldDogZnVuY3Rpb24oaSkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHRpZiAoc2VsZi5zZXR0aW5ncy5tb2RlID09PSAnc2luZ2xlJykge1xuXHRcdFx0XHRpID0gc2VsZi5pdGVtcy5sZW5ndGg7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oc2VsZi5pdGVtcy5sZW5ndGgsIGkpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoIXNlbGYuaXNQZW5kaW5nKSB7XG5cdFx0XHRcdC8vIHRoZSBpbnB1dCBtdXN0IGJlIG1vdmVkIGJ5IGxlYXZpbmcgaXQgaW4gcGxhY2UgYW5kIG1vdmluZyB0aGVcblx0XHRcdFx0Ly8gc2libGluZ3MsIGR1ZSB0byB0aGUgZmFjdCB0aGF0IGZvY3VzIGNhbm5vdCBiZSByZXN0b3JlZCBvbmNlIGxvc3Rcblx0XHRcdFx0Ly8gb24gbW9iaWxlIHdlYmtpdCBkZXZpY2VzXG5cdFx0XHRcdHZhciBqLCBuLCBmbiwgJGNoaWxkcmVuLCAkY2hpbGQ7XG5cdFx0XHRcdCRjaGlsZHJlbiA9IHNlbGYuJGNvbnRyb2wuY2hpbGRyZW4oJzpub3QoaW5wdXQpJyk7XG5cdFx0XHRcdGZvciAoaiA9IDAsIG4gPSAkY2hpbGRyZW4ubGVuZ3RoOyBqIDwgbjsgaisrKSB7XG5cdFx0XHRcdFx0JGNoaWxkID0gJCgkY2hpbGRyZW5bal0pLmRldGFjaCgpO1xuXHRcdFx0XHRcdGlmIChqIDwgIGkpIHtcblx0XHRcdFx0XHRcdHNlbGYuJGNvbnRyb2xfaW5wdXQuYmVmb3JlKCRjaGlsZCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuJGNvbnRyb2wuYXBwZW5kKCRjaGlsZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHNlbGYuY2FyZXRQb3MgPSBpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBEaXNhYmxlcyB1c2VyIGlucHV0IG9uIHRoZSBjb250cm9sLiBVc2VkIHdoaWxlXG5cdFx0ICogaXRlbXMgYXJlIGJlaW5nIGFzeW5jaHJvbm91c2x5IGNyZWF0ZWQuXG5cdFx0ICovXG5cdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmNsb3NlKCk7XG5cdFx0XHR0aGlzLmlzTG9ja2VkID0gdHJ1ZTtcblx0XHRcdHRoaXMucmVmcmVzaFN0YXRlKCk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlLWVuYWJsZXMgdXNlciBpbnB1dCBvbiB0aGUgY29udHJvbC5cblx0XHQgKi9cblx0XHR1bmxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5pc0xvY2tlZCA9IGZhbHNlO1xuXHRcdFx0dGhpcy5yZWZyZXNoU3RhdGUoKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRGlzYWJsZXMgdXNlciBpbnB1dCBvbiB0aGUgY29udHJvbCBjb21wbGV0ZWx5LlxuXHRcdCAqIFdoaWxlIGRpc2FibGVkLCBpdCBjYW5ub3QgcmVjZWl2ZSBmb2N1cy5cblx0XHQgKi9cblx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHNlbGYuJGlucHV0LnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG5cdFx0XHRzZWxmLiRjb250cm9sX2lucHV0LnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSkucHJvcCgndGFiaW5kZXgnLCAtMSk7XG5cdFx0XHRzZWxmLmlzRGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0c2VsZi5sb2NrKCk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZXMgdGhlIGNvbnRyb2wgc28gdGhhdCBpdCBjYW4gcmVzcG9uZFxuXHRcdCAqIHRvIGZvY3VzIGFuZCB1c2VyIGlucHV0LlxuXHRcdCAqL1xuXHRcdGVuYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHRzZWxmLiRpbnB1dC5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcblx0XHRcdHNlbGYuJGNvbnRyb2xfaW5wdXQucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSkucHJvcCgndGFiaW5kZXgnLCBzZWxmLnRhYkluZGV4KTtcblx0XHRcdHNlbGYuaXNEaXNhYmxlZCA9IGZhbHNlO1xuXHRcdFx0c2VsZi51bmxvY2soKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQ29tcGxldGVseSBkZXN0cm95cyB0aGUgY29udHJvbCBhbmRcblx0XHQgKiB1bmJpbmRzIGFsbCBldmVudCBsaXN0ZW5lcnMgc28gdGhhdCBpdCBjYW5cblx0XHQgKiBiZSBnYXJiYWdlIGNvbGxlY3RlZC5cblx0XHQgKi9cblx0XHRkZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHZhciBldmVudE5TID0gc2VsZi5ldmVudE5TO1xuXHRcdFx0dmFyIHJldmVydFNldHRpbmdzID0gc2VsZi5yZXZlcnRTZXR0aW5ncztcblxuXHRcdFx0c2VsZi50cmlnZ2VyKCdkZXN0cm95Jyk7XG5cdFx0XHRzZWxmLm9mZigpO1xuXHRcdFx0c2VsZi4kd3JhcHBlci5yZW1vdmUoKTtcblx0XHRcdHNlbGYuJGRyb3Bkb3duLnJlbW92ZSgpO1xuXG5cdFx0XHRzZWxmLiRpbnB1dFxuXHRcdFx0XHQuaHRtbCgnJylcblx0XHRcdFx0LmFwcGVuZChyZXZlcnRTZXR0aW5ncy4kY2hpbGRyZW4pXG5cdFx0XHRcdC5yZW1vdmVBdHRyKCd0YWJpbmRleCcpXG5cdFx0XHRcdC5yZW1vdmVDbGFzcygnc2VsZWN0aXplZCcpXG5cdFx0XHRcdC5hdHRyKHt0YWJpbmRleDogcmV2ZXJ0U2V0dGluZ3MudGFiaW5kZXh9KVxuXHRcdFx0XHQuc2hvdygpO1xuXG5cdFx0XHRzZWxmLiRjb250cm9sX2lucHV0LnJlbW92ZURhdGEoJ2dyb3cnKTtcblx0XHRcdHNlbGYuJGlucHV0LnJlbW92ZURhdGEoJ3NlbGVjdGl6ZScpO1xuXG5cdFx0XHQkKHdpbmRvdykub2ZmKGV2ZW50TlMpO1xuXHRcdFx0JChkb2N1bWVudCkub2ZmKGV2ZW50TlMpO1xuXHRcdFx0JChkb2N1bWVudC5ib2R5KS5vZmYoZXZlbnROUyk7XG5cblx0XHRcdGRlbGV0ZSBzZWxmLiRpbnB1dFswXS5zZWxlY3RpemU7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEEgaGVscGVyIG1ldGhvZCBmb3IgcmVuZGVyaW5nIFwiaXRlbVwiIGFuZFxuXHRcdCAqIFwib3B0aW9uXCIgdGVtcGxhdGVzLCBnaXZlbiB0aGUgZGF0YS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZW1wbGF0ZU5hbWVcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZGF0YVxuXHRcdCAqIEByZXR1cm5zIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0cmVuZGVyOiBmdW5jdGlvbih0ZW1wbGF0ZU5hbWUsIGRhdGEpIHtcblx0XHRcdHZhciB2YWx1ZSwgaWQsIGxhYmVsO1xuXHRcdFx0dmFyIGh0bWwgPSAnJztcblx0XHRcdHZhciBjYWNoZSA9IGZhbHNlO1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0dmFyIHJlZ2V4X3RhZyA9IC9eW1xcdCBcXHJcXG5dKjwoW2Etel1bYS16MC05XFwtX10qKD86XFw6W2Etel1bYS16MC05XFwtX10qKT8pL2k7XG5cblx0XHRcdGlmICh0ZW1wbGF0ZU5hbWUgPT09ICdvcHRpb24nIHx8IHRlbXBsYXRlTmFtZSA9PT0gJ2l0ZW0nKSB7XG5cdFx0XHRcdHZhbHVlID0gaGFzaF9rZXkoZGF0YVtzZWxmLnNldHRpbmdzLnZhbHVlRmllbGRdKTtcblx0XHRcdFx0Y2FjaGUgPSAhIXZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwdWxsIG1hcmt1cCBmcm9tIGNhY2hlIGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKGNhY2hlKSB7XG5cdFx0XHRcdGlmICghaXNzZXQoc2VsZi5yZW5kZXJDYWNoZVt0ZW1wbGF0ZU5hbWVdKSkge1xuXHRcdFx0XHRcdHNlbGYucmVuZGVyQ2FjaGVbdGVtcGxhdGVOYW1lXSA9IHt9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChzZWxmLnJlbmRlckNhY2hlW3RlbXBsYXRlTmFtZV0uaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHNlbGYucmVuZGVyQ2FjaGVbdGVtcGxhdGVOYW1lXVt2YWx1ZV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcmVuZGVyIG1hcmt1cFxuXHRcdFx0aHRtbCA9ICQoc2VsZi5zZXR0aW5ncy5yZW5kZXJbdGVtcGxhdGVOYW1lXS5hcHBseSh0aGlzLCBbZGF0YSwgZXNjYXBlX2h0bWxdKSk7XG5cblx0XHRcdC8vIGFkZCBtYW5kYXRvcnkgYXR0cmlidXRlc1xuXHRcdFx0aWYgKHRlbXBsYXRlTmFtZSA9PT0gJ29wdGlvbicgfHwgdGVtcGxhdGVOYW1lID09PSAnb3B0aW9uX2NyZWF0ZScpIHtcblx0XHRcdFx0aHRtbC5hdHRyKCdkYXRhLXNlbGVjdGFibGUnLCAnJyk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmICh0ZW1wbGF0ZU5hbWUgPT09ICdvcHRncm91cCcpIHtcblx0XHRcdFx0aWQgPSBkYXRhW3NlbGYuc2V0dGluZ3Mub3B0Z3JvdXBWYWx1ZUZpZWxkXSB8fCAnJztcblx0XHRcdFx0aHRtbC5hdHRyKCdkYXRhLWdyb3VwJywgaWQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRlbXBsYXRlTmFtZSA9PT0gJ29wdGlvbicgfHwgdGVtcGxhdGVOYW1lID09PSAnaXRlbScpIHtcblx0XHRcdFx0aHRtbC5hdHRyKCdkYXRhLXZhbHVlJywgdmFsdWUgfHwgJycpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyB1cGRhdGUgY2FjaGVcblx0XHRcdGlmIChjYWNoZSkge1xuXHRcdFx0XHRzZWxmLnJlbmRlckNhY2hlW3RlbXBsYXRlTmFtZV1bdmFsdWVdID0gaHRtbFswXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGh0bWxbMF07XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENsZWFycyB0aGUgcmVuZGVyIGNhY2hlIGZvciBhIHRlbXBsYXRlLiBJZlxuXHRcdCAqIG5vIHRlbXBsYXRlIGlzIGdpdmVuLCBjbGVhcnMgYWxsIHJlbmRlclxuXHRcdCAqIGNhY2hlcy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZW1wbGF0ZU5hbWVcblx0XHQgKi9cblx0XHRjbGVhckNhY2hlOiBmdW5jdGlvbih0ZW1wbGF0ZU5hbWUpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdGlmICh0eXBlb2YgdGVtcGxhdGVOYW1lID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRzZWxmLnJlbmRlckNhY2hlID0ge307XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgc2VsZi5yZW5kZXJDYWNoZVt0ZW1wbGF0ZU5hbWVdO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRvIGRpc3BsYXkgdGhlXG5cdFx0ICogY3JlYXRlIGl0ZW0gcHJvbXB0LCBnaXZlbiBhIHVzZXIgaW5wdXQuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXRcblx0XHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdGNhbkNyZWF0ZTogZnVuY3Rpb24oaW5wdXQpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdGlmICghc2VsZi5zZXR0aW5ncy5jcmVhdGUpIHJldHVybiBmYWxzZTtcblx0XHRcdHZhciBmaWx0ZXIgPSBzZWxmLnNldHRpbmdzLmNyZWF0ZUZpbHRlcjtcblx0XHRcdHJldHVybiBpbnB1dC5sZW5ndGhcblx0XHRcdFx0JiYgKHR5cGVvZiBmaWx0ZXIgIT09ICdmdW5jdGlvbicgfHwgZmlsdGVyLmFwcGx5KHNlbGYsIFtpbnB1dF0pKVxuXHRcdFx0XHQmJiAodHlwZW9mIGZpbHRlciAhPT0gJ3N0cmluZycgfHwgbmV3IFJlZ0V4cChmaWx0ZXIpLnRlc3QoaW5wdXQpKVxuXHRcdFx0XHQmJiAoIShmaWx0ZXIgaW5zdGFuY2VvZiBSZWdFeHApIHx8IGZpbHRlci50ZXN0KGlucHV0KSk7XG5cdFx0fVxuXG5cdH0pO1xuXG5cblx0U2VsZWN0aXplLmNvdW50ID0gMDtcblx0U2VsZWN0aXplLmRlZmF1bHRzID0ge1xuXHRcdG9wdGlvbnM6IFtdLFxuXHRcdG9wdGdyb3VwczogW10sXG5cblx0XHRwbHVnaW5zOiBbXSxcblx0XHRkZWxpbWl0ZXI6ICcsJyxcblx0XHRzcGxpdE9uOiBudWxsLCAvLyByZWdleHAgb3Igc3RyaW5nIGZvciBzcGxpdHRpbmcgdXAgdmFsdWVzIGZyb20gYSBwYXN0ZSBjb21tYW5kXG5cdFx0cGVyc2lzdDogdHJ1ZSxcblx0XHRkaWFjcml0aWNzOiB0cnVlLFxuXHRcdGNyZWF0ZTogZmFsc2UsXG5cdFx0Y3JlYXRlT25CbHVyOiBmYWxzZSxcblx0XHRjcmVhdGVGaWx0ZXI6IG51bGwsXG5cdFx0aGlnaGxpZ2h0OiB0cnVlLFxuXHRcdG9wZW5PbkZvY3VzOiB0cnVlLFxuXHRcdG1heE9wdGlvbnM6IDEwMDAsXG5cdFx0bWF4SXRlbXM6IG51bGwsXG5cdFx0aGlkZVNlbGVjdGVkOiBudWxsLFxuXHRcdGFkZFByZWNlZGVuY2U6IGZhbHNlLFxuXHRcdHNlbGVjdE9uVGFiOiBmYWxzZSxcblx0XHRwcmVsb2FkOiBmYWxzZSxcblx0XHRhbGxvd0VtcHR5T3B0aW9uOiBmYWxzZSxcblx0XHRjbG9zZUFmdGVyU2VsZWN0OiBmYWxzZSxcblxuXHRcdHNjcm9sbER1cmF0aW9uOiA2MCxcblx0XHRsb2FkVGhyb3R0bGU6IDMwMCxcblx0XHRsb2FkaW5nQ2xhc3M6ICdsb2FkaW5nJyxcblxuXHRcdGRhdGFBdHRyOiAnZGF0YS1kYXRhJyxcblx0XHRvcHRncm91cEZpZWxkOiAnb3B0Z3JvdXAnLFxuXHRcdHZhbHVlRmllbGQ6ICd2YWx1ZScsXG5cdFx0bGFiZWxGaWVsZDogJ3RleHQnLFxuXHRcdG9wdGdyb3VwTGFiZWxGaWVsZDogJ2xhYmVsJyxcblx0XHRvcHRncm91cFZhbHVlRmllbGQ6ICd2YWx1ZScsXG5cdFx0bG9ja09wdGdyb3VwT3JkZXI6IGZhbHNlLFxuXG5cdFx0c29ydEZpZWxkOiAnJG9yZGVyJyxcblx0XHRzZWFyY2hGaWVsZDogWyd0ZXh0J10sXG5cdFx0c2VhcmNoQ29uanVuY3Rpb246ICdhbmQnLFxuXG5cdFx0bW9kZTogbnVsbCxcblx0XHR3cmFwcGVyQ2xhc3M6ICdzZWxlY3RpemUtY29udHJvbCcsXG5cdFx0aW5wdXRDbGFzczogJ3NlbGVjdGl6ZS1pbnB1dCcsXG5cdFx0ZHJvcGRvd25DbGFzczogJ3NlbGVjdGl6ZS1kcm9wZG93bicsXG5cdFx0ZHJvcGRvd25Db250ZW50Q2xhc3M6ICdzZWxlY3RpemUtZHJvcGRvd24tY29udGVudCcsXG5cblx0XHRkcm9wZG93blBhcmVudDogbnVsbCxcblxuXHRcdGNvcHlDbGFzc2VzVG9Ecm9wZG93bjogdHJ1ZSxcblxuXHRcdC8qXG5cdFx0bG9hZCAgICAgICAgICAgICAgICAgOiBudWxsLCAvLyBmdW5jdGlvbihxdWVyeSwgY2FsbGJhY2spIHsgLi4uIH1cblx0XHRzY29yZSAgICAgICAgICAgICAgICA6IG51bGwsIC8vIGZ1bmN0aW9uKHNlYXJjaCkgeyAuLi4gfVxuXHRcdG9uSW5pdGlhbGl6ZSAgICAgICAgIDogbnVsbCwgLy8gZnVuY3Rpb24oKSB7IC4uLiB9XG5cdFx0b25DaGFuZ2UgICAgICAgICAgICAgOiBudWxsLCAvLyBmdW5jdGlvbih2YWx1ZSkgeyAuLi4gfVxuXHRcdG9uSXRlbUFkZCAgICAgICAgICAgIDogbnVsbCwgLy8gZnVuY3Rpb24odmFsdWUsICRpdGVtKSB7IC4uLiB9XG5cdFx0b25JdGVtUmVtb3ZlICAgICAgICAgOiBudWxsLCAvLyBmdW5jdGlvbih2YWx1ZSkgeyAuLi4gfVxuXHRcdG9uQ2xlYXIgICAgICAgICAgICAgIDogbnVsbCwgLy8gZnVuY3Rpb24oKSB7IC4uLiB9XG5cdFx0b25PcHRpb25BZGQgICAgICAgICAgOiBudWxsLCAvLyBmdW5jdGlvbih2YWx1ZSwgZGF0YSkgeyAuLi4gfVxuXHRcdG9uT3B0aW9uUmVtb3ZlICAgICAgIDogbnVsbCwgLy8gZnVuY3Rpb24odmFsdWUpIHsgLi4uIH1cblx0XHRvbk9wdGlvbkNsZWFyICAgICAgICA6IG51bGwsIC8vIGZ1bmN0aW9uKCkgeyAuLi4gfVxuXHRcdG9uT3B0aW9uR3JvdXBBZGQgICAgIDogbnVsbCwgLy8gZnVuY3Rpb24oaWQsIGRhdGEpIHsgLi4uIH1cblx0XHRvbk9wdGlvbkdyb3VwUmVtb3ZlICA6IG51bGwsIC8vIGZ1bmN0aW9uKGlkKSB7IC4uLiB9XG5cdFx0b25PcHRpb25Hcm91cENsZWFyICAgOiBudWxsLCAvLyBmdW5jdGlvbigpIHsgLi4uIH1cblx0XHRvbkRyb3Bkb3duT3BlbiAgICAgICA6IG51bGwsIC8vIGZ1bmN0aW9uKCRkcm9wZG93bikgeyAuLi4gfVxuXHRcdG9uRHJvcGRvd25DbG9zZSAgICAgIDogbnVsbCwgLy8gZnVuY3Rpb24oJGRyb3Bkb3duKSB7IC4uLiB9XG5cdFx0b25UeXBlICAgICAgICAgICAgICAgOiBudWxsLCAvLyBmdW5jdGlvbihzdHIpIHsgLi4uIH1cblx0XHRvbkRlbGV0ZSAgICAgICAgICAgICA6IG51bGwsIC8vIGZ1bmN0aW9uKHZhbHVlcykgeyAuLi4gfVxuXHRcdCovXG5cblx0XHRyZW5kZXI6IHtcblx0XHRcdC8qXG5cdFx0XHRpdGVtOiBudWxsLFxuXHRcdFx0b3B0Z3JvdXA6IG51bGwsXG5cdFx0XHRvcHRncm91cF9oZWFkZXI6IG51bGwsXG5cdFx0XHRvcHRpb246IG51bGwsXG5cdFx0XHRvcHRpb25fY3JlYXRlOiBudWxsXG5cdFx0XHQqL1xuXHRcdH1cblx0fTtcblxuXG5cdCQuZm4uc2VsZWN0aXplID0gZnVuY3Rpb24oc2V0dGluZ3NfdXNlcikge1xuXHRcdHZhciBkZWZhdWx0cyAgICAgICAgICAgICA9ICQuZm4uc2VsZWN0aXplLmRlZmF1bHRzO1xuXHRcdHZhciBzZXR0aW5ncyAgICAgICAgICAgICA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgc2V0dGluZ3NfdXNlcik7XG5cdFx0dmFyIGF0dHJfZGF0YSAgICAgICAgICAgID0gc2V0dGluZ3MuZGF0YUF0dHI7XG5cdFx0dmFyIGZpZWxkX2xhYmVsICAgICAgICAgID0gc2V0dGluZ3MubGFiZWxGaWVsZDtcblx0XHR2YXIgZmllbGRfdmFsdWUgICAgICAgICAgPSBzZXR0aW5ncy52YWx1ZUZpZWxkO1xuXHRcdHZhciBmaWVsZF9vcHRncm91cCAgICAgICA9IHNldHRpbmdzLm9wdGdyb3VwRmllbGQ7XG5cdFx0dmFyIGZpZWxkX29wdGdyb3VwX2xhYmVsID0gc2V0dGluZ3Mub3B0Z3JvdXBMYWJlbEZpZWxkO1xuXHRcdHZhciBmaWVsZF9vcHRncm91cF92YWx1ZSA9IHNldHRpbmdzLm9wdGdyb3VwVmFsdWVGaWVsZDtcblxuXHRcdC8qKlxuXHRcdCAqIEluaXRpYWxpemVzIHNlbGVjdGl6ZSBmcm9tIGEgPGlucHV0IHR5cGU9XCJ0ZXh0XCI+IGVsZW1lbnQuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gJGlucHV0XG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzX2VsZW1lbnRcblx0XHQgKi9cblx0XHR2YXIgaW5pdF90ZXh0Ym94ID0gZnVuY3Rpb24oJGlucHV0LCBzZXR0aW5nc19lbGVtZW50KSB7XG5cdFx0XHR2YXIgaSwgbiwgdmFsdWVzLCBvcHRpb247XG5cblx0XHRcdHZhciBkYXRhX3JhdyA9ICRpbnB1dC5hdHRyKGF0dHJfZGF0YSk7XG5cblx0XHRcdGlmICghZGF0YV9yYXcpIHtcblx0XHRcdFx0dmFyIHZhbHVlID0gJC50cmltKCRpbnB1dC52YWwoKSB8fCAnJyk7XG5cdFx0XHRcdGlmICghc2V0dGluZ3MuYWxsb3dFbXB0eU9wdGlvbiAmJiAhdmFsdWUubGVuZ3RoKSByZXR1cm47XG5cdFx0XHRcdHZhbHVlcyA9IHZhbHVlLnNwbGl0KHNldHRpbmdzLmRlbGltaXRlcik7XG5cdFx0XHRcdGZvciAoaSA9IDAsIG4gPSB2YWx1ZXMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0ge307XG5cdFx0XHRcdFx0b3B0aW9uW2ZpZWxkX2xhYmVsXSA9IHZhbHVlc1tpXTtcblx0XHRcdFx0XHRvcHRpb25bZmllbGRfdmFsdWVdID0gdmFsdWVzW2ldO1xuXHRcdFx0XHRcdHNldHRpbmdzX2VsZW1lbnQub3B0aW9ucy5wdXNoKG9wdGlvbik7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2V0dGluZ3NfZWxlbWVudC5pdGVtcyA9IHZhbHVlcztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNldHRpbmdzX2VsZW1lbnQub3B0aW9ucyA9IEpTT04ucGFyc2UoZGF0YV9yYXcpO1xuXHRcdFx0XHRmb3IgKGkgPSAwLCBuID0gc2V0dGluZ3NfZWxlbWVudC5vcHRpb25zLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHRcdHNldHRpbmdzX2VsZW1lbnQuaXRlbXMucHVzaChzZXR0aW5nc19lbGVtZW50Lm9wdGlvbnNbaV1bZmllbGRfdmFsdWVdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXplcyBzZWxlY3RpemUgZnJvbSBhIDxzZWxlY3Q+IGVsZW1lbnQuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gJGlucHV0XG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzX2VsZW1lbnRcblx0XHQgKi9cblx0XHR2YXIgaW5pdF9zZWxlY3QgPSBmdW5jdGlvbigkaW5wdXQsIHNldHRpbmdzX2VsZW1lbnQpIHtcblx0XHRcdHZhciBpLCBuLCB0YWdOYW1lLCAkY2hpbGRyZW4sIG9yZGVyID0gMDtcblx0XHRcdHZhciBvcHRpb25zID0gc2V0dGluZ3NfZWxlbWVudC5vcHRpb25zO1xuXHRcdFx0dmFyIG9wdGlvbnNNYXAgPSB7fTtcblxuXHRcdFx0dmFyIHJlYWREYXRhID0gZnVuY3Rpb24oJGVsKSB7XG5cdFx0XHRcdHZhciBkYXRhID0gYXR0cl9kYXRhICYmICRlbC5hdHRyKGF0dHJfZGF0YSk7XG5cdFx0XHRcdGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycgJiYgZGF0YS5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH07XG5cblx0XHRcdHZhciBhZGRPcHRpb24gPSBmdW5jdGlvbigkb3B0aW9uLCBncm91cCkge1xuXHRcdFx0XHQkb3B0aW9uID0gJCgkb3B0aW9uKTtcblxuXHRcdFx0XHR2YXIgdmFsdWUgPSBoYXNoX2tleSgkb3B0aW9uLnZhbCgpKTtcblx0XHRcdFx0aWYgKCF2YWx1ZSAmJiAhc2V0dGluZ3MuYWxsb3dFbXB0eU9wdGlvbikgcmV0dXJuO1xuXG5cdFx0XHRcdC8vIGlmIHRoZSBvcHRpb24gYWxyZWFkeSBleGlzdHMsIGl0J3MgcHJvYmFibHkgYmVlblxuXHRcdFx0XHQvLyBkdXBsaWNhdGVkIGluIGFub3RoZXIgb3B0Z3JvdXAuIGluIHRoaXMgY2FzZSwgcHVzaFxuXHRcdFx0XHQvLyB0aGUgY3VycmVudCBncm91cCB0byB0aGUgXCJvcHRncm91cFwiIHByb3BlcnR5IG9uIHRoZVxuXHRcdFx0XHQvLyBleGlzdGluZyBvcHRpb24gc28gdGhhdCBpdCdzIHJlbmRlcmVkIGluIGJvdGggcGxhY2VzLlxuXHRcdFx0XHRpZiAob3B0aW9uc01hcC5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHtcblx0XHRcdFx0XHRpZiAoZ3JvdXApIHtcblx0XHRcdFx0XHRcdHZhciBhcnIgPSBvcHRpb25zTWFwW3ZhbHVlXVtmaWVsZF9vcHRncm91cF07XG5cdFx0XHRcdFx0XHRpZiAoIWFycikge1xuXHRcdFx0XHRcdFx0XHRvcHRpb25zTWFwW3ZhbHVlXVtmaWVsZF9vcHRncm91cF0gPSBncm91cDtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoISQuaXNBcnJheShhcnIpKSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvbnNNYXBbdmFsdWVdW2ZpZWxkX29wdGdyb3VwXSA9IFthcnIsIGdyb3VwXTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGFyci5wdXNoKGdyb3VwKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIG9wdGlvbiAgICAgICAgICAgICA9IHJlYWREYXRhKCRvcHRpb24pIHx8IHt9O1xuXHRcdFx0XHRvcHRpb25bZmllbGRfbGFiZWxdICAgID0gb3B0aW9uW2ZpZWxkX2xhYmVsXSB8fCAkb3B0aW9uLnRleHQoKTtcblx0XHRcdFx0b3B0aW9uW2ZpZWxkX3ZhbHVlXSAgICA9IG9wdGlvbltmaWVsZF92YWx1ZV0gfHwgdmFsdWU7XG5cdFx0XHRcdG9wdGlvbltmaWVsZF9vcHRncm91cF0gPSBvcHRpb25bZmllbGRfb3B0Z3JvdXBdIHx8IGdyb3VwO1xuXG5cdFx0XHRcdG9wdGlvbnNNYXBbdmFsdWVdID0gb3B0aW9uO1xuXHRcdFx0XHRvcHRpb25zLnB1c2gob3B0aW9uKTtcblxuXHRcdFx0XHRpZiAoJG9wdGlvbi5pcygnOnNlbGVjdGVkJykpIHtcblx0XHRcdFx0XHRzZXR0aW5nc19lbGVtZW50Lml0ZW1zLnB1c2godmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHR2YXIgYWRkR3JvdXAgPSBmdW5jdGlvbigkb3B0Z3JvdXApIHtcblx0XHRcdFx0dmFyIGksIG4sIGlkLCBvcHRncm91cCwgJG9wdGlvbnM7XG5cblx0XHRcdFx0JG9wdGdyb3VwID0gJCgkb3B0Z3JvdXApO1xuXHRcdFx0XHRpZCA9ICRvcHRncm91cC5hdHRyKCdsYWJlbCcpO1xuXG5cdFx0XHRcdGlmIChpZCkge1xuXHRcdFx0XHRcdG9wdGdyb3VwID0gcmVhZERhdGEoJG9wdGdyb3VwKSB8fCB7fTtcblx0XHRcdFx0XHRvcHRncm91cFtmaWVsZF9vcHRncm91cF9sYWJlbF0gPSBpZDtcblx0XHRcdFx0XHRvcHRncm91cFtmaWVsZF9vcHRncm91cF92YWx1ZV0gPSBpZDtcblx0XHRcdFx0XHRzZXR0aW5nc19lbGVtZW50Lm9wdGdyb3Vwcy5wdXNoKG9wdGdyb3VwKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdCRvcHRpb25zID0gJCgnb3B0aW9uJywgJG9wdGdyb3VwKTtcblx0XHRcdFx0Zm9yIChpID0gMCwgbiA9ICRvcHRpb25zLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHRcdGFkZE9wdGlvbigkb3B0aW9uc1tpXSwgaWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHRzZXR0aW5nc19lbGVtZW50Lm1heEl0ZW1zID0gJGlucHV0LmF0dHIoJ211bHRpcGxlJykgPyBudWxsIDogMTtcblxuXHRcdFx0JGNoaWxkcmVuID0gJGlucHV0LmNoaWxkcmVuKCk7XG5cdFx0XHRmb3IgKGkgPSAwLCBuID0gJGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHR0YWdOYW1lID0gJGNoaWxkcmVuW2ldLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0aWYgKHRhZ05hbWUgPT09ICdvcHRncm91cCcpIHtcblx0XHRcdFx0XHRhZGRHcm91cCgkY2hpbGRyZW5baV0pO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRhZ05hbWUgPT09ICdvcHRpb24nKSB7XG5cdFx0XHRcdFx0YWRkT3B0aW9uKCRjaGlsZHJlbltpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGlmICh0aGlzLnNlbGVjdGl6ZSkgcmV0dXJuO1xuXG5cdFx0XHR2YXIgaW5zdGFuY2U7XG5cdFx0XHR2YXIgJGlucHV0ID0gJCh0aGlzKTtcblx0XHRcdHZhciB0YWdfbmFtZSA9IHRoaXMudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0dmFyIHBsYWNlaG9sZGVyID0gJGlucHV0LmF0dHIoJ3BsYWNlaG9sZGVyJykgfHwgJGlucHV0LmF0dHIoJ2RhdGEtcGxhY2Vob2xkZXInKTtcblx0XHRcdGlmICghcGxhY2Vob2xkZXIgJiYgIXNldHRpbmdzLmFsbG93RW1wdHlPcHRpb24pIHtcblx0XHRcdFx0cGxhY2Vob2xkZXIgPSAkaW5wdXQuY2hpbGRyZW4oJ29wdGlvblt2YWx1ZT1cIlwiXScpLnRleHQoKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHNldHRpbmdzX2VsZW1lbnQgPSB7XG5cdFx0XHRcdCdwbGFjZWhvbGRlcicgOiBwbGFjZWhvbGRlcixcblx0XHRcdFx0J29wdGlvbnMnICAgICA6IFtdLFxuXHRcdFx0XHQnb3B0Z3JvdXBzJyAgIDogW10sXG5cdFx0XHRcdCdpdGVtcycgICAgICAgOiBbXVxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKHRhZ19uYW1lID09PSAnc2VsZWN0Jykge1xuXHRcdFx0XHRpbml0X3NlbGVjdCgkaW5wdXQsIHNldHRpbmdzX2VsZW1lbnQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aW5pdF90ZXh0Ym94KCRpbnB1dCwgc2V0dGluZ3NfZWxlbWVudCk7XG5cdFx0XHR9XG5cblx0XHRcdGluc3RhbmNlID0gbmV3IFNlbGVjdGl6ZSgkaW5wdXQsICQuZXh0ZW5kKHRydWUsIHt9LCBkZWZhdWx0cywgc2V0dGluZ3NfZWxlbWVudCwgc2V0dGluZ3NfdXNlcikpO1xuXHRcdH0pO1xuXHR9O1xuXG5cdCQuZm4uc2VsZWN0aXplLmRlZmF1bHRzID0gU2VsZWN0aXplLmRlZmF1bHRzO1xuXHQkLmZuLnNlbGVjdGl6ZS5zdXBwb3J0ID0ge1xuXHRcdHZhbGlkaXR5OiBTVVBQT1JUU19WQUxJRElUWV9BUElcblx0fTtcblxuXG5cdFNlbGVjdGl6ZS5kZWZpbmUoJ2RyYWdfZHJvcCcsIGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0XHRpZiAoISQuZm4uc29ydGFibGUpIHRocm93IG5ldyBFcnJvcignVGhlIFwiZHJhZ19kcm9wXCIgcGx1Z2luIHJlcXVpcmVzIGpRdWVyeSBVSSBcInNvcnRhYmxlXCIuJyk7XG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MubW9kZSAhPT0gJ211bHRpJykgcmV0dXJuO1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdHNlbGYubG9jayA9IChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvcmlnaW5hbCA9IHNlbGYubG9jaztcblx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHNvcnRhYmxlID0gc2VsZi4kY29udHJvbC5kYXRhKCdzb3J0YWJsZScpO1xuXHRcdFx0XHRpZiAoc29ydGFibGUpIHNvcnRhYmxlLmRpc2FibGUoKTtcblx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG5cdFx0XHR9O1xuXHRcdH0pKCk7XG5cblx0XHRzZWxmLnVubG9jayA9IChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvcmlnaW5hbCA9IHNlbGYudW5sb2NrO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgc29ydGFibGUgPSBzZWxmLiRjb250cm9sLmRhdGEoJ3NvcnRhYmxlJyk7XG5cdFx0XHRcdGlmIChzb3J0YWJsZSkgc29ydGFibGUuZW5hYmxlKCk7XG5cdFx0XHRcdHJldHVybiBvcmlnaW5hbC5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuXHRcdFx0fTtcblx0XHR9KSgpO1xuXG5cdFx0c2VsZi5zZXR1cCA9IChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvcmlnaW5hbCA9IHNlbGYuc2V0dXA7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cblx0XHRcdFx0dmFyICRjb250cm9sID0gc2VsZi4kY29udHJvbC5zb3J0YWJsZSh7XG5cdFx0XHRcdFx0aXRlbXM6ICdbZGF0YS12YWx1ZV0nLFxuXHRcdFx0XHRcdGZvcmNlUGxhY2Vob2xkZXJTaXplOiB0cnVlLFxuXHRcdFx0XHRcdGRpc2FibGVkOiBzZWxmLmlzTG9ja2VkLFxuXHRcdFx0XHRcdHN0YXJ0OiBmdW5jdGlvbihlLCB1aSkge1xuXHRcdFx0XHRcdFx0dWkucGxhY2Vob2xkZXIuY3NzKCd3aWR0aCcsIHVpLmhlbHBlci5jc3MoJ3dpZHRoJykpO1xuXHRcdFx0XHRcdFx0JGNvbnRyb2wuY3NzKHtvdmVyZmxvdzogJ3Zpc2libGUnfSk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRzdG9wOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdCRjb250cm9sLmNzcyh7b3ZlcmZsb3c6ICdoaWRkZW4nfSk7XG5cdFx0XHRcdFx0XHR2YXIgYWN0aXZlID0gc2VsZi4kYWN0aXZlSXRlbXMgPyBzZWxmLiRhY3RpdmVJdGVtcy5zbGljZSgpIDogbnVsbDtcblx0XHRcdFx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcblx0XHRcdFx0XHRcdCRjb250cm9sLmNoaWxkcmVuKCdbZGF0YS12YWx1ZV0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCgkKHRoaXMpLmF0dHIoJ2RhdGEtdmFsdWUnKSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdHNlbGYuc2V0VmFsdWUodmFsdWVzKTtcblx0XHRcdFx0XHRcdHNlbGYuc2V0QWN0aXZlSXRlbShhY3RpdmUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9O1xuXHRcdH0pKCk7XG5cblx0fSk7XG5cblx0U2VsZWN0aXplLmRlZmluZSgnZHJvcGRvd25faGVhZGVyJywgZnVuY3Rpb24ob3B0aW9ucykge1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdG9wdGlvbnMgPSAkLmV4dGVuZCh7XG5cdFx0XHR0aXRsZSAgICAgICAgIDogJ1VudGl0bGVkJyxcblx0XHRcdGhlYWRlckNsYXNzICAgOiAnc2VsZWN0aXplLWRyb3Bkb3duLWhlYWRlcicsXG5cdFx0XHR0aXRsZVJvd0NsYXNzIDogJ3NlbGVjdGl6ZS1kcm9wZG93bi1oZWFkZXItdGl0bGUnLFxuXHRcdFx0bGFiZWxDbGFzcyAgICA6ICdzZWxlY3RpemUtZHJvcGRvd24taGVhZGVyLWxhYmVsJyxcblx0XHRcdGNsb3NlQ2xhc3MgICAgOiAnc2VsZWN0aXplLWRyb3Bkb3duLWhlYWRlci1jbG9zZScsXG5cblx0XHRcdGh0bWw6IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdFx0cmV0dXJuIChcblx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIicgKyBkYXRhLmhlYWRlckNsYXNzICsgJ1wiPicgK1xuXHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCInICsgZGF0YS50aXRsZVJvd0NsYXNzICsgJ1wiPicgK1xuXHRcdFx0XHRcdFx0XHQnPHNwYW4gY2xhc3M9XCInICsgZGF0YS5sYWJlbENsYXNzICsgJ1wiPicgKyBkYXRhLnRpdGxlICsgJzwvc3Bhbj4nICtcblx0XHRcdFx0XHRcdFx0JzxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBjbGFzcz1cIicgKyBkYXRhLmNsb3NlQ2xhc3MgKyAnXCI+JnRpbWVzOzwvYT4nICtcblx0XHRcdFx0XHRcdCc8L2Rpdj4nICtcblx0XHRcdFx0XHQnPC9kaXY+J1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0sIG9wdGlvbnMpO1xuXG5cdFx0c2VsZi5zZXR1cCA9IChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvcmlnaW5hbCA9IHNlbGYuc2V0dXA7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG9yaWdpbmFsLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdHNlbGYuJGRyb3Bkb3duX2hlYWRlciA9ICQob3B0aW9ucy5odG1sKG9wdGlvbnMpKTtcblx0XHRcdFx0c2VsZi4kZHJvcGRvd24ucHJlcGVuZChzZWxmLiRkcm9wZG93bl9oZWFkZXIpO1xuXHRcdFx0fTtcblx0XHR9KSgpO1xuXG5cdH0pO1xuXG5cdFNlbGVjdGl6ZS5kZWZpbmUoJ29wdGdyb3VwX2NvbHVtbnMnLCBmdW5jdGlvbihvcHRpb25zKSB7XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKHtcblx0XHRcdGVxdWFsaXplV2lkdGggIDogdHJ1ZSxcblx0XHRcdGVxdWFsaXplSGVpZ2h0IDogdHJ1ZVxuXHRcdH0sIG9wdGlvbnMpO1xuXG5cdFx0dGhpcy5nZXRBZGphY2VudE9wdGlvbiA9IGZ1bmN0aW9uKCRvcHRpb24sIGRpcmVjdGlvbikge1xuXHRcdFx0dmFyICRvcHRpb25zID0gJG9wdGlvbi5jbG9zZXN0KCdbZGF0YS1ncm91cF0nKS5maW5kKCdbZGF0YS1zZWxlY3RhYmxlXScpO1xuXHRcdFx0dmFyIGluZGV4ICAgID0gJG9wdGlvbnMuaW5kZXgoJG9wdGlvbikgKyBkaXJlY3Rpb247XG5cblx0XHRcdHJldHVybiBpbmRleCA+PSAwICYmIGluZGV4IDwgJG9wdGlvbnMubGVuZ3RoID8gJG9wdGlvbnMuZXEoaW5kZXgpIDogJCgpO1xuXHRcdH07XG5cblx0XHR0aGlzLm9uS2V5RG93biA9IChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvcmlnaW5hbCA9IHNlbGYub25LZXlEb3duO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0dmFyIGluZGV4LCAkb3B0aW9uLCAkb3B0aW9ucywgJG9wdGdyb3VwO1xuXG5cdFx0XHRcdGlmICh0aGlzLmlzT3BlbiAmJiAoZS5rZXlDb2RlID09PSBLRVlfTEVGVCB8fCBlLmtleUNvZGUgPT09IEtFWV9SSUdIVCkpIHtcblx0XHRcdFx0XHRzZWxmLmlnbm9yZUhvdmVyID0gdHJ1ZTtcblx0XHRcdFx0XHQkb3B0Z3JvdXAgPSB0aGlzLiRhY3RpdmVPcHRpb24uY2xvc2VzdCgnW2RhdGEtZ3JvdXBdJyk7XG5cdFx0XHRcdFx0aW5kZXggPSAkb3B0Z3JvdXAuZmluZCgnW2RhdGEtc2VsZWN0YWJsZV0nKS5pbmRleCh0aGlzLiRhY3RpdmVPcHRpb24pO1xuXG5cdFx0XHRcdFx0aWYoZS5rZXlDb2RlID09PSBLRVlfTEVGVCkge1xuXHRcdFx0XHRcdFx0JG9wdGdyb3VwID0gJG9wdGdyb3VwLnByZXYoJ1tkYXRhLWdyb3VwXScpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQkb3B0Z3JvdXAgPSAkb3B0Z3JvdXAubmV4dCgnW2RhdGEtZ3JvdXBdJyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0JG9wdGlvbnMgPSAkb3B0Z3JvdXAuZmluZCgnW2RhdGEtc2VsZWN0YWJsZV0nKTtcblx0XHRcdFx0XHQkb3B0aW9uICA9ICRvcHRpb25zLmVxKE1hdGgubWluKCRvcHRpb25zLmxlbmd0aCAtIDEsIGluZGV4KSk7XG5cdFx0XHRcdFx0aWYgKCRvcHRpb24ubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnNldEFjdGl2ZU9wdGlvbigkb3B0aW9uKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHR9O1xuXHRcdH0pKCk7XG5cblx0XHR2YXIgZ2V0U2Nyb2xsYmFyV2lkdGggPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkaXY7XG5cdFx0XHR2YXIgd2lkdGggPSBnZXRTY3JvbGxiYXJXaWR0aC53aWR0aDtcblx0XHRcdHZhciBkb2MgPSBkb2N1bWVudDtcblxuXHRcdFx0aWYgKHR5cGVvZiB3aWR0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0ZGl2ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdFx0XHRkaXYuaW5uZXJIVE1MID0gJzxkaXYgc3R5bGU9XCJ3aWR0aDo1MHB4O2hlaWdodDo1MHB4O3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTUwcHg7dG9wOi01MHB4O292ZXJmbG93OmF1dG87XCI+PGRpdiBzdHlsZT1cIndpZHRoOjFweDtoZWlnaHQ6MTAwcHg7XCI+PC9kaXY+PC9kaXY+Jztcblx0XHRcdFx0ZGl2ID0gZGl2LmZpcnN0Q2hpbGQ7XG5cdFx0XHRcdGRvYy5ib2R5LmFwcGVuZENoaWxkKGRpdik7XG5cdFx0XHRcdHdpZHRoID0gZ2V0U2Nyb2xsYmFyV2lkdGgud2lkdGggPSBkaXYub2Zmc2V0V2lkdGggLSBkaXYuY2xpZW50V2lkdGg7XG5cdFx0XHRcdGRvYy5ib2R5LnJlbW92ZUNoaWxkKGRpdik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gd2lkdGg7XG5cdFx0fTtcblxuXHRcdHZhciBlcXVhbGl6ZVNpemVzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSwgbiwgaGVpZ2h0X21heCwgd2lkdGgsIHdpZHRoX2xhc3QsIHdpZHRoX3BhcmVudCwgJG9wdGdyb3VwcztcblxuXHRcdFx0JG9wdGdyb3VwcyA9ICQoJ1tkYXRhLWdyb3VwXScsIHNlbGYuJGRyb3Bkb3duX2NvbnRlbnQpO1xuXHRcdFx0biA9ICRvcHRncm91cHMubGVuZ3RoO1xuXHRcdFx0aWYgKCFuIHx8ICFzZWxmLiRkcm9wZG93bl9jb250ZW50LndpZHRoKCkpIHJldHVybjtcblxuXHRcdFx0aWYgKG9wdGlvbnMuZXF1YWxpemVIZWlnaHQpIHtcblx0XHRcdFx0aGVpZ2h0X21heCA9IDA7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0XHRoZWlnaHRfbWF4ID0gTWF0aC5tYXgoaGVpZ2h0X21heCwgJG9wdGdyb3Vwcy5lcShpKS5oZWlnaHQoKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0JG9wdGdyb3Vwcy5jc3Moe2hlaWdodDogaGVpZ2h0X21heH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3B0aW9ucy5lcXVhbGl6ZVdpZHRoKSB7XG5cdFx0XHRcdHdpZHRoX3BhcmVudCA9IHNlbGYuJGRyb3Bkb3duX2NvbnRlbnQuaW5uZXJXaWR0aCgpIC0gZ2V0U2Nyb2xsYmFyV2lkdGgoKTtcblx0XHRcdFx0d2lkdGggPSBNYXRoLnJvdW5kKHdpZHRoX3BhcmVudCAvIG4pO1xuXHRcdFx0XHQkb3B0Z3JvdXBzLmNzcyh7d2lkdGg6IHdpZHRofSk7XG5cdFx0XHRcdGlmIChuID4gMSkge1xuXHRcdFx0XHRcdHdpZHRoX2xhc3QgPSB3aWR0aF9wYXJlbnQgLSB3aWR0aCAqIChuIC0gMSk7XG5cdFx0XHRcdFx0JG9wdGdyb3Vwcy5lcShuIC0gMSkuY3NzKHt3aWR0aDogd2lkdGhfbGFzdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGlmIChvcHRpb25zLmVxdWFsaXplSGVpZ2h0IHx8IG9wdGlvbnMuZXF1YWxpemVXaWR0aCkge1xuXHRcdFx0aG9vay5hZnRlcih0aGlzLCAncG9zaXRpb25Ecm9wZG93bicsIGVxdWFsaXplU2l6ZXMpO1xuXHRcdFx0aG9vay5hZnRlcih0aGlzLCAncmVmcmVzaE9wdGlvbnMnLCBlcXVhbGl6ZVNpemVzKTtcblx0XHR9XG5cblxuXHR9KTtcblxuXHRTZWxlY3RpemUuZGVmaW5lKCdyZW1vdmVfYnV0dG9uJywgZnVuY3Rpb24ob3B0aW9ucykge1xuXHRcdG9wdGlvbnMgPSAkLmV4dGVuZCh7XG5cdFx0XHRcdGxhYmVsICAgICA6ICcmdGltZXM7Jyxcblx0XHRcdFx0dGl0bGUgICAgIDogJ1JlbW92ZScsXG5cdFx0XHRcdGNsYXNzTmFtZSA6ICdyZW1vdmUnLFxuXHRcdFx0XHRhcHBlbmQgICAgOiB0cnVlXG5cdFx0XHR9LCBvcHRpb25zKTtcblxuXHRcdFx0dmFyIHNpbmdsZUNsb3NlID0gZnVuY3Rpb24odGhpc1JlZiwgb3B0aW9ucykge1xuXG5cdFx0XHRcdG9wdGlvbnMuY2xhc3NOYW1lID0gJ3JlbW92ZS1zaW5nbGUnO1xuXG5cdFx0XHRcdHZhciBzZWxmID0gdGhpc1JlZjtcblx0XHRcdFx0dmFyIGh0bWwgPSAnPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGNsYXNzPVwiJyArIG9wdGlvbnMuY2xhc3NOYW1lICsgJ1wiIHRhYmluZGV4PVwiLTFcIiB0aXRsZT1cIicgKyBlc2NhcGVfaHRtbChvcHRpb25zLnRpdGxlKSArICdcIj4nICsgb3B0aW9ucy5sYWJlbCArICc8L2E+JztcblxuXHRcdFx0XHQvKipcblx0XHRcdFx0ICogQXBwZW5kcyBhbiBlbGVtZW50IGFzIGEgY2hpbGQgKHdpdGggcmF3IEhUTUwpLlxuXHRcdFx0XHQgKlxuXHRcdFx0XHQgKiBAcGFyYW0ge3N0cmluZ30gaHRtbF9jb250YWluZXJcblx0XHRcdFx0ICogQHBhcmFtIHtzdHJpbmd9IGh0bWxfZWxlbWVudFxuXHRcdFx0XHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdFx0XHRcdCAqL1xuXHRcdFx0XHR2YXIgYXBwZW5kID0gZnVuY3Rpb24oaHRtbF9jb250YWluZXIsIGh0bWxfZWxlbWVudCkge1xuXHRcdFx0XHRcdHJldHVybiBodG1sX2NvbnRhaW5lciArIGh0bWxfZWxlbWVudDtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzUmVmLnNldHVwID0gKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciBvcmlnaW5hbCA9IHNlbGYuc2V0dXA7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0Ly8gb3ZlcnJpZGUgdGhlIGl0ZW0gcmVuZGVyaW5nIG1ldGhvZCB0byBhZGQgdGhlIGJ1dHRvbiB0byBlYWNoXG5cdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5hcHBlbmQpIHtcblx0XHRcdFx0XHRcdFx0dmFyIGlkID0gJChzZWxmLiRpbnB1dC5jb250ZXh0KS5hdHRyKCdpZCcpO1xuXHRcdFx0XHRcdFx0XHR2YXIgc2VsZWN0aXplciA9ICQoJyMnK2lkKTtcblxuXHRcdFx0XHRcdFx0XHR2YXIgcmVuZGVyX2l0ZW0gPSBzZWxmLnNldHRpbmdzLnJlbmRlci5pdGVtO1xuXHRcdFx0XHRcdFx0XHRzZWxmLnNldHRpbmdzLnJlbmRlci5pdGVtID0gZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBhcHBlbmQocmVuZGVyX2l0ZW0uYXBwbHkodGhpc1JlZiwgYXJndW1lbnRzKSwgaHRtbCk7XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdG9yaWdpbmFsLmFwcGx5KHRoaXNSZWYsIGFyZ3VtZW50cyk7XG5cblx0XHRcdFx0XHRcdC8vIGFkZCBldmVudCBsaXN0ZW5lclxuXHRcdFx0XHRcdFx0dGhpc1JlZi4kY29udHJvbC5vbignY2xpY2snLCAnLicgKyBvcHRpb25zLmNsYXNzTmFtZSwgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGlmIChzZWxmLmlzTG9ja2VkKSByZXR1cm47XG5cblx0XHRcdFx0XHRcdFx0c2VsZi5jbGVhcigpO1xuXHRcdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KSgpO1xuXHRcdFx0fTtcblxuXHRcdFx0dmFyIG11bHRpQ2xvc2UgPSBmdW5jdGlvbih0aGlzUmVmLCBvcHRpb25zKSB7XG5cblx0XHRcdFx0dmFyIHNlbGYgPSB0aGlzUmVmO1xuXHRcdFx0XHR2YXIgaHRtbCA9ICc8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCIgY2xhc3M9XCInICsgb3B0aW9ucy5jbGFzc05hbWUgKyAnXCIgdGFiaW5kZXg9XCItMVwiIHRpdGxlPVwiJyArIGVzY2FwZV9odG1sKG9wdGlvbnMudGl0bGUpICsgJ1wiPicgKyBvcHRpb25zLmxhYmVsICsgJzwvYT4nO1xuXG5cdFx0XHRcdC8qKlxuXHRcdFx0XHQgKiBBcHBlbmRzIGFuIGVsZW1lbnQgYXMgYSBjaGlsZCAod2l0aCByYXcgSFRNTCkuXG5cdFx0XHRcdCAqXG5cdFx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBodG1sX2NvbnRhaW5lclxuXHRcdFx0XHQgKiBAcGFyYW0ge3N0cmluZ30gaHRtbF9lbGVtZW50XG5cdFx0XHRcdCAqIEByZXR1cm4ge3N0cmluZ31cblx0XHRcdFx0ICovXG5cdFx0XHRcdHZhciBhcHBlbmQgPSBmdW5jdGlvbihodG1sX2NvbnRhaW5lciwgaHRtbF9lbGVtZW50KSB7XG5cdFx0XHRcdFx0dmFyIHBvcyA9IGh0bWxfY29udGFpbmVyLnNlYXJjaCgvKDxcXC9bXj5dKz5cXHMqKSQvKTtcblx0XHRcdFx0XHRyZXR1cm4gaHRtbF9jb250YWluZXIuc3Vic3RyaW5nKDAsIHBvcykgKyBodG1sX2VsZW1lbnQgKyBodG1sX2NvbnRhaW5lci5zdWJzdHJpbmcocG9zKTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzUmVmLnNldHVwID0gKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciBvcmlnaW5hbCA9IHNlbGYuc2V0dXA7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0Ly8gb3ZlcnJpZGUgdGhlIGl0ZW0gcmVuZGVyaW5nIG1ldGhvZCB0byBhZGQgdGhlIGJ1dHRvbiB0byBlYWNoXG5cdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5hcHBlbmQpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHJlbmRlcl9pdGVtID0gc2VsZi5zZXR0aW5ncy5yZW5kZXIuaXRlbTtcblx0XHRcdFx0XHRcdFx0c2VsZi5zZXR0aW5ncy5yZW5kZXIuaXRlbSA9IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gYXBwZW5kKHJlbmRlcl9pdGVtLmFwcGx5KHRoaXNSZWYsIGFyZ3VtZW50cyksIGh0bWwpO1xuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRvcmlnaW5hbC5hcHBseSh0aGlzUmVmLCBhcmd1bWVudHMpO1xuXG5cdFx0XHRcdFx0XHQvLyBhZGQgZXZlbnQgbGlzdGVuZXJcblx0XHRcdFx0XHRcdHRoaXNSZWYuJGNvbnRyb2wub24oJ2NsaWNrJywgJy4nICsgb3B0aW9ucy5jbGFzc05hbWUsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRpZiAoc2VsZi5pc0xvY2tlZCkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0XHRcdHZhciAkaXRlbSA9ICQoZS5jdXJyZW50VGFyZ2V0KS5wYXJlbnQoKTtcblx0XHRcdFx0XHRcdFx0c2VsZi5zZXRBY3RpdmVJdGVtKCRpdGVtKTtcblx0XHRcdFx0XHRcdFx0aWYgKHNlbGYuZGVsZXRlU2VsZWN0aW9uKCkpIHtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLnNldENhcmV0KHNlbGYuaXRlbXMubGVuZ3RoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KSgpO1xuXHRcdFx0fTtcblxuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MubW9kZSA9PT0gJ3NpbmdsZScpIHtcblx0XHRcdFx0c2luZ2xlQ2xvc2UodGhpcywgb3B0aW9ucyk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG11bHRpQ2xvc2UodGhpcywgb3B0aW9ucyk7XG5cdFx0XHR9XG5cdH0pO1xuXG5cblx0U2VsZWN0aXplLmRlZmluZSgncmVzdG9yZV9vbl9iYWNrc3BhY2UnLCBmdW5jdGlvbihvcHRpb25zKSB7XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0b3B0aW9ucy50ZXh0ID0gb3B0aW9ucy50ZXh0IHx8IGZ1bmN0aW9uKG9wdGlvbikge1xuXHRcdFx0cmV0dXJuIG9wdGlvblt0aGlzLnNldHRpbmdzLmxhYmVsRmllbGRdO1xuXHRcdH07XG5cblx0XHR0aGlzLm9uS2V5RG93biA9IChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvcmlnaW5hbCA9IHNlbGYub25LZXlEb3duO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0dmFyIGluZGV4LCBvcHRpb247XG5cdFx0XHRcdGlmIChlLmtleUNvZGUgPT09IEtFWV9CQUNLU1BBQ0UgJiYgdGhpcy4kY29udHJvbF9pbnB1dC52YWwoKSA9PT0gJycgJiYgIXRoaXMuJGFjdGl2ZUl0ZW1zLmxlbmd0aCkge1xuXHRcdFx0XHRcdGluZGV4ID0gdGhpcy5jYXJldFBvcyAtIDE7XG5cdFx0XHRcdFx0aWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLml0ZW1zLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uID0gdGhpcy5vcHRpb25zW3RoaXMuaXRlbXNbaW5kZXhdXTtcblx0XHRcdFx0XHRcdGlmICh0aGlzLmRlbGV0ZVNlbGVjdGlvbihlKSkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnNldFRleHRib3hWYWx1ZShvcHRpb25zLnRleHQuYXBwbHkodGhpcywgW29wdGlvbl0pKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5yZWZyZXNoT3B0aW9ucyh0cnVlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHR9O1xuXHRcdH0pKCk7XG5cdH0pO1xuXG5cblx0cmV0dXJuIFNlbGVjdGl6ZTtcbn0pKTtcbiIsIi8qXG4gKiBDb2xsYXBzZSBwbHVnaW4gZm9yIGpRdWVyeVxuICogLS1cbiAqIHNvdXJjZTogaHR0cDovL2dpdGh1Yi5jb20vZGFuaWVsc3RvY2tzL2pRdWVyeS1Db2xsYXBzZS9cbiAqIHNpdGU6IGh0dHA6Ly93ZWJjbG91ZC5zZS9qUXVlcnktQ29sbGFwc2VcbiAqXG4gKiBAYXV0aG9yIERhbmllbCBTdG9ja3MgKGh0dHA6Ly93ZWJjbG91ZC5zZSlcbiAqIENvcHlyaWdodCAyMDEzLCBEYW5pZWwgU3RvY2tzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlULCBCU0QsIGFuZCBHUEwgTGljZW5zZXMuXG4gKi9cblxuKGZ1bmN0aW9uICgkLCBleHBvcnRzKSB7XG5cblx0Ly8gQ29uc3RydWN0b3Jcblx0ZnVuY3Rpb24gQ29sbGFwc2UoZWwsIG9wdGlvbnMpIHtcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0XHR2YXIgX3RoaXMgPSB0aGlzLFxuXHRcdFx0cXVlcnkgPSBvcHRpb25zLnF1ZXJ5IHx8IFwiPiA6ZXZlblwiO1xuXG5cdFx0JC5leHRlbmQoX3RoaXMsIHtcblx0XHRcdCRlbDogZWwsXG5cdFx0XHRvcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c2VjdGlvbnM6IFtdLFxuXHRcdFx0aXNBY2NvcmRpb246IG9wdGlvbnMuYWNjb3JkaW9uIHx8IGZhbHNlLFxuXHRcdFx0ZGI6IG9wdGlvbnMucGVyc2lzdCA/IGpRdWVyeUNvbGxhcHNlU3RvcmFnZShlbC5nZXQoMCkuaWQpIDogZmFsc2Vcblx0XHR9KTtcblxuXHRcdC8vIEZpZ3VyZSBvdXQgd2hhdCBzZWN0aW9ucyBhcmUgb3BlbiBpZiBzdG9yYWdlIGlzIHVzZWRcblx0XHRfdGhpcy5zdGF0ZXMgPSBfdGhpcy5kYiA/IF90aGlzLmRiLnJlYWQoKSA6IFtdO1xuXG5cdFx0Ly8gRm9yIGV2ZXJ5IHBhaXIgb2YgZWxlbWVudHMgaW4gZ2l2ZW5cblx0XHQvLyBlbGVtZW50LCBjcmVhdGUgYSBzZWN0aW9uXG5cdFx0X3RoaXMuJGVsLmZpbmQocXVlcnkpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0bmV3IGpRdWVyeUNvbGxhcHNlU2VjdGlvbigkKHRoaXMpLCBfdGhpcyk7XG5cdFx0fSk7XG5cblx0XHQvLyBDYXB1dGUgQUxMIHRoZSBjbGlja3MhXG5cdFx0KGZ1bmN0aW9uIChzY29wZSkge1xuXHRcdFx0X3RoaXMuJGVsLm9uKFwiY2xpY2tcIiwgXCJbZGF0YS1jb2xsYXBzZS1zdW1tYXJ5XSBcIiArIChzY29wZS5vcHRpb25zLmNsaWNrUXVlcnkgfHwgXCJcIiksXG5cdFx0XHRcdCQucHJveHkoX3RoaXMuaGFuZGxlQ2xpY2ssIHNjb3BlKSk7XG5cblx0XHRcdF90aGlzLiRlbC5iaW5kKFwidG9nZ2xlIGNsb3NlIG9wZW5cIixcblx0XHRcdFx0JC5wcm94eShfdGhpcy5oYW5kbGVFdmVudCwgc2NvcGUpKTtcblxuXHRcdH0oX3RoaXMpKTtcblx0fVxuXG5cdENvbGxhcHNlLnByb3RvdHlwZSA9IHtcblx0XHRoYW5kbGVDbGljazogZnVuY3Rpb24gKGUsIHN0YXRlKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRzdGF0ZSA9IHN0YXRlIHx8IFwidG9nZ2xlXCI7XG5cdFx0XHR2YXIgc2VjdGlvbnMgPSB0aGlzLnNlY3Rpb25zLFxuXHRcdFx0XHRsID0gc2VjdGlvbnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKGwtLSkge1xuXHRcdFx0XHRpZiAoJC5jb250YWlucyhzZWN0aW9uc1tsXS4kc3VtbWFyeVswXSwgZS50YXJnZXQpKSB7XG5cdFx0XHRcdFx0c2VjdGlvbnNbbF1bc3RhdGVdKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGhhbmRsZUV2ZW50OiBmdW5jdGlvbiAoZSkge1xuXHRcdFx0aWYgKGUudGFyZ2V0ID09IHRoaXMuJGVsLmdldCgwKSkgcmV0dXJuIHRoaXNbZS50eXBlXSgpO1xuXHRcdFx0dGhpcy5oYW5kbGVDbGljayhlLCBlLnR5cGUpO1xuXHRcdH0sXG5cdFx0b3BlbjogZnVuY3Rpb24gKGVxKSB7XG5cdFx0XHR0aGlzLl9jaGFuZ2UoXCJvcGVuXCIsIGVxKTtcblx0XHR9LFxuXHRcdGNsb3NlOiBmdW5jdGlvbiAoZXEpIHtcblx0XHRcdHRoaXMuX2NoYW5nZShcImNsb3NlXCIsIGVxKTtcblx0XHR9LFxuXHRcdHRvZ2dsZTogZnVuY3Rpb24gKGVxKSB7XG5cdFx0XHR0aGlzLl9jaGFuZ2UoXCJ0b2dnbGVcIiwgZXEpO1xuXHRcdH0sXG5cdFx0X2NoYW5nZTogZnVuY3Rpb24gKGFjdGlvbiwgZXEpIHtcblx0XHRcdGlmIChpc0Zpbml0ZShlcSkpIHJldHVybiB0aGlzLnNlY3Rpb25zW2VxXVthY3Rpb25dKCk7XG5cdFx0XHQkLmVhY2godGhpcy5zZWN0aW9ucywgZnVuY3Rpb24gKGksIHNlY3Rpb24pIHtcblx0XHRcdFx0c2VjdGlvblthY3Rpb25dKCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG5cblx0Ly8gU2VjdGlvbiBjb25zdHJ1Y3RvclxuXHRmdW5jdGlvbiBTZWN0aW9uKCRlbCwgcGFyZW50KSB7XG5cblx0XHRpZiAoIXBhcmVudC5vcHRpb25zLmNsaWNrUXVlcnkpICRlbC53cmFwSW5uZXIoJzxhIGhyZWY9XCIjXCIvPicpO1xuXG5cdFx0JC5leHRlbmQodGhpcywge1xuXHRcdFx0aXNPcGVuOiBmYWxzZSxcblx0XHRcdCRzdW1tYXJ5OiAkZWwuYXR0cihcImRhdGEtY29sbGFwc2Utc3VtbWFyeVwiLCBcIlwiKSxcblx0XHRcdCRkZXRhaWxzOiAkZWwubmV4dCgpLFxuXHRcdFx0b3B0aW9uczogcGFyZW50Lm9wdGlvbnMsXG5cdFx0XHRwYXJlbnQ6IHBhcmVudFxuXHRcdH0pO1xuXHRcdHBhcmVudC5zZWN0aW9ucy5wdXNoKHRoaXMpO1xuXG5cdFx0Ly8gQ2hlY2sgY3VycmVudCBzdGF0ZSBvZiBzZWN0aW9uXG5cdFx0dmFyIHN0YXRlID0gcGFyZW50LnN0YXRlc1t0aGlzLl9pbmRleCgpXTtcblxuXHRcdGlmIChzdGF0ZSA9PT0gMCkge1xuXHRcdFx0dGhpcy5jbG9zZSh0cnVlKTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAodGhpcy4kc3VtbWFyeS5pcyhcIi5vcGVuXCIpIHx8IHN0YXRlID09PSAxKSB7XG5cdFx0XHR0aGlzLm9wZW4odHJ1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuY2xvc2UodHJ1ZSk7XG5cdFx0fVxuXHR9XG5cblx0U2VjdGlvbi5wcm90b3R5cGUgPSB7XG5cdFx0dG9nZ2xlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLmlzT3BlbiA/IHRoaXMuY2xvc2UoKSA6IHRoaXMub3BlbigpO1xuXHRcdH0sXG5cdFx0Y2xvc2U6IGZ1bmN0aW9uIChieXBhc3MpIHtcblx0XHRcdHRoaXMuX2NoYW5nZVN0YXRlKFwiY2xvc2VcIiwgYnlwYXNzKTtcblx0XHR9LFxuXHRcdG9wZW46IGZ1bmN0aW9uIChieXBhc3MpIHtcblx0XHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cdFx0XHRpZiAoX3RoaXMub3B0aW9ucy5hY2NvcmRpb24gJiYgIWJ5cGFzcykge1xuXHRcdFx0XHQkLmVhY2goX3RoaXMucGFyZW50LnNlY3Rpb25zLCBmdW5jdGlvbiAoaSwgc2VjdGlvbikge1xuXHRcdFx0XHRcdHNlY3Rpb24uY2xvc2UoKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRfdGhpcy5fY2hhbmdlU3RhdGUoXCJvcGVuXCIsIGJ5cGFzcyk7XG5cdFx0fSxcblx0XHRfaW5kZXg6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiAkLmluQXJyYXkodGhpcywgdGhpcy5wYXJlbnQuc2VjdGlvbnMpO1xuXHRcdH0sXG5cdFx0X2NoYW5nZVN0YXRlOiBmdW5jdGlvbiAoc3RhdGUsIGJ5cGFzcykge1xuXG5cdFx0XHR2YXIgX3RoaXMgPSB0aGlzO1xuXHRcdFx0X3RoaXMuaXNPcGVuID0gc3RhdGUgPT0gXCJvcGVuXCI7XG5cdFx0XHRpZiAoJC5pc0Z1bmN0aW9uKF90aGlzLm9wdGlvbnNbc3RhdGVdKSAmJiAhYnlwYXNzKSB7XG5cdFx0XHRcdF90aGlzLm9wdGlvbnNbc3RhdGVdLmFwcGx5KF90aGlzLiRkZXRhaWxzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdF90aGlzLiRkZXRhaWxzW190aGlzLmlzT3BlbiA/IFwic2hvd1wiIDogXCJoaWRlXCJdKCk7XG5cdFx0XHR9XG5cblx0XHRcdF90aGlzLiRzdW1tYXJ5LnRvZ2dsZUNsYXNzKFwib3BlblwiLCBzdGF0ZSAhPT0gXCJjbG9zZVwiKTtcblx0XHRcdF90aGlzLiRkZXRhaWxzLmF0dHIoXCJhcmlhLWhpZGRlblwiLCBzdGF0ZSA9PT0gXCJjbG9zZVwiKTtcblx0XHRcdF90aGlzLiRzdW1tYXJ5LmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsIHN0YXRlID09PSBcIm9wZW5cIik7XG5cdFx0XHRfdGhpcy4kc3VtbWFyeS50cmlnZ2VyKHN0YXRlID09PSBcIm9wZW5cIiA/IFwib3BlbmVkXCIgOiBcImNsb3NlZFwiLCBfdGhpcyk7XG5cdFx0XHRpZiAoX3RoaXMucGFyZW50LmRiKSB7XG5cdFx0XHRcdF90aGlzLnBhcmVudC5kYi53cml0ZShfdGhpcy5faW5kZXgoKSwgX3RoaXMuaXNPcGVuKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Ly8gRXhwb3NlIGluIGpRdWVyeSBBUElcblx0JC5mbi5leHRlbmQoe1xuXHRcdGNvbGxhcHNlOiBmdW5jdGlvbiAob3B0aW9ucywgc2Nhbikge1xuXHRcdFx0dmFyIG5vZGVzID0gKHNjYW4pID8gJChcImJvZHlcIikuZmluZChcIltkYXRhLWNvbGxhcHNlXVwiKSA6ICQodGhpcyk7XG5cdFx0XHRyZXR1cm4gbm9kZXMuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciBzZXR0aW5ncyA9IChzY2FuKSA/IHt9IDogb3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSAkKHRoaXMpLmF0dHIoXCJkYXRhLWNvbGxhcHNlXCIpIHx8IFwiXCI7XG5cdFx0XHRcdCQuZWFjaCh2YWx1ZXMuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiAoaSwgdikge1xuXHRcdFx0XHRcdGlmICh2KSBzZXR0aW5nc1t2XSA9IHRydWU7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRuZXcgQ29sbGFwc2UoJCh0aGlzKSwgc2V0dGluZ3MpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBFeHBvc2UgY29uc3RydWN0b3IgdG9cblx0Ly8gZ2xvYmFsIG5hbWVzcGFjZVxuXHRleHBvcnRzLmpRdWVyeUNvbGxhcHNlID0gQ29sbGFwc2U7XG5cdGV4cG9ydHMualF1ZXJ5Q29sbGFwc2VTZWN0aW9uID0gU2VjdGlvbjtcblxuXHQvL2pRdWVyeSBET00gUmVhZHlcblx0JChmdW5jdGlvbiAoKSB7XG5cdFx0JC5mbi5jb2xsYXBzZShmYWxzZSwgdHJ1ZSk7XG5cdH0pO1xuXG59KSh3aW5kb3cualF1ZXJ5LCB3aW5kb3cpO1xuIiwiLyohXG4gKiBjbGlwYm9hcmQuanMgdjEuNS4xMlxuICogaHR0cHM6Ly96ZW5vcm9jaGEuZ2l0aHViLmlvL2NsaXBib2FyZC5qc1xuICpcbiAqIExpY2Vuc2VkIE1JVCDCqSBaZW5vIFJvY2hhXG4gKi9cbihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGUhPT1cInVuZGVmaW5lZFwiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCIpe2c9c2VsZn1lbHNle2c9dGhpc31nLkNsaXBib2FyZCA9IGYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBtYXRjaGVzID0gcmVxdWlyZSgnbWF0Y2hlcy1zZWxlY3RvcicpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGVsZW1lbnQsIHNlbGVjdG9yLCBjaGVja1lvU2VsZikge1xuICB2YXIgcGFyZW50ID0gY2hlY2tZb1NlbGYgPyBlbGVtZW50IDogZWxlbWVudC5wYXJlbnROb2RlXG5cbiAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQgIT09IGRvY3VtZW50KSB7XG4gICAgaWYgKG1hdGNoZXMocGFyZW50LCBzZWxlY3RvcikpIHJldHVybiBwYXJlbnQ7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGVcbiAgfVxufVxuXG59LHtcIm1hdGNoZXMtc2VsZWN0b3JcIjo1fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgY2xvc2VzdCA9IHJlcXVpcmUoJ2Nsb3Nlc3QnKTtcblxuLyoqXG4gKiBEZWxlZ2F0ZXMgZXZlbnQgdG8gYSBzZWxlY3Rvci5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHVzZUNhcHR1cmVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZGVsZWdhdGUoZWxlbWVudCwgc2VsZWN0b3IsIHR5cGUsIGNhbGxiYWNrLCB1c2VDYXB0dXJlKSB7XG4gICAgdmFyIGxpc3RlbmVyRm4gPSBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyRm4sIHVzZUNhcHR1cmUpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXJGbiwgdXNlQ2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogRmluZHMgY2xvc2VzdCBtYXRjaCBhbmQgaW52b2tlcyBjYWxsYmFjay5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gbGlzdGVuZXIoZWxlbWVudCwgc2VsZWN0b3IsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5kZWxlZ2F0ZVRhcmdldCA9IGNsb3Nlc3QoZS50YXJnZXQsIHNlbGVjdG9yLCB0cnVlKTtcblxuICAgICAgICBpZiAoZS5kZWxlZ2F0ZVRhcmdldCkge1xuICAgICAgICAgICAgY2FsbGJhY2suY2FsbChlbGVtZW50LCBlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWxlZ2F0ZTtcblxufSx7XCJjbG9zZXN0XCI6MX1dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDaGVjayBpZiBhcmd1bWVudCBpcyBhIEhUTUwgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydHMubm9kZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWRcbiAgICAgICAgJiYgdmFsdWUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudFxuICAgICAgICAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYXJndW1lbnQgaXMgYSBsaXN0IG9mIEhUTUwgZWxlbWVudHMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLm5vZGVMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cbiAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZFxuICAgICAgICAmJiAodHlwZSA9PT0gJ1tvYmplY3QgTm9kZUxpc3RdJyB8fCB0eXBlID09PSAnW29iamVjdCBIVE1MQ29sbGVjdGlvbl0nKVxuICAgICAgICAmJiAoJ2xlbmd0aCcgaW4gdmFsdWUpXG4gICAgICAgICYmICh2YWx1ZS5sZW5ndGggPT09IDAgfHwgZXhwb3J0cy5ub2RlKHZhbHVlWzBdKSk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGFyZ3VtZW50IGlzIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0cy5zdHJpbmcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnXG4gICAgICAgIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhcmd1bWVudCBpcyBhIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0cy5mbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXG4gICAgcmV0dXJuIHR5cGUgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG59LHt9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpcyA9IHJlcXVpcmUoJy4vaXMnKTtcbnZhciBkZWxlZ2F0ZSA9IHJlcXVpcmUoJ2RlbGVnYXRlJyk7XG5cbi8qKlxuICogVmFsaWRhdGVzIGFsbCBwYXJhbXMgYW5kIGNhbGxzIHRoZSByaWdodFxuICogbGlzdGVuZXIgZnVuY3Rpb24gYmFzZWQgb24gaXRzIHRhcmdldCB0eXBlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEhUTUxFbGVtZW50fEhUTUxDb2xsZWN0aW9ufE5vZGVMaXN0fSB0YXJnZXRcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBsaXN0ZW4odGFyZ2V0LCB0eXBlLCBjYWxsYmFjaykge1xuICAgIGlmICghdGFyZ2V0ICYmICF0eXBlICYmICFjYWxsYmFjaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcmVxdWlyZWQgYXJndW1lbnRzJyk7XG4gICAgfVxuXG4gICAgaWYgKCFpcy5zdHJpbmcodHlwZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBTdHJpbmcnKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzLmZuKGNhbGxiYWNrKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGlyZCBhcmd1bWVudCBtdXN0IGJlIGEgRnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICBpZiAoaXMubm9kZSh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiBsaXN0ZW5Ob2RlKHRhcmdldCwgdHlwZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIGlmIChpcy5ub2RlTGlzdCh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiBsaXN0ZW5Ob2RlTGlzdCh0YXJnZXQsIHR5cGUsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXMuc3RyaW5nKHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RlblNlbGVjdG9yKHRhcmdldCwgdHlwZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIFN0cmluZywgSFRNTEVsZW1lbnQsIEhUTUxDb2xsZWN0aW9uLCBvciBOb2RlTGlzdCcpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGEgSFRNTCBlbGVtZW50XG4gKiBhbmQgcmV0dXJucyBhIHJlbW92ZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbGlzdGVuTm9kZShub2RlLCB0eXBlLCBjYWxsYmFjaykge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjayk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQWRkIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGEgbGlzdCBvZiBIVE1MIGVsZW1lbnRzXG4gKiBhbmQgcmV0dXJucyBhIHJlbW92ZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge05vZGVMaXN0fEhUTUxDb2xsZWN0aW9ufSBub2RlTGlzdFxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGxpc3Rlbk5vZGVMaXN0KG5vZGVMaXN0LCB0eXBlLCBjYWxsYmFjaykge1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobm9kZUxpc3QsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChub2RlTGlzdCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgdG8gYSBzZWxlY3RvclxuICogYW5kIHJldHVybnMgYSByZW1vdmUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbGlzdGVuU2VsZWN0b3Ioc2VsZWN0b3IsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGRlbGVnYXRlKGRvY3VtZW50LmJvZHksIHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdGVuO1xuXG59LHtcIi4vaXNcIjozLFwiZGVsZWdhdGVcIjoyfV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cbi8qKlxuICogRWxlbWVudCBwcm90b3R5cGUuXG4gKi9cblxudmFyIHByb3RvID0gRWxlbWVudC5wcm90b3R5cGU7XG5cbi8qKlxuICogVmVuZG9yIGZ1bmN0aW9uLlxuICovXG5cbnZhciB2ZW5kb3IgPSBwcm90by5tYXRjaGVzU2VsZWN0b3JcbiAgfHwgcHJvdG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yXG4gIHx8IHByb3RvLm1vek1hdGNoZXNTZWxlY3RvclxuICB8fCBwcm90by5tc01hdGNoZXNTZWxlY3RvclxuICB8fCBwcm90by5vTWF0Y2hlc1NlbGVjdG9yO1xuXG4vKipcbiAqIEV4cG9zZSBgbWF0Y2goKWAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBtYXRjaDtcblxuLyoqXG4gKiBNYXRjaCBgZWxgIHRvIGBzZWxlY3RvcmAuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBtYXRjaChlbCwgc2VsZWN0b3IpIHtcbiAgaWYgKHZlbmRvcikgcmV0dXJuIHZlbmRvci5jYWxsKGVsLCBzZWxlY3Rvcik7XG4gIHZhciBub2RlcyA9IGVsLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZXNbaV0gPT0gZWwpIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbn0se31dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuZnVuY3Rpb24gc2VsZWN0KGVsZW1lbnQpIHtcbiAgICB2YXIgc2VsZWN0ZWRUZXh0O1xuXG4gICAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdJTlBVVCcgfHwgZWxlbWVudC5ub2RlTmFtZSA9PT0gJ1RFWFRBUkVBJykge1xuICAgICAgICBlbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIGVsZW1lbnQuc2V0U2VsZWN0aW9uUmFuZ2UoMCwgZWxlbWVudC52YWx1ZS5sZW5ndGgpO1xuXG4gICAgICAgIHNlbGVjdGVkVGV4dCA9IGVsZW1lbnQudmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpKSB7XG4gICAgICAgICAgICBlbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuXG4gICAgICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhlbGVtZW50KTtcbiAgICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuXG4gICAgICAgIHNlbGVjdGVkVGV4dCA9IHNlbGVjdGlvbi50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxlY3RlZFRleHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2VsZWN0O1xuXG59LHt9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmZ1bmN0aW9uIEUgKCkge1xuXHQvLyBLZWVwIHRoaXMgZW1wdHkgc28gaXQncyBlYXNpZXIgdG8gaW5oZXJpdCBmcm9tXG4gIC8vICh2aWEgaHR0cHM6Ly9naXRodWIuY29tL2xpcHNtYWNrIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9pc3N1ZXMvMylcbn1cblxuRS5wcm90b3R5cGUgPSB7XG5cdG9uOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2ssIGN0eCkge1xuICAgIHZhciBlID0gdGhpcy5lIHx8ICh0aGlzLmUgPSB7fSk7XG5cbiAgICAoZVtuYW1lXSB8fCAoZVtuYW1lXSA9IFtdKSkucHVzaCh7XG4gICAgICBmbjogY2FsbGJhY2ssXG4gICAgICBjdHg6IGN0eFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgb25jZTogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBjdHgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZnVuY3Rpb24gbGlzdGVuZXIgKCkge1xuICAgICAgc2VsZi5vZmYobmFtZSwgbGlzdGVuZXIpO1xuICAgICAgY2FsbGJhY2suYXBwbHkoY3R4LCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lci5fID0gY2FsbGJhY2tcbiAgICByZXR1cm4gdGhpcy5vbihuYW1lLCBsaXN0ZW5lciwgY3R4KTtcbiAgfSxcblxuICBlbWl0OiBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBkYXRhID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHZhciBldnRBcnIgPSAoKHRoaXMuZSB8fCAodGhpcy5lID0ge30pKVtuYW1lXSB8fCBbXSkuc2xpY2UoKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IGV2dEFyci5sZW5ndGg7XG5cbiAgICBmb3IgKGk7IGkgPCBsZW47IGkrKykge1xuICAgICAgZXZ0QXJyW2ldLmZuLmFwcGx5KGV2dEFycltpXS5jdHgsIGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG9mZjogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGUgPSB0aGlzLmUgfHwgKHRoaXMuZSA9IHt9KTtcbiAgICB2YXIgZXZ0cyA9IGVbbmFtZV07XG4gICAgdmFyIGxpdmVFdmVudHMgPSBbXTtcblxuICAgIGlmIChldnRzICYmIGNhbGxiYWNrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXZ0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoZXZ0c1tpXS5mbiAhPT0gY2FsbGJhY2sgJiYgZXZ0c1tpXS5mbi5fICE9PSBjYWxsYmFjaylcbiAgICAgICAgICBsaXZlRXZlbnRzLnB1c2goZXZ0c1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGV2ZW50IGZyb20gcXVldWUgdG8gcHJldmVudCBtZW1vcnkgbGVha1xuICAgIC8vIFN1Z2dlc3RlZCBieSBodHRwczovL2dpdGh1Yi5jb20vbGF6ZFxuICAgIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9jb21taXQvYzZlYmZhYTliYzk3M2IzM2QxMTBhODRhMzA3NzQyYjdjZjk0Yzk1MyNjb21taXRjb21tZW50LTUwMjQ5MTBcblxuICAgIChsaXZlRXZlbnRzLmxlbmd0aClcbiAgICAgID8gZVtuYW1lXSA9IGxpdmVFdmVudHNcbiAgICAgIDogZGVsZXRlIGVbbmFtZV07XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFO1xuXG59LHt9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbJ21vZHVsZScsICdzZWxlY3QnXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBmYWN0b3J5KG1vZHVsZSwgcmVxdWlyZSgnc2VsZWN0JykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtb2QgPSB7XG4gICAgICAgICAgICBleHBvcnRzOiB7fVxuICAgICAgICB9O1xuICAgICAgICBmYWN0b3J5KG1vZCwgZ2xvYmFsLnNlbGVjdCk7XG4gICAgICAgIGdsb2JhbC5jbGlwYm9hcmRBY3Rpb24gPSBtb2QuZXhwb3J0cztcbiAgICB9XG59KSh0aGlzLCBmdW5jdGlvbiAobW9kdWxlLCBfc2VsZWN0KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIF9zZWxlY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VsZWN0KTtcblxuICAgIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICAgICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgICAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICAgICAgfTtcbiAgICB9KCk7XG5cbiAgICB2YXIgQ2xpcGJvYXJkQWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgICAgICovXG5cbiAgICAgICAgZnVuY3Rpb24gQ2xpcGJvYXJkQWN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDbGlwYm9hcmRBY3Rpb24pO1xuXG4gICAgICAgICAgICB0aGlzLnJlc29sdmVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5pbml0U2VsZWN0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lcyBiYXNlIHByb3BlcnRpZXMgcGFzc2VkIGZyb20gY29uc3RydWN0b3IuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICAgICAqL1xuXG5cbiAgICAgICAgQ2xpcGJvYXJkQWN0aW9uLnByb3RvdHlwZS5yZXNvbHZlT3B0aW9ucyA9IGZ1bmN0aW9uIHJlc29sdmVPcHRpb25zKCkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblxuICAgICAgICAgICAgdGhpcy5hY3Rpb24gPSBvcHRpb25zLmFjdGlvbjtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlciA9IG9wdGlvbnMuZW1pdHRlcjtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gb3B0aW9ucy50YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLnRleHQgPSBvcHRpb25zLnRleHQ7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIgPSBvcHRpb25zLnRyaWdnZXI7XG5cbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUZXh0ID0gJyc7XG4gICAgICAgIH07XG5cbiAgICAgICAgQ2xpcGJvYXJkQWN0aW9uLnByb3RvdHlwZS5pbml0U2VsZWN0aW9uID0gZnVuY3Rpb24gaW5pdFNlbGVjdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRleHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdEZha2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdFRhcmdldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIENsaXBib2FyZEFjdGlvbi5wcm90b3R5cGUuc2VsZWN0RmFrZSA9IGZ1bmN0aW9uIHNlbGVjdEZha2UoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgaXNSVEwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkaXInKSA9PSAncnRsJztcblxuICAgICAgICAgICAgdGhpcy5yZW1vdmVGYWtlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuZmFrZUhhbmRsZXJDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucmVtb3ZlRmFrZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuZmFrZUhhbmRsZXIgPSBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5mYWtlSGFuZGxlckNhbGxiYWNrKSB8fCB0cnVlO1xuXG4gICAgICAgICAgICB0aGlzLmZha2VFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICAgICAgICAgIC8vIFByZXZlbnQgem9vbWluZyBvbiBpT1NcbiAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGUuZm9udFNpemUgPSAnMTJwdCc7XG4gICAgICAgICAgICAvLyBSZXNldCBib3ggbW9kZWxcbiAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGUuYm9yZGVyID0gJzAnO1xuICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZS5wYWRkaW5nID0gJzAnO1xuICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZS5tYXJnaW4gPSAnMCc7XG4gICAgICAgICAgICAvLyBNb3ZlIGVsZW1lbnQgb3V0IG9mIHNjcmVlbiBob3Jpem9udGFsbHlcbiAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZVtpc1JUTCA/ICdyaWdodCcgOiAnbGVmdCddID0gJy05OTk5cHgnO1xuICAgICAgICAgICAgLy8gTW92ZSBlbGVtZW50IHRvIHRoZSBzYW1lIHBvc2l0aW9uIHZlcnRpY2FsbHlcbiAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGUudG9wID0gKHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSArICdweCc7XG4gICAgICAgICAgICB0aGlzLmZha2VFbGVtLnNldEF0dHJpYnV0ZSgncmVhZG9ubHknLCAnJyk7XG4gICAgICAgICAgICB0aGlzLmZha2VFbGVtLnZhbHVlID0gdGhpcy50ZXh0O1xuXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZmFrZUVsZW0pO1xuXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVGV4dCA9ICgwLCBfc2VsZWN0Mi5kZWZhdWx0KSh0aGlzLmZha2VFbGVtKTtcbiAgICAgICAgICAgIHRoaXMuY29weVRleHQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBDbGlwYm9hcmRBY3Rpb24ucHJvdG90eXBlLnJlbW92ZUZha2UgPSBmdW5jdGlvbiByZW1vdmVGYWtlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZmFrZUhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5mYWtlSGFuZGxlckNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VIYW5kbGVyQ2FsbGJhY2sgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5mYWtlRWxlbSkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5mYWtlRWxlbSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlRWxlbSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgQ2xpcGJvYXJkQWN0aW9uLnByb3RvdHlwZS5zZWxlY3RUYXJnZXQgPSBmdW5jdGlvbiBzZWxlY3RUYXJnZXQoKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVGV4dCA9ICgwLCBfc2VsZWN0Mi5kZWZhdWx0KSh0aGlzLnRhcmdldCk7XG4gICAgICAgICAgICB0aGlzLmNvcHlUZXh0KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgQ2xpcGJvYXJkQWN0aW9uLnByb3RvdHlwZS5jb3B5VGV4dCA9IGZ1bmN0aW9uIGNvcHlUZXh0KCkge1xuICAgICAgICAgICAgdmFyIHN1Y2NlZWRlZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzdWNjZWVkZWQgPSBkb2N1bWVudC5leGVjQ29tbWFuZCh0aGlzLmFjdGlvbik7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzdWNjZWVkZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5oYW5kbGVSZXN1bHQoc3VjY2VlZGVkKTtcbiAgICAgICAgfTtcblxuICAgICAgICBDbGlwYm9hcmRBY3Rpb24ucHJvdG90eXBlLmhhbmRsZVJlc3VsdCA9IGZ1bmN0aW9uIGhhbmRsZVJlc3VsdChzdWNjZWVkZWQpIHtcbiAgICAgICAgICAgIGlmIChzdWNjZWVkZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnc3VjY2VzcycsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiB0aGlzLmFjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGhpcy5zZWxlY3RlZFRleHQsXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IHRoaXMudHJpZ2dlcixcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb246IHRoaXMuY2xlYXJTZWxlY3Rpb24uYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZXJyb3InLCB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogdGhpcy5hY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IHRoaXMudHJpZ2dlcixcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb246IHRoaXMuY2xlYXJTZWxlY3Rpb24uYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIENsaXBib2FyZEFjdGlvbi5wcm90b3R5cGUuY2xlYXJTZWxlY3Rpb24gPSBmdW5jdGlvbiBjbGVhclNlbGVjdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LmJsdXIoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIENsaXBib2FyZEFjdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUZha2UoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBfY3JlYXRlQ2xhc3MoQ2xpcGJvYXJkQWN0aW9uLCBbe1xuICAgICAgICAgICAga2V5OiAnYWN0aW9uJyxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KCkge1xuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyAnY29weScgOiBhcmd1bWVudHNbMF07XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9hY3Rpb24gPSBhY3Rpb247XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYWN0aW9uICE9PSAnY29weScgJiYgdGhpcy5fYWN0aW9uICE9PSAnY3V0Jykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgXCJhY3Rpb25cIiB2YWx1ZSwgdXNlIGVpdGhlciBcImNvcHlcIiBvciBcImN1dFwiJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hY3Rpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ3RhcmdldCcsXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCAmJiAodHlwZW9mIHRhcmdldCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodGFyZ2V0KSkgPT09ICdvYmplY3QnICYmIHRhcmdldC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uID09PSAnY29weScgJiYgdGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBcInRhcmdldFwiIGF0dHJpYnV0ZS4gUGxlYXNlIHVzZSBcInJlYWRvbmx5XCIgaW5zdGVhZCBvZiBcImRpc2FibGVkXCIgYXR0cmlidXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvbiA9PT0gJ2N1dCcgJiYgKHRhcmdldC5oYXNBdHRyaWJ1dGUoJ3JlYWRvbmx5JykgfHwgdGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgXCJ0YXJnZXRcIiBhdHRyaWJ1dGUuIFlvdSBjYW5cXCd0IGN1dCB0ZXh0IGZyb20gZWxlbWVudHMgd2l0aCBcInJlYWRvbmx5XCIgb3IgXCJkaXNhYmxlZFwiIGF0dHJpYnV0ZXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFwidGFyZ2V0XCIgdmFsdWUsIHVzZSBhIHZhbGlkIEVsZW1lbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgcmV0dXJuIENsaXBib2FyZEFjdGlvbjtcbiAgICB9KCk7XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IENsaXBib2FyZEFjdGlvbjtcbn0pO1xuXG59LHtcInNlbGVjdFwiOjZ9XSw5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbJ21vZHVsZScsICcuL2NsaXBib2FyZC1hY3Rpb24nLCAndGlueS1lbWl0dGVyJywgJ2dvb2QtbGlzdGVuZXInXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBmYWN0b3J5KG1vZHVsZSwgcmVxdWlyZSgnLi9jbGlwYm9hcmQtYWN0aW9uJyksIHJlcXVpcmUoJ3RpbnktZW1pdHRlcicpLCByZXF1aXJlKCdnb29kLWxpc3RlbmVyJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtb2QgPSB7XG4gICAgICAgICAgICBleHBvcnRzOiB7fVxuICAgICAgICB9O1xuICAgICAgICBmYWN0b3J5KG1vZCwgZ2xvYmFsLmNsaXBib2FyZEFjdGlvbiwgZ2xvYmFsLnRpbnlFbWl0dGVyLCBnbG9iYWwuZ29vZExpc3RlbmVyKTtcbiAgICAgICAgZ2xvYmFsLmNsaXBib2FyZCA9IG1vZC5leHBvcnRzO1xuICAgIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChtb2R1bGUsIF9jbGlwYm9hcmRBY3Rpb24sIF90aW55RW1pdHRlciwgX2dvb2RMaXN0ZW5lcikge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBfY2xpcGJvYXJkQWN0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsaXBib2FyZEFjdGlvbik7XG5cbiAgICB2YXIgX3RpbnlFbWl0dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RpbnlFbWl0dGVyKTtcblxuICAgIHZhciBfZ29vZExpc3RlbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dvb2RMaXN0ZW5lcik7XG5cbiAgICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgICAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICAgICAgaWYgKCFzZWxmKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICAgIH1cblxuICAgIHZhciBDbGlwYm9hcmQgPSBmdW5jdGlvbiAoX0VtaXR0ZXIpIHtcbiAgICAgICAgX2luaGVyaXRzKENsaXBib2FyZCwgX0VtaXR0ZXIpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3xIVE1MRWxlbWVudHxIVE1MQ29sbGVjdGlvbnxOb2RlTGlzdH0gdHJpZ2dlclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAgICAgKi9cblxuICAgICAgICBmdW5jdGlvbiBDbGlwYm9hcmQodHJpZ2dlciwgb3B0aW9ucykge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsaXBib2FyZCk7XG5cbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9FbWl0dGVyLmNhbGwodGhpcykpO1xuXG4gICAgICAgICAgICBfdGhpcy5yZXNvbHZlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgICAgIF90aGlzLmxpc3RlbkNsaWNrKHRyaWdnZXIpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZXMgaWYgYXR0cmlidXRlcyB3b3VsZCBiZSByZXNvbHZlZCB1c2luZyBpbnRlcm5hbCBzZXR0ZXIgZnVuY3Rpb25zXG4gICAgICAgICAqIG9yIGN1c3RvbSBmdW5jdGlvbnMgdGhhdCB3ZXJlIHBhc3NlZCBpbiB0aGUgY29uc3RydWN0b3IuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICAgICAqL1xuXG5cbiAgICAgICAgQ2xpcGJvYXJkLnByb3RvdHlwZS5yZXNvbHZlT3B0aW9ucyA9IGZ1bmN0aW9uIHJlc29sdmVPcHRpb25zKCkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblxuICAgICAgICAgICAgdGhpcy5hY3Rpb24gPSB0eXBlb2Ygb3B0aW9ucy5hY3Rpb24gPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmFjdGlvbiA6IHRoaXMuZGVmYXVsdEFjdGlvbjtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdHlwZW9mIG9wdGlvbnMudGFyZ2V0ID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy50YXJnZXQgOiB0aGlzLmRlZmF1bHRUYXJnZXQ7XG4gICAgICAgICAgICB0aGlzLnRleHQgPSB0eXBlb2Ygb3B0aW9ucy50ZXh0ID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy50ZXh0IDogdGhpcy5kZWZhdWx0VGV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICBDbGlwYm9hcmQucHJvdG90eXBlLmxpc3RlbkNsaWNrID0gZnVuY3Rpb24gbGlzdGVuQ2xpY2sodHJpZ2dlcikge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXIgPSAoMCwgX2dvb2RMaXN0ZW5lcjIuZGVmYXVsdCkodHJpZ2dlciwgJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLm9uQ2xpY2soZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBDbGlwYm9hcmQucHJvdG90eXBlLm9uQ2xpY2sgPSBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgICAgIHZhciB0cmlnZ2VyID0gZS5kZWxlZ2F0ZVRhcmdldCB8fCBlLmN1cnJlbnRUYXJnZXQ7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNsaXBib2FyZEFjdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xpcGJvYXJkQWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jbGlwYm9hcmRBY3Rpb24gPSBuZXcgX2NsaXBib2FyZEFjdGlvbjIuZGVmYXVsdCh7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiB0aGlzLmFjdGlvbih0cmlnZ2VyKSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMudGFyZ2V0KHRyaWdnZXIpLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMudGV4dCh0cmlnZ2VyKSxcbiAgICAgICAgICAgICAgICB0cmlnZ2VyOiB0cmlnZ2VyLFxuICAgICAgICAgICAgICAgIGVtaXR0ZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIENsaXBib2FyZC5wcm90b3R5cGUuZGVmYXVsdEFjdGlvbiA9IGZ1bmN0aW9uIGRlZmF1bHRBY3Rpb24odHJpZ2dlcikge1xuICAgICAgICAgICAgcmV0dXJuIGdldEF0dHJpYnV0ZVZhbHVlKCdhY3Rpb24nLCB0cmlnZ2VyKTtcbiAgICAgICAgfTtcblxuICAgICAgICBDbGlwYm9hcmQucHJvdG90eXBlLmRlZmF1bHRUYXJnZXQgPSBmdW5jdGlvbiBkZWZhdWx0VGFyZ2V0KHRyaWdnZXIpIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IGdldEF0dHJpYnV0ZVZhbHVlKCd0YXJnZXQnLCB0cmlnZ2VyKTtcblxuICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIENsaXBib2FyZC5wcm90b3R5cGUuZGVmYXVsdFRleHQgPSBmdW5jdGlvbiBkZWZhdWx0VGV4dCh0cmlnZ2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXR0cmlidXRlVmFsdWUoJ3RleHQnLCB0cmlnZ2VyKTtcbiAgICAgICAgfTtcblxuICAgICAgICBDbGlwYm9hcmQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lci5kZXN0cm95KCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNsaXBib2FyZEFjdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xpcGJvYXJkQWN0aW9uLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaXBib2FyZEFjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIENsaXBib2FyZDtcbiAgICB9KF90aW55RW1pdHRlcjIuZGVmYXVsdCk7XG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gcmV0cmlldmUgYXR0cmlidXRlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdWZmaXhcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBdHRyaWJ1dGVWYWx1ZShzdWZmaXgsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZSA9ICdkYXRhLWNsaXBib2FyZC0nICsgc3VmZml4O1xuXG4gICAgICAgIGlmICghZWxlbWVudC5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBDbGlwYm9hcmQ7XG59KTtcblxufSx7XCIuL2NsaXBib2FyZC1hY3Rpb25cIjo4LFwiZ29vZC1saXN0ZW5lclwiOjQsXCJ0aW55LWVtaXR0ZXJcIjo3fV19LHt9LFs5XSkoOSlcbn0pOyIsIiggZnVuY3Rpb24oIHdpbmRvdywgdW5kZWZpbmVkICkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0LyoqXG5cdCAqIEhhbmRsZXMgbWFuYWdpbmcgYWxsIGV2ZW50cyBmb3Igd2hhdGV2ZXIgeW91IHBsdWcgaXQgaW50by4gUHJpb3JpdGllcyBmb3IgaG9va3MgYXJlIGJhc2VkIG9uIGxvd2VzdCB0byBoaWdoZXN0IGluXG5cdCAqIHRoYXQsIGxvd2VzdCBwcmlvcml0eSBob29rcyBhcmUgZmlyZWQgZmlyc3QuXG5cdCAqL1xuXHR2YXIgRXZlbnRNYW5hZ2VyID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG5cdFx0LyoqXG5cdFx0ICogTWFpbnRhaW4gYSByZWZlcmVuY2UgdG8gdGhlIG9iamVjdCBzY29wZSBzbyBvdXIgcHVibGljIG1ldGhvZHMgbmV2ZXIgZ2V0IGNvbmZ1c2luZy5cblx0XHQgKi9cblx0XHR2YXIgTWV0aG9kc0F2YWlsYWJsZSA9IHtcblx0XHRcdHJlbW92ZUZpbHRlciA6IHJlbW92ZUZpbHRlcixcblx0XHRcdGFwcGx5RmlsdGVycyA6IGFwcGx5RmlsdGVycyxcblx0XHRcdGFkZEZpbHRlciA6IGFkZEZpbHRlcixcblx0XHRcdHJlbW92ZUFjdGlvbiA6IHJlbW92ZUFjdGlvbixcblx0XHRcdGRvQWN0aW9uIDogZG9BY3Rpb24sXG5cdFx0XHRhZGRBY3Rpb24gOiBhZGRBY3Rpb25cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQ29udGFpbnMgdGhlIGhvb2tzIHRoYXQgZ2V0IHJlZ2lzdGVyZWQgd2l0aCB0aGlzIEV2ZW50TWFuYWdlci4gVGhlIGFycmF5IGZvciBzdG9yYWdlIHV0aWxpemVzIGEgXCJmbGF0XCJcblx0XHQgKiBvYmplY3QgbGl0ZXJhbCBzdWNoIHRoYXQgbG9va2luZyB1cCB0aGUgaG9vayB1dGlsaXplcyB0aGUgbmF0aXZlIG9iamVjdCBsaXRlcmFsIGhhc2guXG5cdFx0ICovXG5cdFx0dmFyIFNUT1JBR0UgPSB7XG5cdFx0XHRhY3Rpb25zIDoge30sXG5cdFx0XHRmaWx0ZXJzIDoge31cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQWRkcyBhbiBhY3Rpb24gdG8gdGhlIGV2ZW50IG1hbmFnZXIuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gYWN0aW9uIE11c3QgY29udGFpbiBuYW1lc3BhY2UuaWRlbnRpZmllclxuXHRcdCAqIEBwYXJhbSBjYWxsYmFjayBNdXN0IGJlIGEgdmFsaWQgY2FsbGJhY2sgZnVuY3Rpb24gYmVmb3JlIHRoaXMgYWN0aW9uIGlzIGFkZGVkXG5cdFx0ICogQHBhcmFtIFtwcmlvcml0eT0xMF0gVXNlZCB0byBjb250cm9sIHdoZW4gdGhlIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIGluIHJlbGF0aW9uIHRvIG90aGVyIGNhbGxiYWNrcyBib3VuZCB0byB0aGUgc2FtZSBob29rXG5cdFx0ICogQHBhcmFtIFtjb250ZXh0XSBTdXBwbHkgYSB2YWx1ZSB0byBiZSB1c2VkIGZvciB0aGlzXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gYWRkQWN0aW9uKCBhY3Rpb24sIGNhbGxiYWNrLCBwcmlvcml0eSwgY29udGV4dCApIHtcblx0XHRcdGlmKCB0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicgKSB7XG5cdFx0XHRcdHByaW9yaXR5ID0gcGFyc2VJbnQoICggcHJpb3JpdHkgfHwgMTAgKSwgMTAgKTtcblx0XHRcdFx0X2FkZEhvb2soICdhY3Rpb25zJywgYWN0aW9uLCBjYWxsYmFjaywgcHJpb3JpdHksIGNvbnRleHQgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIE1ldGhvZHNBdmFpbGFibGU7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogUGVyZm9ybXMgYW4gYWN0aW9uIGlmIGl0IGV4aXN0cy4gWW91IGNhbiBwYXNzIGFzIG1hbnkgYXJndW1lbnRzIGFzIHlvdSB3YW50IHRvIHRoaXMgZnVuY3Rpb247IHRoZSBvbmx5IHJ1bGUgaXNcblx0XHQgKiB0aGF0IHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGFsd2F5cyBiZSB0aGUgYWN0aW9uLlxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIGRvQWN0aW9uKCAvKiBhY3Rpb24sIGFyZzEsIGFyZzIsIC4uLiAqLyApIHtcblx0XHRcdHZhciBhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHR2YXIgYWN0aW9uID0gYXJncy5zaGlmdCgpO1xuXG5cdFx0XHRpZiggdHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycgKSB7XG5cdFx0XHRcdF9ydW5Ib29rKCAnYWN0aW9ucycsIGFjdGlvbiwgYXJncyApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gTWV0aG9kc0F2YWlsYWJsZTtcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBSZW1vdmVzIHRoZSBzcGVjaWZpZWQgYWN0aW9uIGlmIGl0IGNvbnRhaW5zIGEgbmFtZXNwYWNlLmlkZW50aWZpZXIgJiBleGlzdHMuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gYWN0aW9uIFRoZSBhY3Rpb24gdG8gcmVtb3ZlXG5cdFx0ICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGJhY2sgZnVuY3Rpb24gdG8gcmVtb3ZlXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gcmVtb3ZlQWN0aW9uKCBhY3Rpb24sIGNhbGxiYWNrICkge1xuXHRcdFx0aWYoIHR5cGVvZiBhY3Rpb24gPT09ICdzdHJpbmcnICkge1xuXHRcdFx0XHRfcmVtb3ZlSG9vayggJ2FjdGlvbnMnLCBhY3Rpb24sIGNhbGxiYWNrICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBNZXRob2RzQXZhaWxhYmxlO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIEFkZHMgYSBmaWx0ZXIgdG8gdGhlIGV2ZW50IG1hbmFnZXIuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gZmlsdGVyIE11c3QgY29udGFpbiBuYW1lc3BhY2UuaWRlbnRpZmllclxuXHRcdCAqIEBwYXJhbSBjYWxsYmFjayBNdXN0IGJlIGEgdmFsaWQgY2FsbGJhY2sgZnVuY3Rpb24gYmVmb3JlIHRoaXMgYWN0aW9uIGlzIGFkZGVkXG5cdFx0ICogQHBhcmFtIFtwcmlvcml0eT0xMF0gVXNlZCB0byBjb250cm9sIHdoZW4gdGhlIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIGluIHJlbGF0aW9uIHRvIG90aGVyIGNhbGxiYWNrcyBib3VuZCB0byB0aGUgc2FtZSBob29rXG5cdFx0ICogQHBhcmFtIFtjb250ZXh0XSBTdXBwbHkgYSB2YWx1ZSB0byBiZSB1c2VkIGZvciB0aGlzXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gYWRkRmlsdGVyKCBmaWx0ZXIsIGNhbGxiYWNrLCBwcmlvcml0eSwgY29udGV4dCApIHtcblx0XHRcdGlmKCB0eXBlb2YgZmlsdGVyID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicgKSB7XG5cdFx0XHRcdHByaW9yaXR5ID0gcGFyc2VJbnQoICggcHJpb3JpdHkgfHwgMTAgKSwgMTAgKTtcblx0XHRcdFx0X2FkZEhvb2soICdmaWx0ZXJzJywgZmlsdGVyLCBjYWxsYmFjaywgcHJpb3JpdHksIGNvbnRleHQgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIE1ldGhvZHNBdmFpbGFibGU7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogUGVyZm9ybXMgYSBmaWx0ZXIgaWYgaXQgZXhpc3RzLiBZb3Ugc2hvdWxkIG9ubHkgZXZlciBwYXNzIDEgYXJndW1lbnQgdG8gYmUgZmlsdGVyZWQuIFRoZSBvbmx5IHJ1bGUgaXMgdGhhdFxuXHRcdCAqIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGFsd2F5cyBiZSB0aGUgZmlsdGVyLlxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIGFwcGx5RmlsdGVycyggLyogZmlsdGVyLCBmaWx0ZXJlZCBhcmcsIGFyZzIsIC4uLiAqLyApIHtcblx0XHRcdHZhciBhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHR2YXIgZmlsdGVyID0gYXJncy5zaGlmdCgpO1xuXG5cdFx0XHRpZiggdHlwZW9mIGZpbHRlciA9PT0gJ3N0cmluZycgKSB7XG5cdFx0XHRcdHJldHVybiBfcnVuSG9vayggJ2ZpbHRlcnMnLCBmaWx0ZXIsIGFyZ3MgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIE1ldGhvZHNBdmFpbGFibGU7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogUmVtb3ZlcyB0aGUgc3BlY2lmaWVkIGZpbHRlciBpZiBpdCBjb250YWlucyBhIG5hbWVzcGFjZS5pZGVudGlmaWVyICYgZXhpc3RzLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIGZpbHRlciBUaGUgYWN0aW9uIHRvIHJlbW92ZVxuXHRcdCAqIEBwYXJhbSBbY2FsbGJhY2tdIENhbGxiYWNrIGZ1bmN0aW9uIHRvIHJlbW92ZVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIHJlbW92ZUZpbHRlciggZmlsdGVyLCBjYWxsYmFjayApIHtcblx0XHRcdGlmKCB0eXBlb2YgZmlsdGVyID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRfcmVtb3ZlSG9vayggJ2ZpbHRlcnMnLCBmaWx0ZXIsIGNhbGxiYWNrICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBNZXRob2RzQXZhaWxhYmxlO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZXMgdGhlIHNwZWNpZmllZCBob29rIGJ5IHJlc2V0dGluZyB0aGUgdmFsdWUgb2YgaXQuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gdHlwZSBUeXBlIG9mIGhvb2ssIGVpdGhlciAnYWN0aW9ucycgb3IgJ2ZpbHRlcnMnXG5cdFx0ICogQHBhcmFtIGhvb2sgVGhlIGhvb2sgKG5hbWVzcGFjZS5pZGVudGlmaWVyKSB0byByZW1vdmVcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIF9yZW1vdmVIb29rKCB0eXBlLCBob29rLCBjYWxsYmFjaywgY29udGV4dCApIHtcblx0XHRcdHZhciBoYW5kbGVycywgaGFuZGxlciwgaTtcblxuXHRcdFx0aWYgKCAhU1RPUkFHRVsgdHlwZSBdWyBob29rIF0gKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmICggIWNhbGxiYWNrICkge1xuXHRcdFx0XHRTVE9SQUdFWyB0eXBlIF1bIGhvb2sgXSA9IFtdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBTVE9SQUdFWyB0eXBlIF1bIGhvb2sgXTtcblx0XHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0XHRmb3IgKCBpID0gaGFuZGxlcnMubGVuZ3RoOyBpLS07ICkge1xuXHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyc1tpXS5jYWxsYmFjayA9PT0gY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRmb3IgKCBpID0gaGFuZGxlcnMubGVuZ3RoOyBpLS07ICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlciA9IGhhbmRsZXJzW2ldO1xuXHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyLmNhbGxiYWNrID09PSBjYWxsYmFjayAmJiBoYW5kbGVyLmNvbnRleHQgPT09IGNvbnRleHQpIHtcblx0XHRcdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogQWRkcyB0aGUgaG9vayB0byB0aGUgYXBwcm9wcmlhdGUgc3RvcmFnZSBjb250YWluZXJcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB0eXBlICdhY3Rpb25zJyBvciAnZmlsdGVycydcblx0XHQgKiBAcGFyYW0gaG9vayBUaGUgaG9vayAobmFtZXNwYWNlLmlkZW50aWZpZXIpIHRvIGFkZCB0byBvdXIgZXZlbnQgbWFuYWdlclxuXHRcdCAqIEBwYXJhbSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBob29rIGlzIGV4ZWN1dGVkLlxuXHRcdCAqIEBwYXJhbSBwcmlvcml0eSBUaGUgcHJpb3JpdHkgb2YgdGhpcyBob29rLiBNdXN0IGJlIGFuIGludGVnZXIuXG5cdFx0ICogQHBhcmFtIFtjb250ZXh0XSBBIHZhbHVlIHRvIGJlIHVzZWQgZm9yIHRoaXNcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIF9hZGRIb29rKCB0eXBlLCBob29rLCBjYWxsYmFjaywgcHJpb3JpdHksIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgaG9va09iamVjdCA9IHtcblx0XHRcdFx0Y2FsbGJhY2sgOiBjYWxsYmFjayxcblx0XHRcdFx0cHJpb3JpdHkgOiBwcmlvcml0eSxcblx0XHRcdFx0Y29udGV4dCA6IGNvbnRleHRcblx0XHRcdH07XG5cblx0XHRcdC8vIFV0aWxpemUgJ3Byb3AgaXRzZWxmJyA6IGh0dHA6Ly9qc3BlcmYuY29tL2hhc293bnByb3BlcnR5LXZzLWluLXZzLXVuZGVmaW5lZC8xOVxuXHRcdFx0dmFyIGhvb2tzID0gU1RPUkFHRVsgdHlwZSBdWyBob29rIF07XG5cdFx0XHRpZiggaG9va3MgKSB7XG5cdFx0XHRcdGhvb2tzLnB1c2goIGhvb2tPYmplY3QgKTtcblx0XHRcdFx0aG9va3MgPSBfaG9va0luc2VydFNvcnQoIGhvb2tzICk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0aG9va3MgPSBbIGhvb2tPYmplY3QgXTtcblx0XHRcdH1cblxuXHRcdFx0U1RPUkFHRVsgdHlwZSBdWyBob29rIF0gPSBob29rcztcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBVc2UgYW4gaW5zZXJ0IHNvcnQgZm9yIGtlZXBpbmcgb3VyIGhvb2tzIG9yZ2FuaXplZCBiYXNlZCBvbiBwcmlvcml0eS4gVGhpcyBmdW5jdGlvbiBpcyByaWRpY3Vsb3VzbHkgZmFzdGVyXG5cdFx0ICogdGhhbiBidWJibGUgc29ydCwgZXRjOiBodHRwOi8vanNwZXJmLmNvbS9qYXZhc2NyaXB0LXNvcnRcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSBob29rcyBUaGUgY3VzdG9tIGFycmF5IGNvbnRhaW5pbmcgYWxsIG9mIHRoZSBhcHByb3ByaWF0ZSBob29rcyB0byBwZXJmb3JtIGFuIGluc2VydCBzb3J0IG9uLlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gX2hvb2tJbnNlcnRTb3J0KCBob29rcyApIHtcblx0XHRcdHZhciB0bXBIb29rLCBqLCBwcmV2SG9vaztcblx0XHRcdGZvciggdmFyIGkgPSAxLCBsZW4gPSBob29rcy5sZW5ndGg7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0dG1wSG9vayA9IGhvb2tzWyBpIF07XG5cdFx0XHRcdGogPSBpO1xuXHRcdFx0XHR3aGlsZSggKCBwcmV2SG9vayA9IGhvb2tzWyBqIC0gMSBdICkgJiYgIHByZXZIb29rLnByaW9yaXR5ID4gdG1wSG9vay5wcmlvcml0eSApIHtcblx0XHRcdFx0XHRob29rc1sgaiBdID0gaG9va3NbIGogLSAxIF07XG5cdFx0XHRcdFx0LS1qO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGhvb2tzWyBqIF0gPSB0bXBIb29rO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaG9va3M7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogUnVucyB0aGUgc3BlY2lmaWVkIGhvb2suIElmIGl0IGlzIGFuIGFjdGlvbiwgdGhlIHZhbHVlIGlzIG5vdCBtb2RpZmllZCBidXQgaWYgaXQgaXMgYSBmaWx0ZXIsIGl0IGlzLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHR5cGUgJ2FjdGlvbnMnIG9yICdmaWx0ZXJzJ1xuXHRcdCAqIEBwYXJhbSBob29rIFRoZSBob29rICggbmFtZXNwYWNlLmlkZW50aWZpZXIgKSB0byBiZSByYW4uXG5cdFx0ICogQHBhcmFtIGFyZ3MgQXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGFjdGlvbi9maWx0ZXIuIElmIGl0J3MgYSBmaWx0ZXIsIGFyZ3MgaXMgYWN0dWFsbHkgYSBzaW5nbGUgcGFyYW1ldGVyLlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gX3J1bkhvb2soIHR5cGUsIGhvb2ssIGFyZ3MgKSB7XG5cdFx0XHR2YXIgaGFuZGxlcnMgPSBTVE9SQUdFWyB0eXBlIF1bIGhvb2sgXSwgaSwgbGVuO1xuXG5cdFx0XHRpZiAoICFoYW5kbGVycyApIHtcblx0XHRcdFx0cmV0dXJuICh0eXBlID09PSAnZmlsdGVycycpID8gYXJnc1swXSA6IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRsZW4gPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHRpZiAoIHR5cGUgPT09ICdmaWx0ZXJzJyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRhcmdzWyAwIF0gPSBoYW5kbGVyc1sgaSBdLmNhbGxiYWNrLmFwcGx5KCBoYW5kbGVyc1sgaSBdLmNvbnRleHQsIGFyZ3MgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRoYW5kbGVyc1sgaSBdLmNhbGxiYWNrLmFwcGx5KCBoYW5kbGVyc1sgaSBdLmNvbnRleHQsIGFyZ3MgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCB0eXBlID09PSAnZmlsdGVycycgKSA/IGFyZ3NbIDAgXSA6IHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gcmV0dXJuIGFsbCBvZiB0aGUgcHVibGljbHkgYXZhaWxhYmxlIG1ldGhvZHNcblx0XHRyZXR1cm4gTWV0aG9kc0F2YWlsYWJsZTtcblxuXHR9O1xuXG5cdHdpbmRvdy5ub3RpZmljYXRpb24gPSB3aW5kb3cubm90aWZpY2F0aW9uIHx8IHt9O1xuXHR3aW5kb3cubm90aWZpY2F0aW9uLmhvb2tzID0gbmV3IEV2ZW50TWFuYWdlcigpO1xuXG59ICkoIHdpbmRvdyApO1xuIiwiKGZ1bmN0aW9uKCQpIHtcblxuXHQkKCBkb2N1bWVudCApLnJlYWR5KCBmdW5jdGlvbigpIHtcblxuXHRcdCQoICcjY2Fycmllci1ib3hlcyAucG9zdGJveCAuc3dpdGNoLWNvbnRhaW5lciBpbnB1dCcgKS5jaGFuZ2UoIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdCQoIHRoaXMgKS5wYXJlbnRzKCAnLnN3aXRjaCcgKS5maXJzdCgpLnRvZ2dsZUNsYXNzKCAnYWN0aXZlJyApO1xuXHRcdFx0bm90aWZpY2F0aW9uLmhvb2tzLmRvQWN0aW9uKCAnbm90aWZpY2F0aW9uLmNhcnJpZXIudG9nZ2xlZCcsICQoIHRoaXMgKSApO1xuXHRcdH0gKTtcblxuXHR9ICk7XG5cbn0pKGpRdWVyeSk7XG4iLCIoZnVuY3Rpb24oJCkge1xuXG5cdCQoIGRvY3VtZW50ICkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRcdCQoICcubm90aWZpY2F0aW9uLWNvbG9yLXBpY2tlcjp2aXNpYmxlJyApLndwQ29sb3JQaWNrZXIoKTtcblx0fSApO1xuXG5cdG5vdGlmaWNhdGlvbi5ob29rcy5hZGRBY3Rpb24oICdub3RpZmljYXRpb24uY2Fycmllci5yZXBlYXRlci5yb3cuYWRkZWQnLCBmdW5jdGlvbiggJGNsb25lZCwgJHJlcGVhdGVyICkge1xuXHRcdCRjbG9uZWQuZmluZCggJy5ub3RpZmljYXRpb24tY29sb3ItcGlja2VyJyApLndwQ29sb3JQaWNrZXIoKTtcblx0fSApO1xuXG59KShqUXVlcnkpO1xuIiwiKGZ1bmN0aW9uKCQpIHtcblxuXHR2YXIgX18gPSB3cC5pMThuLl9fO1xuXG5cdCQoIGRvY3VtZW50ICkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyICRpbWFnZV9maWVsZCAgID0gJCggJy5ub3RpZmljYXRpb24taW1hZ2UtZmllbGQnICk7XG5cdFx0dmFyIGNsaWNrZWRfaW1hZ2VfZmllbGQgPSBmYWxzZTtcblxuXHRcdCQoICdib2R5JyApLm9uKCAnY2xpY2snLCAnLm5vdGlmaWNhdGlvbi1pbWFnZS1maWVsZCAuaW1hZ2UgLnByZXZpZXcsIC5ub3RpZmljYXRpb24taW1hZ2UtZmllbGQgLnNlbGVjdC1pbWFnZScsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdCRjbGlja2VkX2ltYWdlX2ZpZWxkID0gJCh0aGlzKS5wYXJlbnRzKCAnLm5vdGlmaWNhdGlvbi1pbWFnZS1maWVsZCcgKTtcblxuXHRcdFx0aWYgKCB3cC5tZWRpYS5mcmFtZXMuZnJhbWUgKSB7XG5cdFx0XHRcdHdwLm1lZGlhLmZyYW1lcy5mcmFtZS5vcGVuKCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0d3AubWVkaWEuZnJhbWVzLmZyYW1lID0gd3AubWVkaWEoIHtcblx0XHRcdFx0dGl0bGU6IF9fKCAnU2VsZWN0IGltYWdlJywgJ25vdGlmaWNhdGlvbicgKSxcblx0XHRcdFx0bXVsdGlwbGU6IGZhbHNlLFxuXHRcdFx0XHRsaWJyYXJ5OiB7XG5cdFx0XHRcdFx0dHlwZTogJ2ltYWdlJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRidXR0b246IHtcblx0XHRcdFx0XHR0ZXh0OiBfXyggJ1VzZSBzZWxlY3RlZCBpbWFnZScsICdub3RpZmljYXRpb24nIClcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXG5cdFx0XHR2YXIgbWVkaWFfc2V0X2ltYWdlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBzZWxlY3Rpb24gPSB3cC5tZWRpYS5mcmFtZXMuZnJhbWUuc3RhdGUoKS5nZXQoICdzZWxlY3Rpb24nICk7XG5cblx0XHRcdFx0aWYgKCAhIHNlbGVjdGlvbiApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzZWxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGF0dGFjaG1lbnQgKSB7XG5cdFx0XHRcdFx0JGNsaWNrZWRfaW1hZ2VfZmllbGQuYWRkQ2xhc3MoICdzZWxlY3RlZCcgKTtcblx0XHRcdFx0XHQkY2xpY2tlZF9pbWFnZV9maWVsZC5maW5kKCAnLmltYWdlLWlucHV0JyApLnZhbCggYXR0YWNobWVudC5pZCApO1xuXHRcdFx0XHRcdCRjbGlja2VkX2ltYWdlX2ZpZWxkLmZpbmQoICcuaW1hZ2UgLnByZXZpZXcnICkuYXR0ciggJ3NyYycsIGF0dGFjaG1lbnQuYXR0cmlidXRlcy5zaXplcy50aHVtYm5haWwudXJsICk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH07XG5cblx0XHRcdHdwLm1lZGlhLmZyYW1lcy5mcmFtZS5vbiggJ3NlbGVjdCcsIG1lZGlhX3NldF9pbWFnZSApO1xuXHRcdFx0d3AubWVkaWEuZnJhbWVzLmZyYW1lLm9wZW4oKTtcblx0XHR9ICk7XG5cblx0XHQkaW1hZ2VfZmllbGQuZmluZCggJy5pbWFnZSAuY2xlYXInICkub24oICdjbGljaycsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHQkKCB0aGlzICkucGFyZW50cyggJy5ub3RpZmljYXRpb24taW1hZ2UtZmllbGQnICkucmVtb3ZlQ2xhc3MoICdzZWxlY3RlZCcgKTtcblx0XHRcdCQoIHRoaXMgKS5wYXJlbnRzKCAnLm5vdGlmaWNhdGlvbi1pbWFnZS1maWVsZCcgKS5maW5kKCAnLmltYWdlLWlucHV0JyApLnZhbCggJycgKTtcblx0XHRcdCQoIHRoaXMgKS5wYXJlbnRzKCAnLm5vdGlmaWNhdGlvbi1pbWFnZS1maWVsZCcgKS5maW5kKCAnLmltYWdlIC5wcmV2aWV3JyApLmF0dHIoICdzcmMnLCAnJyApO1xuXHRcdH0gKTtcblxuXHR9ICk7XG5cbn0pKGpRdWVyeSk7XG4iLCIoZnVuY3Rpb24oJCkge1xuXG5cdCQoIGRvY3VtZW50ICkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIHJlY2lwaWVudF90eXBlX3NlbGVjdCA9ICcucmVjaXBpZW50cy1yZXBlYXRlciBzZWxlY3QucmVjaXBpZW50LXR5cGUnO1xuXG5cdFx0Ly8gQ2hhbmdlZCByZWNpcGllbnQgdHlwZVxuXHRcdCQoICdib2R5JyApLm9uKCAnY2hhbmdlJywgcmVjaXBpZW50X3R5cGVfc2VsZWN0LCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciAkc2VsZWN0ICAgID0gJCggdGhpcyApLFxuXHRcdFx0XHQkcmVjaXBpZW50ID0gJHNlbGVjdC5wYXJlbnQoKS5wYXJlbnQoKS5uZXh0KCkuZmluZCggJy5yZWNpcGllbnQtdmFsdWUnICkuZmlyc3QoKSxcblx0XHRcdFx0dHlwZSAgICAgICA9ICRzZWxlY3QudmFsKCksXG5cdFx0XHRcdCR0YWJsZSAgICAgPSAkc2VsZWN0LnBhcmVudHMoICcucmVjaXBpZW50cy1yZXBlYXRlcicgKS5maXJzdCgpO1xuXG5cdFx0XHRub3RpZmljYXRpb24uaG9va3MuZG9BY3Rpb24oICdub3RpZmljYXRpb24uY2Fycmllci5yZWNpcGllbnRzLnR5cGUuY2hhbmdlZCcsIHR5cGUsICRzZWxlY3QsICRyZWNpcGllbnQsICR0YWJsZSApO1xuIFx0XHR9ICk7XG5cblx0XHQvLyBHZXQgcmVjaXBpZW50IGZpZWxkIGFjY29yZGluZyB0byB0eXBlXG5cblx0XHRub3RpZmljYXRpb24uaG9va3MuYWRkQWN0aW9uKCAnbm90aWZpY2F0aW9uLmNhcnJpZXIucmVjaXBpZW50cy50eXBlLmNoYW5nZWQnLCBmdW5jdGlvbiggdHlwZSwgJHNlbGVjdCwgJHJlY2lwaWVudCwgJHRhYmxlICkge1xuXG5cdFx0XHRkYXRhID0ge1xuXHRcdFx0XHRhY3Rpb24gICAgIDogJ2dldF9yZWNpcGllbnRfaW5wdXQnLFxuXHRcdFx0XHR0eXBlICAgICAgIDogdHlwZSxcblx0XHRcdFx0Y2FycmllciAgICA6ICR0YWJsZS5kYXRhKCAnY2FycmllcicgKSxcblx0XHRcdFx0aW5wdXRfbmFtZSA6ICRyZWNpcGllbnQuYXR0ciggJ25hbWUnIClcblx0XHRcdH1cblxuXHRcdFx0JHJlY2lwaWVudC5hdHRyKCAnZGlzYWJsZWQnLCB0cnVlICk7XG5cblx0XHRcdCQucG9zdCggbm90aWZpY2F0aW9uLmFqYXh1cmwsIGRhdGEsIGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblxuXHRcdCAgICBcdGlmICggcmVzcG9uc2Uuc3VjY2VzcyA9PSB0cnVlICkge1xuXHRcdCAgICBcdFx0dmFyICRyZXBsYWNlbWVudCAgICAgICAgID0gJCggcmVzcG9uc2UuZGF0YSApLFxuXHRcdCAgICBcdFx0XHQkcmVjaXBpZW50X2NvbnRhaW5lciA9ICRyZWNpcGllbnQucGFyZW50KCk7XG5cdFx0ICAgIFx0XHQkcmVjaXBpZW50X2NvbnRhaW5lci5odG1sKCAnJyApO1xuXHRcdCAgICBcdFx0JHJlY2lwaWVudF9jb250YWluZXIuYXBwZW5kKCAkcmVwbGFjZW1lbnQgKTtcblx0XHQgICAgXHRcdG5vdGlmaWNhdGlvbi5ob29rcy5kb0FjdGlvbiggJ25vdGlmaWNhdGlvbi5jYXJyaWVyLnJlY2lwaWVudHMucmVjaXBpZW50LnJlcGxhY2VkJywgJHJlcGxhY2VtZW50ICk7XG5cdFx0ICAgIFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHR9ICk7XG5cblx0fSApO1xuXG59KShqUXVlcnkpO1xuIiwiKGZ1bmN0aW9uKCQpIHtcblxuXHR2YXIgX18gPSB3cC5pMThuLl9fO1xuXG5cdCQoIGRvY3VtZW50ICkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIHJlY2FsY3VsYXRlX3Jvd3MgPSBmdW5jdGlvbiggJHJlcGVhdGVyICkge1xuXG5cdFx0XHR2YXIgaSA9IDA7XG5cblx0XHRcdCRyZXBlYXRlci5maW5kKCAnLnJvdzpub3QoLmhlYWRlcik6bm90KC5tb2RlbCknICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0dmFyICRyb3cgICAgPSAkKCB0aGlzICksXG5cdFx0XHRcdFx0JGlucHV0cyA9ICRyb3cuZmluZCggJy5ub3RpZmljYXRpb24tZmllbGQ6bm90KC5zZWxlY3RpemUtY29udHJvbCk6bm90KC5zZWxlY3RpemUtZHJvcGRvd24pJyApO1xuXG5cdFx0XHRcdCRpbnB1dHMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHR2YXIgJGlucHV0ICAgID0gJCh0aGlzKSxcblx0XHRcdFx0XHRcdHBhcnRfbmFtZSA9ICRpbnB1dC5hdHRyKCduYW1lJyk7XG5cblx0XHRcdFx0XHQkaW5wdXQuYXR0ciggJ25hbWUnLCBwYXJ0X25hbWUucmVwbGFjZSggLyguKilcXFsoWzAtOV0rKVxcXS8sICckMVsnICsgaSArICddJyApICk7XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdGkrKztcblxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gU2V0IG1vZGVsIGluIGRpc2FibGUgc3RhdGVcblxuXHRcdCQoICcuZmllbGRzLXJlcGVhdGVyIC5tb2RlbCAuc3ViZmllbGQnICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHQkKCB0aGlzICkuZmluZCggJ2lucHV0LCB0ZXh0YXJlYSwgc2VsZWN0JyApLmF0dHIoICdkaXNhYmxlZCcsIHRydWUgKTtcblx0XHR9ICk7XG5cblx0XHQvLyBSZW1vdmUgcm93XG5cblx0XHRmdW5jdGlvbiByZW1vdmVfcm93KCAkcmVtb3ZlX2J1dHRvbiApIHtcblxuXHRcdFx0dmFyICRyZXBlYXRlciA9ICRyZW1vdmVfYnV0dG9uLnBhcmVudHMoICcuZmllbGRzLXJlcGVhdGVyJyApLmZpcnN0KCk7XG5cblx0XHRcdCRyZW1vdmVfYnV0dG9uLnBhcmVudHMoICcucm93JyApLmZpcnN0KCkuYW5pbWF0ZSggeyBvcGFjaXR5OiAwIH0sIDQwMCwgJ2xpbmVhcicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkucmVtb3ZlKCk7XG5cdCAgICAgICAgICAgIHJlY2FsY3VsYXRlX3Jvd3MoICRyZXBlYXRlciApO1xuXHQgICAgICAgICAgICBub3RpZmljYXRpb24uaG9va3MuZG9BY3Rpb24oICdub3RpZmljYXRpb24ucmVwZWF0ZXIucm93LnJlbW92ZWQnLCAkcmVwZWF0ZXIgKTtcblx0ICAgICAgICB9ICk7XG5cblx0XHR9XG5cblx0XHQkKCAnLmZpZWxkcy1yZXBlYXRlcicgKS5vbiggJ2NsaWNrJywgJy5yb3c6bm90KC5oZWFkZXIpOm5vdCgubW9kZWwpIC50cmFzaCcsIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgJHJlbW92ZV9idXR0b24gPSAkKCB0aGlzICk7XG5cblx0XHRcdGlmICggJCggd2luZG93ICkud2lkdGgoKSA+IDc2OCApIHtcblx0XHRcdFx0cmVtb3ZlX3JvdyggJHJlbW92ZV9idXR0b24gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHdpbmRvdy5jb25maXJtKCBfXyggJ0RvIHlvdSByZWFsbHkgd2FudCB0byBkZWxldGUgdGhpcz8nLCAnbm90aWZpY2F0aW9uJyApICkgKSB7XG5cdFx0XHRcdHJlbW92ZV9yb3coICRyZW1vdmVfYnV0dG9uICk7XG5cdFx0XHR9XG5cblx0XHR9ICk7XG5cblx0XHQvLyBBZGQgcm93XG5cblx0XHQkKCAnLmFkZC1uZXctcmVwZWF0ZXItZmllbGQnICkub24oICdjbGljaycsIGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0dmFyICRyZXBlYXRlciA9ICQoIHRoaXMgKS5wcmV2KCAnLmZpZWxkcy1yZXBlYXRlcicgKSxcblx0XHRcdFx0JG1vZGVsICAgID0gJHJlcGVhdGVyLmZpbmQoICcucm93Lm1vZGVsJyApLFxuXHRcdFx0XHQkY2xvbmVkICAgPSAkbW9kZWwuY2xvbmUoKS5yZW1vdmVDbGFzcyggJ21vZGVsJyApO1xuXG5cdFx0XHQkY2xvbmVkLmZpbmQoICdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcgKS5hdHRyKCAnZGlzYWJsZWQnLCBmYWxzZSApO1xuXHRcdFx0JGNsb25lZC5hcHBlbmRUbyggJHJlcGVhdGVyIClcblxuXHRcdFx0cmVjYWxjdWxhdGVfcm93cyggJHJlcGVhdGVyICk7XG5cblx0XHRcdG5vdGlmaWNhdGlvbi5ob29rcy5kb0FjdGlvbiggJ25vdGlmaWNhdGlvbi5yZXBlYXRlci5yb3cuYWRkZWQnLCAkY2xvbmVkLCAkcmVwZWF0ZXIgKTtcblxuXHRcdH0gKTtcblxuXHRcdC8vIFNvcnRhYmxlXG5cblx0XHQkKCAnLmZpZWxkcy1yZXBlYXRlci1zb3J0YWJsZSA+IHRib2R5JyApLnNvcnRhYmxlKCB7XG5cdFx0XHRoYW5kbGU6ICcuaGFuZGxlJyxcblx0XHRcdGF4aXM6ICd5Jyxcblx0ICAgIHN0YXJ0OiAgZnVuY3Rpb24oIGUsIHVpICkge1xuXHQgICAgXHR1aS5wbGFjZWhvbGRlci5oZWlnaHQoIHVpLmhlbHBlclswXS5zY3JvbGxIZWlnaHQgKTtcblx0ICAgIH0sXG5cdFx0fSApO1xuXG5cdH0gKTtcblxufSkoalF1ZXJ5KTtcbiIsIiggZnVuY3Rpb24oJCkge1xuXG5cdHZhciBfXyA9IHdwLmkxOG4uX187XG5cblx0JCggZG9jdW1lbnQgKS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgJGJ1dHRvbiA9ICQoICcjZXhwb3J0LW5vdGlmaWNhdGlvbnMgLmJ1dHRvbicgKTtcblx0XHR2YXIgJGl0ZW1zICA9ICQoICcjZXhwb3J0LW5vdGlmaWNhdGlvbnMgdWwgbGkgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdOm5vdCguc2VsZWN0LWFsbCknICk7XG5cdFx0dmFyIGxpbmsgICAgPSAkYnV0dG9uLnByb3AoICdocmVmJyApO1xuXG5cdFx0ZnVuY3Rpb24gZ2V0X3NlbGVjdGVkX2l0ZW1zKCkge1xuXHRcdFx0dmFyIGl0ZW1zID0gW107XG5cdFx0XHQkLmVhY2goICRpdGVtcywgZnVuY3Rpb24oIGluZGV4LCBpdGVtICkge1xuXHRcdFx0XHQkaXRlbSA9ICQoIGl0ZW0gKTtcblx0XHRcdFx0aWYgKCAkaXRlbS5pcyggJzpjaGVja2VkJyApICkge1xuXHRcdFx0XHRcdGl0ZW1zLnB1c2goICRpdGVtLnZhbCgpICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHRcdHJldHVybiBpdGVtcy5qb2luKCk7XG5cdFx0fVxuXG5cdFx0JCggJyNleHBvcnQtbm90aWZpY2F0aW9ucyBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nICkuY2hhbmdlKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0aWYgKCAkKCB0aGlzICkuaGFzQ2xhc3MoICdzZWxlY3QtYWxsJyApICkge1xuXG5cdFx0XHRcdGlmICggJCggdGhpcyApLmlzKCAnOmNoZWNrZWQnICkgKSB7XG5cdFx0XHRcdFx0JGl0ZW1zLnByb3AoICdjaGVja2VkJywgdHJ1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCRpdGVtcy5wcm9wKCAnY2hlY2tlZCcsIGZhbHNlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQkYnV0dG9uLnByb3AoICdocmVmJywgbGluayArIGdldF9zZWxlY3RlZF9pdGVtcygpICk7XG5cblx0XHR9ICk7XG5cblx0fSApO1xuXG5cdCQoIGRvY3VtZW50ICkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyICRidXR0b24gID0gJCggJyNpbXBvcnQtbm90aWZpY2F0aW9ucyAuYnV0dG9uJyApO1xuXHRcdHZhciAkZmlsZSAgICA9ICQoICcjaW1wb3J0LW5vdGlmaWNhdGlvbnMgaW5wdXRbdHlwZT1cImZpbGVcIl0nICk7XG5cdFx0dmFyIGZpbGVzICAgID0gW107XG5cdFx0dmFyICRtZXNzYWdlID0gJCggJyNpbXBvcnQtbm90aWZpY2F0aW9ucyAubWVzc2FnZScgKTtcblxuXHRcdGZ1bmN0aW9uIGNsZWFyX21lc3NhZ2UoKSB7XG5cdFx0XHQkbWVzc2FnZS5yZW1vdmVDbGFzcyggJ3N1Y2Nlc3MnICkucmVtb3ZlQ2xhc3MoICdlcnJvcicgKS50ZXh0KCAnJyApO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBhZGRfbWVzc2FnZSggdHlwZSwgbWVzc2FnZSApIHtcblx0XHRcdGNsZWFyX21lc3NhZ2UoKTtcblx0XHRcdCRtZXNzYWdlLmFkZENsYXNzKCB0eXBlICkudGV4dCggbWVzc2FnZSApO1xuXHRcdH07XG5cblx0XHQkZmlsZS5vbiggJ2NoYW5nZScsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGZpbGVzID0gZXZlbnQudGFyZ2V0LmZpbGVzO1xuXHRcdFx0JC5lYWNoKCBmaWxlcywgZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggJ2FwcGxpY2F0aW9uL2pzb24nICE9PSB2YWx1ZS50eXBlICkge1xuXHRcdFx0XHRcdGFkZF9tZXNzYWdlKCAnZXJyb3InLCBfXyggJ1BsZWFzZSB1cGxvYWQgb25seSB2YWxpZCBKU09OIGZpbGVzJywgJ25vdGlmaWNhdGlvbicgKSApO1xuXHRcdFx0XHRcdCRmaWxlLnZhbCggJycgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjbGVhcl9tZXNzYWdlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cblx0XHQkYnV0dG9uLm9uKCAnY2xpY2snLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdGlmICggJ3RydWUnID09PSAkYnV0dG9uLmRhdGEoICdwcm9jZXNzaW5nJyApICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdHZhciBkYXRhID0gbmV3IEZvcm1EYXRhKCk7XG5cdFx0XHQkLmVhY2goIGZpbGVzLCBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0ZGF0YS5hcHBlbmQoIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblxuXHRcdFx0ZGF0YS5hcHBlbmQoICdhY3Rpb24nLCAnbm90aWZpY2F0aW9uX2ltcG9ydF9qc29uJyApO1xuXHRcdFx0ZGF0YS5hcHBlbmQoICd0eXBlJywgJ25vdGlmaWNhdGlvbnMnICk7XG5cdFx0XHRkYXRhLmFwcGVuZCggJ25vbmNlJywgJGJ1dHRvbi5kYXRhKCAnbm9uY2UnICkgKTtcblxuXHRcdFx0YWRkX21lc3NhZ2UoICduZXV0cmFsJywgX18oICdJbXBvcnRpbmcgZGF0YS4uLicsICdub3RpZmljYXRpb24nICkgKTtcblx0XHRcdCRidXR0b24uZGF0YSggJ3Byb2Nlc3NpbmcnLCAndHJ1ZScgKTtcblxuXHRcdFx0JC5hamF4KCB7XG5cdFx0ICAgICAgICB1cmw6IG5vdGlmaWNhdGlvbi5hamF4dXJsLFxuXHRcdCAgICAgICAgdHlwZTogJ1BPU1QnLFxuXHRcdCAgICAgICAgZGF0YTogZGF0YSxcblx0XHQgICAgICAgIGNhY2hlOiBmYWxzZSxcblx0XHQgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG5cdFx0ICAgICAgICBwcm9jZXNzRGF0YTogZmFsc2UsXG5cdFx0ICAgICAgICBjb250ZW50VHlwZTogZmFsc2UsXG5cdFx0ICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0ICAgICAgICBcdGlmICggcmVzcG9uc2Uuc3VjY2VzcyApIHtcblx0XHQgICAgICAgIFx0XHRhZGRfbWVzc2FnZSggJ3N1Y2Nlc3MnLCByZXNwb25zZS5kYXRhICk7XG5cdFx0ICAgICAgICBcdFx0JGZpbGUudmFsKCAnJyApO1xuXHRcdCAgICAgICAgXHR9IGVsc2Uge1xuXHRcdCAgICAgICAgXHRcdGFkZF9tZXNzYWdlKCAnZXJyb3InLCByZXNwb25zZS5kYXRhICk7XG5cdFx0ICAgICAgICBcdH1cblx0XHQgICAgICAgIFx0JGJ1dHRvbi5kYXRhKCAncHJvY2Vzc2luZycsICdmYWxzZScgKTtcblx0XHQgICAgICAgIH0sXG5cdFx0ICAgICAgICBlcnJvcjogZnVuY3Rpb24oIGpxWEhSLCB0ZXh0X3N0YXR1cywgZXJyb3JfdGhyb3duICkge1xuXHRcdCAgICAgICAgICAgIGFkZF9tZXNzYWdlKCAnZXJyb3InLCBlcnJvcl90aHJvd24gKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgfSApO1xuXG5cdFx0fSApO1xuXG5cdH0gKTtcblxufSApKGpRdWVyeSk7XG4iLCIoIGZ1bmN0aW9uKCQpIHtcblxuXHQkKCBkb2N1bWVudCApLnJlYWR5KCBmdW5jdGlvbigpIHtcblxuXHRcdCQoICcubG9nLWNvbnRhaW5lciAubG9nLWl0ZW0gLmxvZy1oYW5kbGUnICkub24oICdjbGljaycsIGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdCQoIHRoaXMgKS5wYXJlbnQoKS50b2dnbGVDbGFzcyggJ2V4cGFuZGVkJyApO1xuXHRcdFx0JCggdGhpcyApLmZpbmQoICcuaW5kaWNhdG9yJyApLnRvZ2dsZUNsYXNzKCAnZGFzaGljb25zLWFycm93LWRvd24gZGFzaGljb25zLWFycm93LXVwJyApO1xuXG4gXHRcdH0gKTtcblxuXHR9ICk7XG5cbn0gKShqUXVlcnkpO1xuIiwiKGZ1bmN0aW9uKCQpIHtcblxuXHR2YXIgX18gPSB3cC5pMThuLl9fO1xuXG5cdCQoIGRvY3VtZW50ICkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gQ29weSBNZXJnZSBUYWcuXG5cdFx0dmFyIG1lcmdlX3RhZ19jbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkKCAnY29kZS5ub3RpZmljYXRpb24tbWVyZ2UtdGFnJyApO1xuXG5cdFx0bWVyZ2VfdGFnX2NsaXBib2FyZC5vbiggJ3N1Y2Nlc3MnLCBmdW5jdGlvbiggZSApIHtcblxuXHRcdCAgICB2YXIgJGNvZGUgPSAkKCBlLnRyaWdnZXIgKSxcblx0XHRcdCAgICB0YWcgICA9ICRjb2RlLnRleHQoKTtcblxuXHRcdFx0bm90aWZpY2F0aW9uLmhvb2tzLmRvQWN0aW9uKCAnbm90aWZpY2F0aW9uLm1lcmdlX3RhZy5jb3BpZWQnLCB0YWcsICRjb2RlICk7XG5cblx0XHRcdCRjb2RlLnRleHQoIF9fKCAnQ29waWVkJywgJ25vdGlmaWNhdGlvbicgKSApO1xuXG5cdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0JGNvZGUudGV4dCggdGFnICk7XG5cdFx0XHR9LCA4MDAgKTtcblxuXHRcdH0gKTtcblxuXHRcdC8vIEluaXRpYWxpemUgYWNjb3JkaW9uLlxuXHRcdHZhciBjb2xsYXBzZSA9ICQoICcubm90aWZpY2F0aW9uX21lcmdlX3RhZ3NfYWNjb3JkaW9uJyApLmNvbGxhcHNlKCk7XG5cblxuXHRcdC8vIFN3YXAgTWVyZ2UgVGFncyBsaXN0IGZvciBuZXcgVHJpZ2dlci5cblx0XHRub3RpZmljYXRpb24uaG9va3MuYWRkQWN0aW9uKCAnbm90aWZpY2F0aW9uLnRyaWdnZXIuY2hhbmdlZCcsIGZ1bmN0aW9uKCAkdHJpZ2dlciApIHtcblxuXHRcdFx0dmFyIHRyaWdnZXJfc2x1ZyA9ICR0cmlnZ2VyLnZhbCgpO1xuXG5cdFx0XHRkYXRhID0ge1xuXHRcdFx0XHRhY3Rpb24gICAgICAgOiAnZ2V0X21lcmdlX3RhZ3NfZm9yX3RyaWdnZXInLFxuXHRcdFx0XHR0cmlnZ2VyX3NsdWcgOiB0cmlnZ2VyX3NsdWdcblx0XHRcdH1cblxuXHRcdFx0JC5wb3N0KCBhamF4dXJsLCBkYXRhLCBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cblx0XHQgICAgXHRpZiAoIHJlc3BvbnNlLnN1Y2Nlc3MgPT0gZmFsc2UgKSB7XG5cdFx0ICAgIFx0XHRhbGVydCggcmVzcG9uc2UuZGF0YSApO1xuXHRcdCAgICBcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JCggJyNub3RpZmljYXRpb25fbWVyZ2VfdGFncyAuaW5zaWRlJyApLmh0bWwoIHJlc3BvbnNlLmRhdGEgKTtcblx0XHRcdFx0XHRjb2xsYXBzZSA9ICQoICcubm90aWZpY2F0aW9uX21lcmdlX3RhZ3NfYWNjb3JkaW9uJyApLmNvbGxhcHNlKCk7XG5cdFx0ICAgIFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHR9ICk7XG5cblx0XHQvLyBTZWFyY2ggTWVyZ2UgVGFncy5cblx0XHQkKCAnYm9keScgKS5vbiggJ2tleXVwJywgJyNub3RpZmljYXRpb24tc2VhcmNoLW1lcmdlLXRhZ3MnLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIHZhbCA9ICQoIHRoaXMgKS52YWwoKS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoICQoIHRoaXMgKS52YWwoKS5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdGNvbGxhcHNlLnRyaWdnZXIoICdvcGVuJyApO1xuXG5cdFx0XHRcdCQoICcubm90aWZpY2F0aW9uX21lcmdlX3RhZ3NfYWNjb3JkaW9uIGgyLCAubm90aWZpY2F0aW9uX21lcmdlX3RhZ3NfYWNjb3JkaW9uIC50YWdzLWdyb3VwJyApLmhpZGUoKTtcblxuXHRcdFx0XHQkKCAnLmluc2lkZSBsaScgKS5lYWNoKCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0XHQkKCB0aGlzICkuaGlkZSgpO1xuXG5cdFx0XHRcdFx0dmFyIHRleHQgPSAkKCB0aGlzICkuZmluZCggJy5pbnRybyBjb2RlJyApLnRleHQoKS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRcdFx0aWYgKCAtMSAhPT0gdGV4dC5pbmRleE9mKCB2YWwgKSkge1xuXHRcdFx0XHRcdFx0JCggdGhpcyApLnNob3coKTtcblx0XHRcdFx0XHRcdHZhciBwYXJlbnRDbGFzcyA9ICQoIHRoaXMgKS5wYXJlbnRzKCAndWwnICkuZGF0YSggJ2dyb3VwJyApO1xuXHRcdFx0XHRcdFx0JCggJ1tkYXRhLWdyb3VwPScgKyBwYXJlbnRDbGFzcyArICddJyApLnNob3coKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkKCAnLm5vdGlmaWNhdGlvbl9tZXJnZV90YWdzX2FjY29yZGlvbiBoMiwgLmluc2lkZSBsaScgKS5zaG93KCk7XG5cdFx0XHRcdGNvbGxhcHNlLnRyaWdnZXIoICdjbG9zZScgKTtcblx0XHRcdH1cblxuXHRcdH0gKTtcblxuXHR9ICk7XG5cbn0pKGpRdWVyeSk7XG4iLCIoIGZ1bmN0aW9uKCQpIHtcblxuXHQkKCBkb2N1bWVudCApLnJlYWR5KCBmdW5jdGlvbigpIHtcblxuXHRcdCQoICcubm90aWZpY2F0aW9uLXByZXR0eS1zZWxlY3Q6dmlzaWJsZScgKS5zZWxlY3RpemUoKTtcblxuXHRcdG5vdGlmaWNhdGlvbi5ob29rcy5hZGRBY3Rpb24oICdub3RpZmljYXRpb24uY2Fycmllci5yZWNpcGllbnRzLnJlY2lwaWVudC5yZXBsYWNlZCcsIGZ1bmN0aW9uKCAkaW5wdXQgKSB7XG5cdFx0XHRpZiAoICRpbnB1dC5oYXNDbGFzcyggJ25vdGlmaWNhdGlvbi1wcmV0dHktc2VsZWN0JyApICkge1xuXHRcdFx0XHQkaW5wdXQuc2VsZWN0aXplKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0bm90aWZpY2F0aW9uLmhvb2tzLmFkZEFjdGlvbiggJ25vdGlmaWNhdGlvbi5yZXBlYXRlci5yb3cuYWRkZWQnLCBmdW5jdGlvbiggJHJvdywgJHJlcGVhdGVyICkge1xuXHRcdFx0JHJvdy5maW5kKCAnc2VsZWN0Lm5vdGlmaWNhdGlvbi1wcmV0dHktc2VsZWN0JyApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkuc2VsZWN0aXplKCk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXG5cdH0gKTtcblxufSApKGpRdWVyeSk7XG4iLCIoIGZ1bmN0aW9uKCAkICkge1xuXG5cdHZhciBfXyA9IHdwLmkxOG4uX187XG5cblx0JChkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXG5cdFx0JCgnLm5vdGlmaWNhdGlvbi1kZWxldGUtcG9zdCcpLmNsaWNrKCBmdW5jdGlvbiggZSApIHtcblx0XHRcdGlmICggISBjb25maXJtKCBfXyggJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBwZXJtYW5lbnRseSBkZWxldGUgdGhpcyBub3RpZmljYXRpb24/JywgJ25vdGlmaWNhdGlvbicgKSApICkge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0fSApO1xuXG59ICkoIGpRdWVyeSApO1xuIiwiKCBmdW5jdGlvbiggJCApIHtcblxuXHQkKGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdFx0JCggJy51bmRlcmRldi1zZXR0aW5ncyAucHJldHR5LXNlbGVjdCcgKS5zZWxlY3RpemUoKTtcblx0XHRuZXcgalF1ZXJ5Q29sbGFwc2UoICQoICcudW5kZXJkZXYtc2V0dGluZ3MgLnNldHRpbmctZ3JvdXAnICksIHtcblx0XHRcdG9wZW46IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGlzLnNsaWRlRG93bigxMDApO1xuXHRcdFx0fSxcblx0XHRcdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhpcy5zbGlkZVVwKDEwMCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdCQoICcuc2V0dGluZy1ncm91cC1oZWFkZXInICkuY2xpY2soIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHdyYXBwZXIgPSAkKHRoaXMpLnBhcmVudHMoJy5zZXR0aW5nLWdyb3VwJykuZmluZCggJy5mb3JtLXRhYmxlJyApO1xuXHRcdFx0d3JhcHBlci50cmlnZ2VyKCAndG9nZ2xlJyApO1xuXHRcdH0gKTtcblx0fSApO1xuXG59ICkoIGpRdWVyeSApO1xuIiwiKGZ1bmN0aW9uKCQpIHtcblxuXHR2YXIgX18gPSB3cC5pMThuLl9fO1xuXG5cdCQoIGRvY3VtZW50ICkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gQ29weSB0aGUgdXJsXG5cblx0XHR2YXIgbWVyZ2VfdGFnX2NsaXBib2FyZCA9IG5ldyBDbGlwYm9hcmQoICcjbm90aWZpY2F0aW9uLXN0b3J5IGNvZGUnICk7XG5cblx0XHRtZXJnZV90YWdfY2xpcGJvYXJkLm9uKCAnc3VjY2VzcycsIGZ1bmN0aW9uKGUpIHtcblxuXHRcdCAgICB2YXIgJGNvZGUgICAgID0gJCggZS50cmlnZ2VyICksXG5cdFx0XHQgICAgY29weV90ZXh0ID0gJGNvZGUuZmluZCggJ3NwYW4nICkudGV4dCgpO1xuXG5cdFx0XHQkY29kZS5maW5kKCAnc3BhbicgKS50ZXh0KCBfXyggJ0NvcGllZCcsICdub3RpZmljYXRpb24nICkgKTtcblxuXHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdCRjb2RlLmZpbmQoICdzcGFuJyApLnRleHQoIGNvcHlfdGV4dCApO1xuXHRcdFx0fSwgODAwICk7XG5cblx0XHR9ICk7XG5cblx0fSApO1xuXG59KShqUXVlcnkpO1xuIiwiKCBmdW5jdGlvbigkKSB7XG5cblx0JCggZG9jdW1lbnQgKS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cblx0XHQkKCAnLmNvbHVtbi1zd2l0Y2ggLm9ub2Zmc3dpdGNoJyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdHZhciAkc3dpdGNoID0gJCggdGhpcyApLFxuXHRcdFx0XHRwb3N0X2lkID0gJHN3aXRjaC5kYXRhKCAncG9zdGlkJyApO1xuXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRub3RpZmljYXRpb24uaG9va3MuZG9BY3Rpb24oICdub3RpZmljYXRpb24uc3RhdHVzLmNoYW5nZWQnLCAkc3dpdGNoLCBwb3N0X2lkICk7XG5cbiBcdFx0fSApO1xuXG4gXHRcdG5vdGlmaWNhdGlvbi5ob29rcy5hZGRBY3Rpb24oICdub3RpZmljYXRpb24uc3RhdHVzLmNoYW5nZWQnLCBmdW5jdGlvbiggJHN3aXRjaCwgcG9zdF9pZCApIHtcblxuIFx0XHRcdHZhciBzdGF0dXMgPSAhICRzd2l0Y2guZmluZCggJ2lucHV0JyApLmF0dHIoICdjaGVja2VkJyApO1xuXG4gXHRcdFx0JHN3aXRjaC5hZGRDbGFzcyggJ2xvYWRpbmcnICk7XG5cbiBcdFx0XHRkYXRhID0ge1xuXHRcdFx0XHRhY3Rpb24gOiAnY2hhbmdlX25vdGlmaWNhdGlvbl9zdGF0dXMnLFxuXHRcdFx0XHRwb3N0X2lkOiBwb3N0X2lkLFxuXHRcdFx0XHRzdGF0dXMgOiBzdGF0dXMsXG5cdFx0XHRcdG5vbmNlICA6ICRzd2l0Y2guZGF0YSggJ25vbmNlJyApXG5cdFx0XHR9XG5cblx0XHRcdCQucG9zdCggbm90aWZpY2F0aW9uLmFqYXh1cmwsIGRhdGEsIGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblxuXHRcdCAgICBcdGlmICggcmVzcG9uc2Uuc3VjY2VzcyA9PSB0cnVlICkge1xuXHRcdCAgICBcdFx0JHN3aXRjaC5yZW1vdmVDbGFzcyggJ2xvYWRpbmcnICk7XG5cdCBcdFx0XHRcdCRzd2l0Y2guZmluZCggJ2lucHV0JyApLmF0dHIoICdjaGVja2VkJywgc3RhdHVzICk7XG5cdFx0ICAgIFx0fSBlbHNlIHtcblx0XHQgICAgXHRcdGFsZXJ0KCByZXNwb25zZS5kYXRhICk7XG5cdFx0ICAgIFx0fVxuXG5cdFx0XHR9ICk7XG5cbiBcdFx0fSApO1xuXG5cdH0gKTtcblxufSApKGpRdWVyeSk7XG4iLCIoIGZ1bmN0aW9uKCQpIHtcblxuXHR2YXIgX18gPSB3cC5pMThuLl9fO1xuXG5cdCQoIGRvY3VtZW50ICkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXG5cdFx0JCggJy5ncm91cC1zeW5jIC5maWVsZC1hY3Rpb25zIC5ub3RpZmljYXRpb24tc3luYy1hbGwnICkub24oICdjbGljaycsIGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0dmFyICRtYXN0ZXJfYnV0dG9uID0gJCggdGhpcyApO1xuXG5cdFx0XHRpZiAoICRtYXN0ZXJfYnV0dG9uLmF0dHIoICdkaXNhYmxlZCcgKSApIHtcbiBcdFx0XHRcdHJldHVybiBmYWxzZTtcbiBcdFx0XHR9XG5cblx0XHRcdCRtYXN0ZXJfYnV0dG9uLmF0dHIoICdkaXNhYmxlZCcsIHRydWUgKTtcblxuXHRcdFx0JCggJy5ncm91cC1zeW5jIC5maWVsZC1ub3RpZmljYXRpb25zIHRyJyApLmVhY2goIGZ1bmN0aW9uKCBudW0sIG5vdGlmaWNhdGlvbl9yb3cgKSB7XG5cblx0XHRcdFx0dmFyICRidXR0b24gPSAkKCBub3RpZmljYXRpb25fcm93ICkuZmluZCggJy5idXR0b24ubm90aWZpY2F0aW9uLXN5bmMnICk7XG5cblx0XHRcdFx0aWYgKCAkYnV0dG9uLmRhdGEoICdzeW5jLXR5cGUnICkgPT09ICRtYXN0ZXJfYnV0dG9uLmRhdGEoICd0eXBlJyApICkge1xuXHRcdFx0XHRcdG5vdGlmaWNhdGlvbi5ob29rcy5kb0FjdGlvbiggJ25vdGlmaWNhdGlvbi5zeW5jLmluaXQnLCAkYnV0dG9uICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSApO1xuXG4gXHRcdH0gKTtcblxuXHRcdCQoICcuZ3JvdXAtc3luYyAuZmllbGQtbm90aWZpY2F0aW9ucyB0ZCA+IC5idXR0b24ubm90aWZpY2F0aW9uLXN5bmMnICkub24oICdjbGljaycsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRub3RpZmljYXRpb24uaG9va3MuZG9BY3Rpb24oICdub3RpZmljYXRpb24uc3luYy5pbml0JywgJCggdGhpcyApICk7XG4gXHRcdH0gKTtcblxuIFx0XHRub3RpZmljYXRpb24uaG9va3MuYWRkQWN0aW9uKCAnbm90aWZpY2F0aW9uLnN5bmMuaW5pdCcsIGZ1bmN0aW9uKCAkYnV0dG9uICkge1xuXG4gXHRcdFx0aWYgKCAkYnV0dG9uLmF0dHIoICdkaXNhYmxlZCcgKSApIHtcbiBcdFx0XHRcdHJldHVybiBmYWxzZTtcbiBcdFx0XHR9XG5cbiBcdFx0XHR2YXIgc3luY190eXBlID0gJGJ1dHRvbi5kYXRhKCAnc3luYy10eXBlJyApLFxuIFx0XHRcdFx0aGFzaCAgICAgID0gJGJ1dHRvbi5kYXRhKCAnc3luYy1oYXNoJyApLFxuIFx0XHRcdFx0bm9uY2UgICAgID0gJGJ1dHRvbi5kYXRhKCAnbm9uY2UnICksXG4gXHRcdFx0XHRsYWJlbCAgICAgPSAkYnV0dG9uLnRleHQoKTtcblxuXHRcdFx0JGJ1dHRvbi5hdHRyKCAnZGlzYWJsZWQnLCB0cnVlICk7XG5cdFx0XHQkYnV0dG9uLnRleHQoIF9fKCAnU3luY2hyb25pemluZy4uLicsICdub3RpZmljYXRpb24nICkgKTtcblxuIFx0XHRcdGRhdGEgPSB7XG5cdFx0XHRcdGFjdGlvbiA6ICdub3RpZmljYXRpb25fc3luYycsXG5cdFx0XHRcdGhhc2ggICA6IGhhc2gsXG5cdFx0XHRcdHR5cGUgICA6IHN5bmNfdHlwZSxcblx0XHRcdFx0bm9uY2UgIDogbm9uY2Vcblx0XHRcdH1cblxuXHRcdFx0JC5wb3N0KCBub3RpZmljYXRpb24uYWpheHVybCwgZGF0YSwgZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXG5cdFx0XHRcdGlmICggcmVzcG9uc2Uuc3VjY2VzcyA9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0dmFyICRub3RpZmljYXRpb25fcm93ID0gJGJ1dHRvbi5wYXJlbnQoKS5wYXJlbnQoKTtcblxuXHRcdFx0XHRcdGlmICggJ3dvcmRwcmVzcycgPT09IHN5bmNfdHlwZSApIHtcblx0XHRcdFx0XHRcdHZhciAkdGl0bGVfdGQgPSAkbm90aWZpY2F0aW9uX3Jvdy5maW5kKCAndGQudGl0bGUnICk7XG5cdFx0XHRcdFx0XHR2YXIgJGxpbmsgICAgID0gJCggJzxhPicsIHtcblx0XHRcdFx0XHRcdFx0XHR0ZXh0IDogJHRpdGxlX3RkLnRleHQoKSxcblx0XHRcdFx0XHRcdFx0XHRocmVmIDogcmVzcG9uc2UuZGF0YVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHQkdGl0bGVfdGQuaHRtbCggJGxpbmsgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQkbm90aWZpY2F0aW9uX3Jvdy5maW5kKCAndGQuc3RhdHVzJyApLnRleHQoIF9fKCAnU3luY2hyb25pemVkJywgJ25vdGlmaWNhdGlvbicgKSApO1xuXHRcdFx0XHRcdCRidXR0b24ucmVtb3ZlKCk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRhbGVydCggcmVzcG9uc2UuZGF0YSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0JGJ1dHRvbi5hdHRyKCAnZGlzYWJsZWQnLCBmYWxzZSApO1xuXG5cdFx0XHR9ICk7XG5cbiBcdFx0fSApO1xuXG5cdH0gKTtcblxufSApKGpRdWVyeSk7XG4iLCIoZnVuY3Rpb24oJCkge1xuXG5cdCQoIGRvY3VtZW50ICkucmVhZHkoIGZ1bmN0aW9uKCkge1xuXG5cdFx0JCggJyNub3RpZmljYXRpb25fdHJpZ2dlcl9zZWxlY3QnICkuc2VsZWN0aXplKCB7XG5cdFx0XHRyZW5kZXI6IHtcblx0XHQgICAgICAgIGl0ZW06IGZ1bmN0aW9uKGl0ZW0sIGVzY2FwZSkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiAnPGRpdj4nICtcblx0XHQgICAgICAgICAgICBcdGl0ZW0udGV4dC5yZXBsYWNlKC9cXFtcXFsoLiopXFxdXFxdL2csICcnKSArXG5cdFx0ICAgICAgICAgICAgJzwvZGl2Pic7XG5cdFx0ICAgICAgICB9LFxuXHRcdCAgICAgICAgb3B0aW9uOiBmdW5jdGlvbihpdGVtLCBlc2NhcGUpIHtcblx0XHQgICAgICAgICAgICByZXR1cm4gJzxkaXY+JyArXG5cdFx0ICAgICAgICAgICAgXHRpdGVtLnRleHQucmVwbGFjZSgvKC4qKVxcW1xcWyguKilcXF1cXF0vZywgJzxzcGFuIGNsYXNzPVwibGFiZWxcIj4kMTwvc3Bhbj48c3BhbiBjbGFzcz1cImNhcHRpb25cIj4kMjwvc3Bhbj4nKSArXG5cdFx0ICAgICAgICAgICAgJzwvZGl2Pic7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIH0sXG5cdFx0fSApO1xuXG5cdFx0JCggJyNub3RpZmljYXRpb25fdHJpZ2dlcl9zZWxlY3QnICkuc2VsZWN0aXplKCkuY2hhbmdlKCBmdW5jdGlvbigpIHtcblx0XHRcdG5vdGlmaWNhdGlvbi5ob29rcy5kb0FjdGlvbiggJ25vdGlmaWNhdGlvbi50cmlnZ2VyLmNoYW5nZWQnLCAkKCB0aGlzICkgKTtcblx0XHR9ICk7XG5cblx0fSApO1xuXG59KShqUXVlcnkpO1xuIl19
